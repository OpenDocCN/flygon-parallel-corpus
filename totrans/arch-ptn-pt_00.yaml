- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: You may be wondering who we are and why we wrote this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道我们是谁，为什么要写这本书。
- en: At the end of Harry’s last book, [*Test-Driven Development with Python*](http://obeythetestinggoat.com)
    (O’Reilly), he found himself asking a bunch of questions about architecture, such
    as, What’s the best way of structuring your application so that it’s easy to test?
    More specifically, so that your core business logic is covered by unit tests,
    and so that you minimize the number of integration and end-to-end tests you need?
    He made vague references to “Hexagonal Architecture” and “Ports and Adapters”
    and “Functional Core, Imperative Shell,” but if he was honest, he’d have to admit
    that these weren’t things he really understood or had done in practice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Harry的最后一本书[*Test-Driven Development with Python*](http://obeythetestinggoat.com)（O'Reilly）中，他发现自己对架构提出了一堆问题，比如，如何构建应用程序的最佳结构，以便易于测试？更具体地说，如何确保核心业务逻辑由单元测试覆盖，并最小化需要的集成和端到端测试的数量？他模糊地提到了“六边形架构”、“端口和适配器”和“功能核心，命令式外壳”，但如果他诚实的话，他不得不承认这些并不是他真正理解或实践过的东西。
- en: And then he was lucky enough to run into Bob, who has the answers to all these
    questions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后他很幸运地遇到了Bob，他对所有这些问题都有答案。
- en: Bob ended up a software architect because nobody else on his team was doing
    it. He turned out to be pretty bad at it, but *he* was lucky enough to run into
    Ian Cooper, who taught him new ways of writing and thinking about code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Bob最终成为了一名软件架构师，因为他所在团队中没有其他人在做这件事。结果他发现自己在这方面表现得相当糟糕，但*他*很幸运地遇到了Ian Cooper，后者教会了他关于编写和思考代码的新方法。
- en: Managing Complexity, Solving Business Problems
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理复杂性，解决业务问题
- en: We both work for MADE.com, a European ecommerce company that sells furniture
    online; there, we apply the techniques in this book to build distributed systems
    that model real-world business problems. Our example domain is the first system
    Bob built for MADE, and this book is an attempt to write down all the *stuff*
    we have to teach new programmers when they join one of our teams.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都在MADE.com工作，这是一家在欧洲在线销售家具的电子商务公司；在那里，我们应用这本书中的技术来构建模拟现实世界业务问题的分布式系统。我们的示例领域是Bob为MADE建立的第一个系统，这本书试图记录下我们在加入我们团队的新程序员时需要教授的所有*东西*。
- en: MADE.com operates a global supply chain of freight partners and manufacturers.
    To keep costs low, we try to optimize the delivery of stock to our warehouses
    so that we don’t have unsold goods lying around the place.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MADE.com在全球范围内运营货运合作伙伴和制造商的供应链。为了降低成本，我们努力优化库存的交付到我们的仓库，以便我们不会有未售出的商品堆积在这里。
- en: Ideally, the sofa that you want to buy will arrive in port on the very day that
    you decide to buy it, and we’ll ship it straight to your house without ever storing
    it. Getting the timing right is a tricky balancing act when goods take three months
    to arrive by container ship. Along the way, things get broken or water damaged,
    storms cause unexpected delays, logistics partners mishandle goods, paperwork
    goes missing, customers change their minds and amend their orders, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你想要购买的沙发将在你决定购买的当天到达港口，然后我们会直接将其运送到你的家，而不会存放。当货物需要三个月才能通过集装箱船到达时，把握时机是一个棘手的平衡行为。在这个过程中，货物会损坏或水损，风暴会导致意外延迟，物流合作伙伴会处理不当，文件会丢失，客户会改变主意并修改订单，等等。
- en: We solve those problems by building intelligent software representing the kinds
    of operations taking place in the real world so that we can automate as much of
    the business as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过构建智能软件来解决这些问题，这些软件代表了现实世界中发生的各种操作，以便我们尽可能地自动化业务的大部分内容。
- en: Why Python?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python？
- en: 'If you’re reading this book, we probably don’t need to convince you that Python
    is great, so the real question is “Why does the *Python* community need a book
    like this?” The answer is about Python’s popularity and maturity: although Python
    is probably the world’s fastest-growing programming language and is nearing the
    top of the absolute popularity tables, it’s only just starting to take on the
    kinds of problems that the C# and Java world has been working on for years. Startups
    become real businesses; web apps and scripted automations are becoming (whisper
    it) *enterprise* *software*.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，我们可能不需要说服你Python有多么棒，所以真正的问题是“为什么*Python*社区需要这样一本书？”答案与Python的流行和成熟度有关：尽管Python可能是世界上增长最快的编程语言，接近绝对流行榜的顶端，但它才刚刚开始解决C#和Java世界多年来一直在处理的那种问题。初创公司变成真正的企业；Web应用程序和脚本自动化正在成为（小声说）*企业*
    *软件*。
- en: 'In the Python world, we often quote the Zen of Python: “There should be one—and
    preferably only one—obvious way to do it.”^([1](preface01.xhtml#idm45714914017832))
    Unfortunately, as project size grows, the most obvious way of doing things isn’t
    always the way that helps you manage complexity and evolving requirements.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python世界中，我们经常引用Python之禅：“应该有一种——最好只有一种——明显的方法来做到这一点。”^([1](preface01.xhtml#idm45714914017832))不幸的是，随着项目规模的增长，做事情的最明显方式并不总是帮助你管理复杂性和不断变化的需求的方式。
- en: None of the techniques and patterns we discuss in this book are new, but they
    are mostly new to the Python world. And this book isn’t a replacement for the
    classics in the field such as Eric Evans’s *Domain-Driven Design* or Martin Fowler’s
    *Patterns of Enterprise Application Architecture* (both published by Addison-Wesley
    Professional)—which we often refer to and encourage you to go and read.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中讨论的所有技术和模式都不是新的，但它们在Python世界中大多是新的。这本书也不是领域驱动设计等领域的经典著作的替代品，比如Eric Evans的*Domain-Driven
    Design*或Martin Fowler的*Patterns of Enterprise Application Architecture*（Addison-Wesley
    Professional出版）——我们经常参考并鼓励你去阅读。
- en: But all the classic code examples in the literature do tend to be written in
    Java or C++/#, and if you’re a Python person and haven’t used either of those
    languages in a long time (or indeed ever), those code listings can be quite…trying.
    There’s a reason the latest edition of that other classic text, Fowler’s *Refactoring*
    (Addison-Wesley Professional), is in JavaScript.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，文献中所有经典的代码示例往往都是用Java或C++/#编写的，如果您是Python人，并且很长时间没有使用过这两种语言（或者根本没有使用过），那么这些代码清单可能会相当困难。这就是为什么另一本经典文本《重构》（Addison-Wesley
    Professional）的最新版本是用JavaScript编写的原因。
- en: TDD, DDD, and Event-Driven Architecture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD、DDD和事件驱动架构
- en: 'In order of notoriety, we know of three tools for managing complexity:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 按照声名显赫的顺序，我们知道三种管理复杂性的工具：
- en: '*Test-driven development* (TDD) helps us to build code that is correct and
    enables us to refactor or add new features, without fear of regression. But it
    can be hard to get the best out of our tests: How do we make sure that they run
    as fast as possible? That we get as much coverage and feedback from fast, dependency-free
    unit tests and have the minimum number of slower, flaky end-to-end tests?'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*测试驱动开发*（TDD）帮助我们构建正确的代码，并使我们能够进行重构或添加新功能，而不用担心回归。但是，如何确保测试尽可能快地运行？我们如何确保从快速、无依赖的单元测试中获得尽可能多的覆盖和反馈，并且具有最少数量的较慢、不稳定的端到端测试？'
- en: '*Domain-driven design* (DDD) asks us to focus our efforts on building a good
    model of the business domain, but how do we make sure that our models aren’t encumbered
    with infrastructure concerns and don’t become hard to change?'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*领域驱动设计*（DDD）要求我们将努力集中在构建业务领域的良好模型上，但我们如何确保我们的模型不受基础设施问题的影响，不会变得难以更改？'
- en: Loosely coupled (micro)services integrated via messages (sometimes called *reactive
    microservices*) are a well-established answer to managing complexity across multiple
    applications or business domains. But it’s not always obvious how to make them
    fit with the established tools of the Python world—Flask, Django, Celery, and
    so on.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 松散耦合（微）服务通过消息集成（有时称为*反应式微服务*）是管理多个应用程序或业务领域复杂性的一种成熟解决方案。但如何使它们与Python世界中已建立的工具（如Flask、Django、Celery等）相适应并不总是显而易见。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Don’t be put off if you’re not working with (or interested in) microservices.
    The vast majority of the patterns we discuss, including much of the event-driven
    architecture material, is absolutely applicable in a monolithic architecture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用（或对）微服务不感兴趣，也不要被吓到。我们讨论的大多数模式，包括大部分事件驱动架构材料，在单体架构中也是完全适用的。
- en: Our aim with this book is to introduce several classic architectural patterns
    and show how they support TDD, DDD, and event-driven services. We hope it will
    serve as a reference for implementing them in a Pythonic way, and that people
    can use it as a first step toward further research in this field.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是介绍几种经典的架构模式，并展示它们如何支持TDD、DDD和事件驱动服务。我们希望它能作为在Python中实现它们的参考，并且人们可以将其用作进一步研究这一领域的第一步。
- en: Who Should Read This Book
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该阅读本书
- en: 'Here are a few things we assume about you, dear reader:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们对您的一些假设，亲爱的读者：
- en: You’ve been close to some reasonably complex Python applications.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您曾接触过一些相当复杂的Python应用程序。
- en: You’ve seen some of the pain that comes with trying to manage that complexity.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您已经看到了尝试管理这种复杂性所带来的一些痛苦。
- en: You don’t necessarily know anything about DDD or any of the classic application
    architecture patterns.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不一定了解DDD或任何经典应用程序架构模式。
- en: We structure our explorations of architectural patterns around an example app,
    building it up chapter by chapter. We use TDD at work, so we tend to show listings
    of tests first, followed by implementation. If you’re not used to working test-first,
    it may feel a little strange at the beginning, but we hope you’ll soon get used
    to seeing code “being used” (i.e., from the outside) before you see how it’s built
    on the inside.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们围绕一个示例应用程序来探讨架构模式，逐章构建它。我们在工作中使用TDD，所以我们倾向于先展示测试清单，然后是实现。如果您不习惯先测试工作，开始时可能会感到有点奇怪，但我们希望您很快就会习惯在看到代码“被使用”（即从外部）之前先看到它是如何在内部构建的。
- en: We use some specific Python frameworks and technologies, including Flask, SQLAlchemy,
    and pytest, as well as Docker and Redis. If you’re already familiar with them,
    that won’t hurt, but we don’t think it’s required. One of our main aims with this
    book is to build an architecture for which specific technology choices become
    minor implementation details.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一些特定的Python框架和技术，包括Flask、SQLAlchemy和pytest，以及Docker和Redis。如果您已经熟悉它们，那不会有什么坏处，但我们认为这并非必需。本书的主要目标之一是构建一个特定技术选择变成次要实现细节的架构。
- en: A Brief Overview of What You’ll Learn
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您将学到的简要概述
- en: The book is divided into two parts; here’s a look at the topics we’ll cover
    and the chapters they live in.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为两部分；以下是我们将涵盖的主题以及它们所在的章节。
- en: '[Part I, *Building an Architecture to Support Domain Modeling*](part01.xhtml#part1)'
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第一部分，*构建支持领域建模的架构*](part01.xhtml#part1)'
- en: Domain modeling and DDD (Chapters [1](ch01.xhtml#chapter_01_domain_model) and
    [7](ch07.xhtml#chapter_07_aggregate))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 领域建模和DDD（第[1](ch01.xhtml#chapter_01_domain_model)章和第[7](ch07.xhtml#chapter_07_aggregate)章）
- en: At some level, everyone has learned the lesson that complex business problems
    need to be reflected in code, in the form of a model of the domain. But why does
    it always seem to be so hard to do without getting tangled up with infrastructure
    concerns, our web frameworks, or whatever else? In the first chapter we give a
    broad overview of *domain modeling* and DDD, and we show how to get started with
    a model that has no external dependencies, and fast unit tests. Later we return
    to DDD patterns to discuss how to choose the right aggregate, and how this choice
    relates to questions of data integrity.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个层面上，每个人都学到了一个教训，即复杂的业务问题需要在代码中反映出来，以领域模型的形式。但为什么总是似乎如此难以做到而不陷入基础设施问题、web框架或其他问题？在第一章中，我们对*领域建模*和DDD进行了广泛概述，并展示了如何开始一个没有外部依赖和快速单元测试的模型。后来，我们回到DDD模式，讨论如何选择正确的聚合，以及这个选择与数据完整性问题的关系。
- en: Repository, Service Layer, and Unit of Work patterns (Chapters [2](ch02.xhtml#chapter_02_repository),
    [4](ch04.xhtml#chapter_04_service_layer), and [5](ch05.xhtml#chapter_05_high_gear_low_gear))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 仓储、服务层和工作单元模式（第2、4和5章）
- en: In these three chapters we present three closely related and mutually reinforcing
    patterns that support our ambition to keep the model free of extraneous dependencies.
    We build a layer of abstraction around persistent storage, and we build a service
    layer to define the entrypoints to our system and capture the primary use cases.
    We show how this layer makes it easy to build thin entrypoints to our system,
    whether it’s a Flask API or a CLI.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三章中，我们提出了三种密切相关且相互加强的模式，以支持我们保持模型不受外部依赖的野心。我们在持久存储周围构建了一个抽象层，并建立了一个服务层来定义系统的入口点并捕获主要用例。我们展示了这一层如何使得构建系统的薄入口变得容易，无论是Flask
    API还是CLI。
- en: Some thoughts on testing and abstractions (Chapters [3](ch03.xhtml#chapter_03_abstractions)
    and [6](ch06.xhtml#chapter_06_uow))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于测试和抽象的一些想法（第3和6章）
- en: After presenting the first abstraction (the Repository pattern), we take the
    opportunity for a general discussion of how to choose abstractions, and what their
    role is in choosing how our software is coupled together. After we introduce the
    Service Layer pattern, we talk a bit about achieving a *test pyramid* and writing
    unit tests at the highest possible level of abstraction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍第一个抽象（仓储模式）之后，我们有机会进行一般性讨论，讨论如何选择抽象，以及它们在选择我们的软件如何耦合在一起方面的作用。在介绍服务层模式之后，我们稍微谈了一下如何实现*测试金字塔*，以及在最高可能的抽象级别编写单元测试。
- en: '[Part II, *Event-Driven Architecture*](part02.xhtml#part2)'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[第二部分，*事件驱动架构*](part02.xhtml#part2)'
- en: Event-driven architecture (Chapters [8](ch08.xhtml#chapter_08_events_and_message_bus)–[11](ch11.xhtml#chapter_11_external_events))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构（第8-11章）
- en: 'We introduce three more mutually reinforcing patterns: the Domain Events, Message
    Bus, and Handler patterns. *Domain events* are a vehicle for capturing the idea
    that some interactions with a system are triggers for others. We use a *message
    bus* to allow actions to trigger events and call appropriate *handlers*. We move
    on to discuss how events can be used as a pattern for integration between services
    in a microservices architecture. Finally, we distinguish between *commands* and
    *events*. Our application is now fundamentally a message-processing system.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了另外三种相互加强的模式：领域事件、消息总线和处理程序模式。*领域事件*是捕获系统某些交互触发其他交互的一种方式。我们使用*消息总线*允许动作触发事件并调用适当的*处理程序*。我们继续讨论事件如何作为微服务架构中服务之间集成的模式。最后，我们区分了*命令*和*事件*。我们的应用现在基本上是一个消息处理系统。
- en: Command-query responsibility segregation ([Chapter 12](ch12.xhtml#chapter_12_cqrs))
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 命令查询职责分离（第12章）
- en: We present an example of *command-query responsibility segregation*, with and
    without events.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一个*命令查询职责分离*的示例，有和没有事件。
- en: Dependency injection ([Chapter 13](ch13.xhtml#chapter_13_dependency_injection))
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入（第13章）
- en: We tidy up our explicit and implicit dependencies and implement a simple dependency
    injection framework.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们整理了显式和隐式的依赖关系，并实现了一个简单的依赖注入框架。
- en: Addtional Content
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外内容
- en: How do I get there from here? ([Epilogue](afterword01.xhtml#epilogue_1_how_to_get_there_from_here))
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我怎样才能从这里到那里？（后记）
- en: Implementing architectural patterns always looks easy when you show a simple
    example, starting from scratch, but many of you will probably be wondering how
    to apply these principles to existing software. We’ll provide a few pointers in
    the epilogue and some links to further reading.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你展示一个简单的例子，从头开始实现架构模式总是看起来很容易，但你们中的许多人可能会想知道如何将这些原则应用到现有软件中。我们将在后记中提供一些指引和一些进一步阅读的链接。
- en: Example Code and Coding Along
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码和编码过程
- en: You’re reading a book, but you’ll probably agree with us when we say that the
    best way to learn about code is to code. We learned most of what we know from
    pairing with people, writing code with them, and learning by doing, and we’d like
    to re-create that experience as much as possible for you in this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在阅读一本书，但你可能会同意我们的观点，即了解代码的最佳方式是编写代码。我们大部分知识都是通过与他人配对、与他们一起编写代码并通过实践学习而得到的，我们希望在这本书中尽可能多地为你重新创造那种经验。
- en: As a result, we’ve structured the book around a single example project (although
    we do sometimes throw in other examples). We’ll build up this project as the chapters
    progress, as if you’ve paired with us and we’re explaining what we’re doing and
    why at each step.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们围绕一个单一的示例项目构建了这本书（尽管我们有时会加入其他示例）。随着章节的进展，我们将逐步构建这个项目，就好像你和我们一起配对，我们在每一步都解释我们在做什么以及为什么。
- en: But to really get to grips with these patterns, you need to mess about with
    the code and get a feel for how it works. You’ll find all the code on GitHub;
    each chapter has its own branch. You can find [a list](https://github.com/cosmicpython/code/branches/all)
    of the branches on GitHub as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但要真正掌握这些模式，你需要动手编写代码，了解它的工作原理。你可以在GitHub上找到所有的代码；每个章节都有自己的分支。你也可以在GitHub上找到[分支列表](https://github.com/cosmicpython/code/branches/all)。
- en: 'Here are three ways you might code along with the book:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有三种你可以跟着书本编码的方式：
- en: 'Start your own repo and try to build up the app as we do, following the examples
    from listings in the book, and occasionally looking to our repo for hints. A word
    of warning, however: if you’ve read Harry’s previous book and coded along with
    that, you’ll find that this book requires you to figure out more on your own;
    you may need to lean pretty heavily on the working versions on GitHub.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的存储库，并尝试按照书中的示例构建应用程序，并偶尔查看我们的存储库以获取提示。但是，需要警告一句：如果您已经阅读了哈里的上一本书，并且跟着书本编码，您会发现这本书需要您更多地自己解决问题；您可能需要在GitHub上的工作版本上依赖得更多。
- en: Try to apply each pattern, chapter by chapter, to your own (preferably small/toy)
    project, and see if you can make it work for your use case. This is high risk/high
    reward (and high effort besides!). It may take quite some work to get things working
    for the specifics of your project, but on the other hand, you’re likely to learn
    the most.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将每个模式逐章应用到您自己的（最好是小型/玩具）项目中，看看是否可以让它适用于您的用例。这是高风险/高回报（除了高努力之外！）。让事情适应您的项目的具体情况可能需要相当多的工作，但另一方面，您可能会学到最多。
- en: For less effort, in each chapter we outline an “Exercise for the Reader,” and
    point you to a GitHub location where you can download some partially finished
    code for the chapter with a few missing parts to write yourself.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每一章中，我们都会概述一个“读者练习”，并指向一个GitHub位置，您可以在其中下载一些部分完成的代码，该代码缺少一些部分需要您自己编写。
- en: Particularly if you’re intending to apply some of these patterns in your own
    projects, working through a simple example is a great way to safely practice.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是如果您打算在自己的项目中应用其中一些模式，通过简单的示例进行实践是一个安全的练习方式。
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: At the very least, do a `git checkout` of the code from our repo as you read
    each chapter. Being able to jump in and see the code in the context of an actual
    working app will help answer a lot of questions as you go, and makes everything
    more real. You’ll find instructions for how to do that at the beginning of each
    chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 至少在阅读每一章时，从我们的存储库中进行`git checkout`。能够随时跳转并查看代码在实际工作应用中的上下文将有助于解答许多问题，并使一切更加真实。您将在每章的开头找到如何执行此操作的说明。
- en: License
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可证
- en: The code (and the online version of the book) is licensed under a Creative Commons
    CC BY-NC-ND license, which means you are free to copy and share it with anyone
    you like, for non-commercial purposes, as long as you give attribution. If you
    want to re-use any of the content from this book and you have any worries about
    the license, contact O’Reilly at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码（以及书的在线版本）根据知识共享CC BY-NC-ND许可证许可，这意味着您可以自由复制和与任何人分享，只要您进行归因，且用于非商业目的。如果您想重复使用本书中的任何内容，并且对许可证有任何疑虑，请联系O'Reilly，邮箱为[*permissions@oreilly.com*](mailto:permissions@oreilly.com)。
- en: The print edition is licensed differently; please see the copyright page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 印刷版的许可证不同，请参阅版权页。
- en: Conventions Used in This Book
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用以下排版约定：
- en: '*Italic*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 指示新术语、URL、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`等宽`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及在段萂中用于引用程序元素，如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**`等宽粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应该按字面输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*`等宽斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应该由用户提供的值或由上下文确定的值替换的文本。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般说明。
- en: Warning
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意。
- en: O’Reilly Online Learning
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O'Reilly在线学习
- en: Note
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 40多年来，[*O'Reilly Media*](http://oreilly.com)已经提供技术和商业培训、知识和见解，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章、会议和我们的在线学习平台分享他们的知识和专长。O'Reilly的在线学习平台为您提供按需访问实时培训课程、深入学习路径、交互式编码环境以及来自O'Reilly和其他200多家出版商的大量文本和视频。有关更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact O’Reilly
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系O'Reilly
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送给出版商：
- en: O’Reilly Media, Inc.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O'Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastopol, CA 95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（在美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/architecture-patterns-python*](https://oreil.ly/architecture-patterns-python).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这本书建立了一个网页，列出勘误、示例和任何额外信息。您可以在[*https://oreil.ly/architecture-patterns-python*](https://oreil.ly/architecture-patterns-python)上访问这个页面。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 给[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)发邮件，评论或提出关于这本书的技术问题。
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有关我们的图书、课程、会议和新闻的更多信息，请访问我们的网站[*http://www.oreilly.com*](http://www.oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: 'To our tech reviewers, David Seddon, Ed Jung, and Hynek Schlawack: we absolutely
    do not deserve you. You are all incredibly dedicated, conscientious, and rigorous.
    Each one of you is immensely smart, and your different points of view were both
    useful and complementary to each other. Thank you from the bottom of our hearts.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的技术审阅者David Seddon，Ed Jung和Hynek Schlawack：我们绝对配不上你们。你们都非常专注、尽责和严谨。你们每个人都非常聪明，你们不同的观点对彼此都非常有用和互补。我们由衷地感谢你们。
- en: 'Gigantic thanks also to our Early Release readers for their comments and suggestions:
    Ian Cooper, Abdullah Ariff, Jonathan Meier, Gil Gonçalves, Matthieu Choplin, Ben
    Judson, James Gregory, Łukasz Lechowicz, Clinton Roy, Vitorino Araújo, Susan Goodbody,
    Josh Harwood, Daniel Butler, Liu Haibin, Jimmy Davies, Ignacio Vergara Kausel,
    Gaia Canestrani, Renne Rocha, pedroabi, Ashia Zawaduk, Jostein Leira, Brandon
    Rhodes, and many more; our apologies if we missed you on this list.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 还要特别感谢我们的早期读者，感谢他们的评论和建议：Ian Cooper，Abdullah Ariff，Jonathan Meier，Gil Gonçalves，Matthieu
    Choplin，Ben Judson，James Gregory，Łukasz Lechowicz，Clinton Roy，Vitorino Araújo，Susan
    Goodbody，Josh Harwood，Daniel Butler，Liu Haibin，Jimmy Davies，Ignacio Vergara Kausel，Gaia
    Canestrani，Renne Rocha，pedroabi，Ashia Zawaduk，Jostein Leira，Brandon Rhodes等等；如果我们在这个名单上漏掉了你，我们向你道歉。
- en: Super-mega-thanks to our editor Corbin Collins for his gentle chivvying, and
    for being a tireless advocate of the reader. Similarly-superlative thanks to the
    production staff, Katherine Tozer, Sharon Wilkey, Ellen Troutman-Zaig, and Rebecca
    Demarest, for your dedication, professionalism, and attention to detail. This
    book is immeasurably improved thanks to you.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢我们的编辑Corbin Collins，他的温和督促和对读者的不懈支持。同样特别感谢制作人员Katherine Tozer，Sharon Wilkey，Ellen
    Troutman-Zaig和Rebecca Demarest，感谢你们的专业精神和对细节的关注。这本书因为有了你们而得到了极大的改善。
- en: Any errors remaining in the book are our own, naturally.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 书中仍然存在的任何错误都是我们自己的。
- en: ^([1](preface01.xhtml#idm45714914017832-marker)) `python -c "import this"`
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](preface01.xhtml#idm45714914017832-marker)) `python -c "import this"`

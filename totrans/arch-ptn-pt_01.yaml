- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Why Do Our Designs Go Wrong?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们的设计会出错？
- en: What comes to mind when you hear the word *chaos?* Perhaps you think of a noisy
    stock exchange, or your kitchen in the morning—everything confused and jumbled.
    When you think of the word *order*, perhaps you think of an empty room, serene
    and calm. For scientists, though, chaos is characterized by homogeneity (sameness),
    and order by complexity (difference).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当你听到*混乱*这个词时，你会想到什么？也许你会想到喧闹的股票交易所，或者早上的厨房——一切都混乱不堪。当你想到*秩序*这个词时，也许你会想到一个空旷的房间，宁静而平静。然而，对于科学家来说，混乱的特征是同质性（相同），而秩序的特征是复杂性（不同）。
- en: For example, a well-tended garden is a highly ordered system. Gardeners define
    boundaries with paths and fences, and they mark out flower beds or vegetable patches.
    Over time, the garden evolves, growing richer and thicker; but without deliberate
    effort, the garden will run wild. Weeds and grasses will choke out other plants,
    covering over the paths, until eventually every part looks the same again—wild
    and unmanaged.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个精心照料的花园是一个高度有序的系统。园丁用小路和篱笆定义边界，并标出花坛或菜园。随着时间的推移，花园会不断发展，变得更加丰富和茂密；但如果没有刻意的努力，花园就会变得狂野。杂草和草会扼杀其他植物，覆盖小路，最终每个部分看起来都一样——野生和无管理。
- en: 'Software systems, too, tend toward chaos. When we first start building a new
    system, we have grand ideas that our code will be clean and well ordered, but
    over time we find that it gathers cruft and edge cases and ends up a confusing
    morass of manager classes and util modules. We find that our sensibly layered
    architecture has collapsed into itself like an oversoggy trifle. Chaotic software
    systems are characterized by a sameness of function: API handlers that have domain
    knowledge and send email and perform logging; “business logic” classes that perform
    no calculations but do perform I/O; and everything coupled to everything else
    so that changing any part of the system becomes fraught with danger. This is so
    common that software engineers have their own term for chaos: the Big Ball of
    Mud anti-pattern ([Figure P-1](#bbom_image)).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 软件系统也倾向于混乱。当我们开始构建一个新系统时，我们有很大的想法，认为我们的代码会整洁有序，但随着时间的推移，我们发现它积累了垃圾和边缘情况，最终变成了令人困惑的混乱的经理类和工具模块。我们发现我们明智地分层的架构已经像过于湿润的杂果布丁一样崩溃了。混乱的软件系统的特征是功能的相同性：具有领域知识并发送电子邮件和执行日志记录的API处理程序；“业务逻辑”类不进行计算但执行I/O；以及一切与一切耦合，以至于改变系统的任何部分都充满了危险。这是如此普遍，以至于软件工程师有自己的术语来描述混乱：大泥球反模式（[图P-1](#bbom_image)）。
- en: '![apwp 0001](Images/apwp_0001.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0001](Images/apwp_0001.png)'
- en: 'Figure P-1\. A real-life dependency diagram (source: [“Enterprise Dependency:
    Big Ball of Yarn”](https://oreil.ly/dbGTW) by Alex Papadimoulis)'
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图P-1\. 真实的依赖关系图（来源：[“企业依赖：大毛线球”](https://oreil.ly/dbGTW) by Alex Papadimoulis）
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: A big ball of mud is the natural state of software in the same way that wilderness
    is the natural state of your garden. It takes energy and direction to prevent
    the collapse.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的自然状态就像你的花园的自然状态一样，都是一团大泥巴。阻止崩溃需要能量和方向。
- en: Fortunately, the techniques to avoid creating a big ball of mud aren’t complex.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，避免创建一团大泥巴的技术并不复杂。
- en: Encapsulation and Abstractions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装和抽象
- en: Encapsulation and abstraction are tools that we all instinctively reach for
    as programmers, even if we don’t all use these exact words. Allow us to dwell
    on them for a moment, since they are a recurring background theme of the book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 封装和抽象是我们作为程序员本能地使用的工具，即使我们并不都使用这些确切的词语。让我们稍微停留一下，因为它们是本书中不断出现的背景主题。
- en: 'The term *encapsulation* covers two closely related ideas: simplifying behavior
    and hiding data. In this discussion, we’re using the first sense. We encapsulate
    behavior by identifying a task that needs to be done in our code and giving that
    task to a well-defined object or function. We call that object or function an
    *abstraction*.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*封装*涵盖了两个密切相关的概念：简化行为和隐藏数据。在这个讨论中，我们使用的是第一个意义。我们通过识别代码中需要完成的任务，并将该任务交给一个明确定义的对象或函数来封装行为。我们称该对象或函数为*抽象*。
- en: 'Take a look at the following two snippets of Python code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下两个Python代码片段：
- en: '*Do a search with urllib*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用urllib进行搜索*'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Do a search with requests*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用requests进行搜索*'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Both code listings do the same thing: they submit form-encoded values to a
    URL in order to use a search engine API. But the second is simpler to read and
    understand because it operates at a higher level of abstraction.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个代码清单都做同样的事情：它们提交表单编码的值到一个URL，以便使用搜索引擎API。但第二个更容易阅读和理解，因为它在更高的抽象级别上操作。
- en: 'We can take this one step further still by identifying and naming the task
    we want the code to perform for us and using an even higher-level abstraction
    to make it explicit:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步迈出这一步，通过识别和命名我们希望代码为我们执行的任务，并使用更高级别的抽象来明确地执行它：
- en: '*Do a search with the duckduckgo module*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用duckduckgo模块进行搜索*'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Encapsulating behavior by using abstractions is a powerful tool for making code
    more expressive, more testable, and easier to maintain.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用抽象来封装行为是使代码更具表现力、更易于测试和更易于维护的强大工具。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the literature of the object-oriented (OO) world, one of the classic characterizations
    of this approach is called [*responsibility-driven design*](http://www.wirfs-brock.com/Design.html);
    it uses the words *roles* and *responsibilities* rather than *tasks*. The main
    point is to think about code in terms of behavior, rather than in terms of data
    or algorithms.^([1](preface02.xhtml#idm45714913750712))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象（OO）世界的文献中，这种方法的经典特征之一被称为[*责任驱动设计*](http://www.wirfs-brock.com/Design.html)；它使用*角色*和*责任*这些词，而不是*任务*。主要观点是以行为的方式思考代码，而不是以数据或算法的方式。^([1](preface02.xhtml#idm45714913750712))
- en: Most of the patterns in this book involve choosing an abstraction, so you’ll
    see plenty of examples in each chapter. In addition, [Chapter 3](ch03.xhtml#chapter_03_abstractions)
    specifically discusses some general heuristics for choosing abstractions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数模式都涉及选择抽象，因此您将在每一章中看到很多例子。此外，[第3章](ch03.xhtml#chapter_03_abstractions)专门讨论了选择抽象的一些一般启发法。
- en: Layering
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层
- en: Encapsulation and abstraction help us by hiding details and protecting the consistency
    of our data, but we also need to pay attention to the interactions between our
    objects and functions. When one function, module, or object uses another, we say
    that the one *depends on* the other. These dependencies form a kind of network
    or graph.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 封装和抽象通过隐藏细节和保护数据的一致性来帮助我们，但我们还需要注意对象和函数之间的交互。当一个函数、模块或对象使用另一个时，我们说一个*依赖于*另一个。这些依赖形成一种网络或图。
- en: In a big ball of mud, the dependencies are out of control (as you saw in [Figure P-1](#bbom_image)).
    Changing one node of the graph becomes difficult because it has the potential
    to affect many other parts of the system. Layered architectures are one way of
    tackling this problem. In a layered architecture, we divide our code into discrete
    categories or roles, and we introduce rules about which categories of code can
    call each other.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个巨大的泥球中，依赖关系失控（正如您在[图P-1](#bbom_image)中看到的）。改变图的一个节点变得困难，因为它有可能影响系统的许多其他部分。分层架构是解决这个问题的一种方式。在分层架构中，我们将代码分成离散的类别或角色，并引入关于哪些代码类别可以相互调用的规则。
- en: One of the most common examples is the *three-layered architecture* shown in
    [Figure P-2](#layered_architecture1).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的例子之一是[图P-2](#layered_architecture1)中显示的*三层架构*。
- en: '![apwp 0002](Images/apwp_0002.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0002](Images/apwp_0002.png)'
- en: Figure P-2\. Layered architecture
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图P-2。分层架构
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Layered architecture is perhaps the most common pattern for building business
    software. In this model we have user-interface components, which could be a web
    page, an API, or a command line; these user-interface components communicate with
    a business logic layer that contains our business rules and our workflows; and
    finally, we have a database layer that’s responsible for storing and retrieving
    data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 分层架构可能是构建业务软件最常见的模式。在这个模型中，我们有用户界面组件，可以是网页、API或命令行；这些用户界面组件与包含我们的业务规则和工作流程的业务逻辑层进行通信；最后，我们有一个负责存储和检索数据的数据库层。
- en: For the rest of this book, we’re going to be systematically turning this model
    inside out by obeying one simple principle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将通过遵循一个简单的原则系统地将这个模型颠倒过来。
- en: The Dependency Inversion Principle
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖反转原则
- en: You might be familiar with the *dependency inversion principle* (DIP) already,
    because it’s the *D* in SOLID.^([2](preface02.xhtml#idm45714913731960))
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经熟悉*依赖反转原则*（DIP），因为它是SOLID中的*D*。^([2](preface02.xhtml#idm45714913731960))
- en: Unfortunately, we can’t illustrate the DIP by using three tiny code listings
    as we did for encapsulation. However, the whole of [Part I](part01.xhtml#part1)
    is essentially a worked example of implementing the DIP throughout an application,
    so you’ll get your fill of concrete examples.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们无法像我们为封装所做的那样使用三个小的代码清单来说明DIP。然而，[第I部分](part01.xhtml#part1)的整个内容本质上是一个在整个应用程序中实现DIP的示例，因此您将得到大量具体的例子。
- en: 'In the meantime, we can talk about DIP’s formal definition:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们可以谈谈DIP的正式定义：
- en: High-level modules should not depend on low-level modules. Both should depend
    on abstractions.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高级模块不应该依赖于低级模块。两者都应该依赖于抽象。
- en: Abstractions should not depend on details. Instead, details should depend on
    abstractions.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽象不应该依赖于细节。相反，细节应该依赖于抽象。
- en: But what does this mean? Let’s take it bit by bit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但这意味着什么呢？让我们一点一点来看。
- en: '*High-level modules* are the code that your organization really cares about.
    Perhaps you work for a pharmaceutical company, and your high-level modules deal
    with patients and trials. Perhaps you work for a bank, and your high-level modules
    manage trades and exchanges. The high-level modules of a software system are the
    functions, classes, and packages that deal with our real-world concepts.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*高级模块*是您的组织真正关心的代码。也许您在制药公司工作，您的高级模块处理患者和试验。也许您在银行工作，您的高级模块管理交易和交易所。软件系统的高级模块是处理我们真实世界概念的函数、类和包。'
- en: By contrast, *low-level modules* are the code that your organization doesn’t
    care about. It’s unlikely that your HR department gets excited about filesystems
    or network sockets. It’s not often that you discuss SMTP, HTTP, or AMQP with your
    finance team. For our nontechnical stakeholders, these low-level concepts aren’t
    interesting or relevant. All they care about is whether the high-level concepts
    work correctly. If payroll runs on time, your business is unlikely to care whether
    that’s a cron job or a transient function running on Kubernetes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，*低级模块*是您的组织不关心的代码。您的人力资源部门不太可能对文件系统或网络套接字感到兴奋。您不经常与财务团队讨论SMTP、HTTP或AMQP。对于我们的非技术利益相关者来说，这些低级概念并不有趣或相关。他们关心的只是高级概念是否正常工作。如果工资按时发放，您的业务不太可能关心这是一个cron作业还是在Kubernetes上运行的临时函数。
- en: '*Depends on* doesn’t mean *imports* or *calls*, necessarily, but rather a more
    general idea that one module *knows about* or *needs* another module.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*依赖于*并不一定意味着*导入*或*调用*，而是一个更一般的想法，即一个模块*知道*或*需要*另一个模块。'
- en: 'And we’ve mentioned *abstractions* already: they’re simplified interfaces that
    encapsulate behavior, in the way that our duckduckgo module encapsulated a search
    engine’s API.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到了*抽象*：它们是简化的接口，封装了行为，就像我们的duckduckgo模块封装了搜索引擎的API一样。
- en: All problems in computer science can be solved by adding another level of indirection.
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机科学中的所有问题都可以通过增加另一个间接层来解决。
- en: '>'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: David Wheeler
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大卫·惠勒
- en: So the first part of the DIP says that our business code shouldn’t depend on
    technical details; instead, both should use abstractions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，DIP的第一部分表示我们的业务代码不应该依赖于技术细节；相反，两者都应该使用抽象。
- en: 'Why? Broadly, because we want to be able to change them independently of each
    other. High-level modules should be easy to change in response to business needs.
    Low-level modules (details) are often, in practice, harder to change: think about
    refactoring to change a function name versus defining, testing, and deploying
    a database migration to change a column name. We don’t want business logic changes
    to slow down because they are closely coupled to low-level infrastructure details.
    But, similarly, it is important to *be able* to change your infrastructure details
    when you need to (think about sharding a database, for example), without needing
    to make changes to your business layer. Adding an abstraction between them (the
    famous extra layer of indirection) allows the two to change (more) independently
    of each other.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？大体上，因为我们希望能够独立地对它们进行更改。高级模块应该易于根据业务需求进行更改。低级模块（细节）在实践中通常更难更改：想想重构以更改函数名称与定义、测试和部署数据库迁移以更改列名称之间的区别。我们不希望业务逻辑的更改因为与低级基础设施细节紧密耦合而变慢。但同样地，当需要时，重要的是*能够*更改基础设施细节（例如考虑分片数据库），而不需要对业务层进行更改。在它们之间添加一个抽象（著名的额外间接层）允许它们更独立地进行更改。
- en: The second part is even more mysterious. “Abstractions should not depend on
    details” seems clear enough, but “Details should depend on abstractions” is hard
    to imagine. How can we have an abstraction that doesn’t depend on the details
    it’s abstracting? By the time we get to [Chapter 4](ch04.xhtml#chapter_04_service_layer),
    we’ll have a concrete example that should make this all a bit clearer.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分更加神秘。“抽象不应该依赖于细节”似乎很清楚，但“细节应该依赖于抽象”很难想象。我们怎么可能有一个不依赖于它所抽象的细节的抽象呢？到了[第四章](ch04.xhtml#chapter_04_service_layer)，我们将有一个具体的例子，这应该会让这一切更加清晰一些。
- en: 'A Place for All Our Business Logic: The Domain Model'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们所有业务逻辑的归宿：领域模型
- en: 'But before we can turn our three-layered architecture inside out, we need to
    talk more about that middle layer: the high-level modules or business logic. One
    of the most common reasons that our designs go wrong is that business logic becomes
    spread throughout the layers of our application, making it hard to identify, understand,
    and change.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们能够将我们的三层架构颠倒过来之前，我们需要更多地讨论中间层：高级模块或业务逻辑。我们设计出错的最常见原因之一是业务逻辑分散在应用程序的各个层中，使得很难识别、理解和更改。
- en: '[Chapter 1](ch01.xhtml#chapter_01_domain_model) shows how to build a business
    layer with a *Domain Model* pattern. The rest of the patterns in [Part I](part01.xhtml#part1)
    show how we can keep the domain model easy to change and free of low-level concerns
    by choosing the right abstractions and continuously applying the DIP.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](ch01.xhtml#chapter_01_domain_model)展示了如何使用*领域模型*模式构建业务层。[第一部分](part01.xhtml#part1)中的其余模式展示了我们如何通过选择正确的抽象并持续应用DIP来保持领域模型易于更改并且不受低级关注的影响。'
- en: '^([1](preface02.xhtml#idm45714913750712-marker)) If you’ve come across class-responsibility-collaborator
    (CRC) cards, they’re driving at the same thing: thinking about *responsibilities*
    helps you decide how to split things up.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](preface02.xhtml#idm45714913750712-marker)) 如果你遇到过类-责任-协作（CRC）卡，它们指的是同样的事情：思考*责任*可以帮助你决定如何分割事物。
- en: '^([2](preface02.xhtml#idm45714913731960-marker)) SOLID is an acronym for Robert
    C. Martin’s five principles of object-oriented design: single responsibility,
    open for extension but closed for modification, Liskov substitution, interface
    segregation, and dependency inversion. See [“S.O.L.I.D: The First 5 Principles
    of Object-Oriented Design”](https://oreil.ly/UFM7U) by Samuel Oloruntoba.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '^([2](preface02.xhtml#idm45714913731960-marker)) SOLID是Robert C. Martin关于面向对象设计的五个原则的首字母缩写：单一职责、开放封闭、里氏替换、接口隔离和依赖反转。参见Samuel
    Oloruntoba的文章[“S.O.L.I.D: The First 5 Principles of Object-Oriented Design”](https://oreil.ly/UFM7U)。'

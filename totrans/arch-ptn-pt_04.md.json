["```py\ngit clone https://github.com/cosmicpython/code.git\ncd code\ngit checkout chapter_02_repository\n# or to code along, checkout the previous chapter:\ngit checkout chapter_01_domain_model\n```", "```py\n@flask.route.gubbins\ndef allocate_endpoint():\n    # extract order line from request\n    line = OrderLine(request.params, ...)\n    # load all batches from the DB\n    batches = ...\n    # call our domain service\n    allocate(line, batches)\n    # then save the allocation back to the database somehow\n    return 201\n```", "```py\n[ditaa, apwp_0203]\n+------------------------+\n|   Presentation Layer   |\n+------------------------+\n           |\n           V\n+--------------------------------------------------+\n|                  Domain Model                    |\n+--------------------------------------------------+\n                                        ^\n                                        |\n                             +---------------------+\n                             |    Database Layer   |\n                             +---------------------+\n```", "```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\nclass Order(Base):\n    id = Column(Integer, primary_key=True)\n\nclass OrderLine(Base):\n    id = Column(Integer, primary_key=True)\n    sku = Column(String(250))\n    qty = Integer(String(250))\n    order_id = Column(Integer, ForeignKey('order.id'))\n    order = relationship(Order)\n\nclass Allocation(Base):\n    ...\n```", "```py\nfromsqlalchemy.ormimportmapper,relationshipimportmodel![1](Images/1.png)metadata=MetaData()order_lines=Table(![2](Images/2.png)'order_lines',metadata,Column('id',Integer,primary_key=True,autoincrement=True),Column('sku',String(255)),Column('qty',Integer,nullable=False),Column('orderid',String(255)),)...defstart_mappers():lines_mapper=mapper(model.OrderLine,order_lines)![3](Images/3.png)\n```", "```py\ndeftest_orderline_mapper_can_load_lines(session):![1](Images/1.png)session.execute('INSERT INTO order_lines (orderid, sku, qty) VALUES ''(\"order1\", \"RED-CHAIR\", 12),''(\"order1\", \"RED-TABLE\", 13),''(\"order2\", \"BLUE-LIPSTICK\", 14)')expected=[model.OrderLine(\"order1\",\"RED-CHAIR\",12),model.OrderLine(\"order1\",\"RED-TABLE\",13),model.OrderLine(\"order2\",\"BLUE-LIPSTICK\",14),]assertsession.query(model.OrderLine).all()==expecteddeftest_orderline_mapper_can_save_lines(session):new_line=model.OrderLine(\"order1\",\"DECORATIVE-WIDGET\",12)session.add(new_line)session.commit()rows=list(session.execute('SELECT orderid, sku, qty FROM \"order_lines\"'))assertrows==[(\"order1\",\"DECORATIVE-WIDGET\",12)]\n```", "```py\n@flask.route.gubbins\ndef allocate_endpoint():\n    session = start_session()\n\n    # extract order line from request\n    line = OrderLine(\n        request.json['orderid'],\n        request.json['sku'],\n        request.json['qty'],\n    )\n\n    # load all batches from the DB\n    batches = session.query(Batch).all()\n\n    # call our domain service\n    allocate(line, batches)\n\n    # save the allocation back to the database\n    session.commit()\n\n    return 201\n```", "```py\nimport all_my_data\n\ndef create_a_batch():\n    batch = Batch(...)\n    all_my_data.batches.add(batch)\n\ndef modify_a_batch(batch_id, new_quantity):\n    batch = all_my_data.batches.get(batch_id)\n    batch.change_initial_quantity(new_quantity)\n```", "```py\nclassAbstractRepository(abc.ABC):@abc.abstractmethod![1](Images/1.png)defadd(self,batch:model.Batch):raiseNotImplementedError![2](Images/2.png)@abc.abstractmethoddefget(self,reference)->model.Batch:raiseNotImplementedError\n```", "```py\n[ditaa, apwp_0205]\n  +-----------------------------+\n  |      Application Layer      |\n  +-----------------------------+\n                 |^\n                 ||          /------------------\\\n                 ||----------|   Domain Model   |\n                 ||          |      Objects     |\n                 ||          \\------------------/\n                 V|\n  +------------------------------+\n  |          Repository          |\n  +------------------------------+\n                 |\n                 V\n  +------------------------------+\n  |        Database Layer        |\n  +------------------------------+\n```", "```py\ndeftest_repository_can_save_a_batch(session):batch=model.Batch(\"batch1\",\"RUSTY-SOAPDISH\",100,eta=None)repo=repository.SqlAlchemyRepository(session)repo.add(batch)![1](Images/1.png)session.commit()![2](Images/2.png)rows=list(session.execute('SELECT reference, sku, _purchased_quantity, eta FROM \"batches\"'![3](Images/3.png)))assertrows==[(\"batch1\",\"RUSTY-SOAPDISH\",100,None)]\n```", "```py\ndefinsert_order_line(session):session.execute(![1](Images/1.png)'INSERT INTO order_lines (orderid, sku, qty)'' VALUES (\"order1\", \"GENERIC-SOFA\", 12)')[[orderline_id]]=session.execute('SELECT id FROM order_lines WHERE orderid=:orderid AND sku=:sku',dict(orderid=\"order1\",sku=\"GENERIC-SOFA\"))returnorderline_iddefinsert_batch(session,batch_id):![2](Images/2.png)...deftest_repository_can_retrieve_a_batch_with_allocations(session):orderline_id=insert_order_line(session)batch1_id=insert_batch(session,\"batch1\")insert_batch(session,\"batch2\")insert_allocation(session,orderline_id,batch1_id)![3](Images/3.png)repo=repository.SqlAlchemyRepository(session)retrieved=repo.get(\"batch1\")expected=model.Batch(\"batch1\",\"GENERIC-SOFA\",100,eta=None)assertretrieved==expected# Batch.__eq__ only compares reference ![3](Images/3.png)assertretrieved.sku==expected.sku![4](Images/4.png)assertretrieved._purchased_quantity==expected._purchased_quantityassertretrieved._allocations=={![4](Images/4.png)model.OrderLine(\"order1\",\"GENERIC-SOFA\",12),}\n```", "```py\nclass SqlAlchemyRepository(AbstractRepository):\n\n    def __init__(self, session):\n        self.session = session\n\n    def add(self, batch):\n        self.session.add(batch)\n\n    def get(self, reference):\n        return self.session.query(model.Batch).filter_by(reference=reference).one()\n\n    def list(self):\n        return self.session.query(model.Batch).all()\n```", "```py\n@flask.route.gubbins\ndef allocate_endpoint():\n    batches = SqlAlchemyRepository.list()\n    lines = [\n        OrderLine(l['orderid'], l['sku'], l['qty'])\n         for l in request.params...\n    ]\n    allocate(lines, batches)\n    session.commit()\n    return 201\n```", "```py\nclass FakeRepository(AbstractRepository):\n\n    def __init__(self, batches):\n        self._batches = set(batches)\n\n    def add(self, batch):\n        self._batches.add(batch)\n\n    def get(self, reference):\n        return next(b for b in self._batches if b.reference == reference)\n\n    def list(self):\n        return list(self._batches)\n```", "```py\nfake_repo = FakeRepository([batch1, batch2, batch3])\n```", "```py\n[ditaa, apwp_0206]\n\nCost of Changes\n\n     ^                         /\n     |      ActiveRecord/ORM |\n     |                         |                             ----/\n     |                        /                         ----/\n     |                        |                    ----/\n     |                       /                ----/\n     |                       |           ----/  Domain model w/ Repository pattern\n     |                      /       ----/\n     |                      |  ----/\n     |                    ----/\n     |               ----/ /\n     |          ----/     /\n     |     ----/        -/\n     |----/          --/\n     |           ---/\n     |       ----/\n     |------/\n     |\n     +--------------------------------------------------------------->\n                      Complexity of business domain/logic\n```"]
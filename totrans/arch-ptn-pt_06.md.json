["```py\ngit clone https://github.com/cosmicpython/code.git\ncd code\ngit checkout chapter_04_service_layer\n# or to code along, checkout Chapter 2:\ngit checkout chapter_02_repository\n```", "```py\n@pytest.mark.usefixtures('restart_api')deftest_api_returns_allocation(add_stock):sku,othersku=random_sku(),random_sku('other')![1](Images/1.png)earlybatch=random_batchref(1)laterbatch=random_batchref(2)otherbatch=random_batchref(3)add_stock([![2](Images/2.png)(laterbatch,sku,100,'2011-01-02'),(earlybatch,sku,100,'2011-01-01'),(otherbatch,othersku,100,None),])data={'orderid':random_orderid(),'sku':sku,'qty':3}url=config.get_api_url()![3](Images/3.png)r=requests.post(f'{url}/allocate',json=data)assertr.status_code==201assertr.json()['batchref']==earlybatch\n```", "```py\nfrom flask import Flask, jsonify, request\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nimport config\nimport model\nimport orm\nimport repository\n\norm.start_mappers()\nget_session = sessionmaker(bind=create_engine(config.get_postgres_uri()))\napp = Flask(__name__)\n\n@app.route(\"/allocate\", methods=['POST'])\ndef allocate_endpoint():\n    session = get_session()\n    batches = repository.SqlAlchemyRepository(session).list()\n    line = model.OrderLine(\n        request.json['orderid'],\n        request.json['sku'],\n        request.json['qty'],\n    )\n\n    batchref = model.allocate(line, batches)\n\n    return jsonify({'batchref': batchref}), 201\n```", "```py\n@pytest.mark.usefixtures('restart_api')\ndef test_allocations_are_persisted(add_stock):\n    sku = random_sku()\n    batch1, batch2 = random_batchref(1), random_batchref(2)\n    order1, order2 = random_orderid(1), random_orderid(2)\n    add_stock([\n        (batch1, sku, 10, '2011-01-01'),\n        (batch2, sku, 10, '2011-01-02'),\n    ])\n    line1 = {'orderid': order1, 'sku': sku, 'qty': 10}\n    line2 = {'orderid': order2, 'sku': sku, 'qty': 10}\n    url = config.get_api_url()\n\n    # first order uses up all stock in batch 1\n    r = requests.post(f'{url}/allocate', json=line1)\n    assert r.status_code == 201\n    assert r.json()['batchref'] == batch1\n\n    # second order should go to batch 2\n    r = requests.post(f'{url}/allocate', json=line2)\n    assert r.status_code == 201\n    assert r.json()['batchref'] == batch2\n```", "```py\n@pytest.mark.usefixtures('restart_api')deftest_400_message_for_out_of_stock(add_stock):![1](Images/1.png)sku,smalL_batch,large_order=random_sku(),random_batchref(),random_orderid()add_stock([(smalL_batch,sku,10,'2011-01-01'),])data={'orderid':large_order,'sku':sku,'qty':20}url=config.get_api_url()r=requests.post(f'{url}/allocate',json=data)assertr.status_code==400assertr.json()['message']==f'Out of stock for sku {sku}'@pytest.mark.usefixtures('restart_api')deftest_400_message_for_invalid_sku():![2](Images/2.png)unknown_sku,orderid=random_sku(),random_orderid()data={'orderid':orderid,'sku':unknown_sku,'qty':20}url=config.get_api_url()r=requests.post(f'{url}/allocate',json=data)assertr.status_code==400assertr.json()['message']==f'Invalid sku {unknown_sku}'\n```", "```py\ndef is_valid_sku(sku, batches):\n    return sku in {b.sku for b in batches}\n\n@app.route(\"/allocate\", methods=['POST'])\ndef allocate_endpoint():\n    session = get_session()\n    batches = repository.SqlAlchemyRepository(session).list()\n    line = model.OrderLine(\n        request.json['orderid'],\n        request.json['sku'],\n        request.json['qty'],\n    )\n\n    if not is_valid_sku(line.sku, batches):\n        return jsonify({'message': f'Invalid sku {line.sku}'}), 400\n\n    try:\n        batchref = model.allocate(line, batches)\n    except model.OutOfStock as e:\n        return jsonify({'message': str(e)}), 400\n\n    session.commit()\n    return jsonify({'batchref': batchref}), 201\n```", "```py\nclass FakeRepository(repository.AbstractRepository):\n\n    def __init__(self, batches):\n        self._batches = set(batches)\n\n    def add(self, batch):\n        self._batches.add(batch)\n\n    def get(self, reference):\n        return next(b for b in self._batches if b.reference == reference)\n\n    def list(self):\n        return list(self._batches)\n```", "```py\ndeftest_returns_allocation():line=model.OrderLine(\"o1\",\"COMPLICATED-LAMP\",10)batch=model.Batch(\"b1\",\"COMPLICATED-LAMP\",100,eta=None)repo=FakeRepository([batch])![1](Images/1.png)result=services.allocate(line,repo,FakeSession())![2](Images/2.png)![3](Images/3.png)assertresult==\"b1\"deftest_error_for_invalid_sku():line=model.OrderLine(\"o1\",\"NONEXISTENTSKU\",10)batch=model.Batch(\"b1\",\"AREALSKU\",100,eta=None)repo=FakeRepository([batch])![1](Images/1.png)withpytest.raises(services.InvalidSku,match=\"Invalid sku NONEXISTENTSKU\"):services.allocate(line,repo,FakeSession())![2](Images/2.png)![3](Images/3.png)\n```", "```py\nclass FakeSession():\n    committed = False\n\n    def commit(self):\n        self.committed = True\n```", "```py\ndef test_commits():\n    line = model.OrderLine('o1', 'OMINOUS-MIRROR', 10)\n    batch = model.Batch('b1', 'OMINOUS-MIRROR', 100, eta=None)\n    repo = FakeRepository([batch])\n    session = FakeSession()\n\n    services.allocate(line, repo, session)\n    assert session.committed is True\n```", "```py\nclassInvalidSku(Exception):passdefis_valid_sku(sku,batches):returnskuin{b.skuforbinbatches}defallocate(line:OrderLine,repo:AbstractRepository,session)->str:batches=repo.list()![1](Images/1.png)ifnotis_valid_sku(line.sku,batches):![2](Images/2.png)raiseInvalidSku(f'Invalid sku {line.sku}')batchref=model.allocate(line,batches)![3](Images/3.png)session.commit()![4](Images/4.png)returnbatchref\n```", "```py\n@app.route(\"/allocate\",methods=['POST'])defallocate_endpoint():session=get_session()![1](Images/1.png)repo=repository.SqlAlchemyRepository(session)![1](Images/1.png)line=model.OrderLine(request.json['orderid'],![2](Images/2.png)request.json['sku'],![2](Images/2.png)request.json['qty'],![2](Images/2.png))try:batchref=services.allocate(line,repo,session)![2](Images/2.png)except(model.OutOfStock,services.InvalidSku)ase:returnjsonify({'message':str(e)}),400![3](Images/3.png)returnjsonify({'batchref':batchref}),201![3](Images/3.png)\n```", "```py\n@pytest.mark.usefixtures('restart_api')\ndef test_happy_path_returns_201_and_allocated_batch(add_stock):\n    sku, othersku = random_sku(), random_sku('other')\n    earlybatch = random_batchref(1)\n    laterbatch = random_batchref(2)\n    otherbatch = random_batchref(3)\n    add_stock([\n        (laterbatch, sku, 100, '2011-01-02'),\n        (earlybatch, sku, 100, '2011-01-01'),\n        (otherbatch, othersku, 100, None),\n    ])\n    data = {'orderid': random_orderid(), 'sku': sku, 'qty': 3}\n    url = config.get_api_url()\n    r = requests.post(f'{url}/allocate', json=data)\n    assert r.status_code == 201\n    assert r.json()['batchref'] == earlybatch\n\n@pytest.mark.usefixtures('restart_api')\ndef test_unhappy_path_returns_400_and_error_message():\n    unknown_sku, orderid = random_sku(), random_orderid()\n    data = {'orderid': orderid, 'sku': unknown_sku, 'qty': 20}\n    url = config.get_api_url()\n    r = requests.post(f'{url}/allocate', json=data)\n    assert r.status_code == 400\n    assert r.json()['message'] == f'Invalid sku {unknown_sku}'\n```", "```py\n.\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 domain ![1](Images/1.png) \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 model.py\n\u251c\u2500\u2500 service_layer ![2](Images/2.png) \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 services.py\n\u251c\u2500\u2500 adapters ![3](Images/3.png) \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 orm.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 repository.py\n\u251c\u2500\u2500 entrypoints ![4](Images/4.png) \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 flask_app.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 unit\n    \u2502   \u251c\u2500\u2500 test_allocate.py\n    \u2502   \u251c\u2500\u2500 test_batches.py\n    \u2502   \u2514\u2500\u2500 test_services.py\n    \u251c\u2500\u2500 integration\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test_orm.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_repository.py\n    \u2514\u2500\u2500 e2e\n     \u00a0\u00a0 \u2514\u2500\u2500 test_api.py\n```", "```py\n[ditaa, apwp_0403]\n        +-----------------------------+\n        |         Service Layer       |\n        +-----------------------------+\n           |                   |\n           |                   | depends on abstraction\n           V                   V\n+------------------+     +--------------------+\n|   Domain Model   |     | AbstractRepository |\n|                  |     |       (Port)       |\n+------------------+     +--------------------+\n```", "```py\n[ditaa, apwp_0404]\n        +-----------------------------+\n        |           Tests             |-------------\\\n        +-----------------------------+             |\n                       |                            |\n                       V                            |\n        +-----------------------------+             |\n        |         Service Layer       |    provides |\n        +-----------------------------+             |\n           |                     |                  |\n           V                     V                  |\n+------------------+     +--------------------+     |\n|   Domain Model   |     | AbstractRepository |     |\n+------------------+     +--------------------+     |\n                                    ^               |\n                         implements |               |\n                                    |               |\n                         +----------------------+   |\n                         |    FakeRepository    |<--/\n                         |      (in-memory)     |\n                         +----------------------+\n```", "```py\n[ditaa, apwp_0405]\n       +--------------------------------+\n       | Flask API (Presentation Layer) |-----------\\\n       +--------------------------------+           |\n                       |                            |\n                       V                            |\n        +-----------------------------+             |\n        |         Service Layer       |             |\n        +-----------------------------+             |\n           |                     |                  |\n           V                     V                  |\n+------------------+     +--------------------+     |\n|   Domain Model   |     | AbstractRepository |     |\n+------------------+     +--------------------+     |\n              ^                     ^               |\n              |                     |               |\n       gets   |          +----------------------+   |\n       model  |          | SqlAlchemyRepository |<--/\n   definitions|          +----------------------+\n       from   |                | uses\n              |                V\n           +-----------------------+\n           |          ORM          |\n           | (another abstraction) |\n           +-----------------------+\n                       |\n                       | talks to\n                       V\n           +------------------------+\n           |       Database         |\n           +------------------------+\n```"]
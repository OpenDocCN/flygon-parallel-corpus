- en: Chapter 5\. TDD in High Gear and Low Gear
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。高档和低档的TDD
- en: 'We’ve introduced the service layer to capture some of the additional orchestration
    responsibilities we need from a working application. The service layer helps us
    clearly define our use cases and the workflow for each: what we need to get from
    our repositories, what pre-checks and current state validation we should do, and
    what we save at the end.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了服务层来捕获我们从工作应用程序中需要的一些额外的编排责任。服务层帮助我们清晰地定义我们的用例以及每个用例的工作流程：我们需要从我们的存储库中获取什么，我们应该进行什么预检和当前状态验证，以及我们最终保存了什么。
- en: But currently, many of our unit tests operate at a lower level, acting directly
    on the model. In this chapter we’ll discuss the trade-offs involved in moving
    those tests up to the service-layer level, and some more general testing guidelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但目前，我们的许多单元测试是在更低的级别上操作，直接作用于模型。在本章中，我们将讨论将这些测试提升到服务层级别涉及的权衡以及一些更一般的测试准则。
- en: How Is Our Test Pyramid Looking?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的测试金字塔看起来怎么样？
- en: 'Let’s see what this move to using a service layer, with its own service-layer
    tests, does to our test pyramid:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看将这一举措转向使用服务层及其自己的服务层测试对我们的测试金字塔有何影响：
- en: '*Counting types of tests*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试类型计数*'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Not bad! We have 15 unit tests, 8 integration tests, and just 2 end-to-end tests.
    That’s already a healthy-looking test pyramid.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！我们有15个单元测试，8个集成测试，只有2个端到端测试。这已经是一个看起来很健康的测试金字塔了。
- en: Should Domain Layer Tests Move to the Service Layer?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领域层测试应该移动到服务层吗？
- en: 'Let’s see what happens if we take this a step further. Since we can test our
    software against the service layer, we don’t really need tests for the domain
    model anymore. Instead, we could rewrite all of the domain-level tests from [Chapter 1](ch01.xhtml#chapter_01_domain_model)
    in terms of the service layer:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们再进一步会发生什么。由于我们可以针对服务层测试我们的软件，我们实际上不再需要对领域模型进行测试。相反，我们可以将[第1章](ch01.xhtml#chapter_01_domain_model)中的所有领域级测试重写为服务层的术语：
- en: '*Rewriting a domain test at the service layer (tests/unit/test_services.py)*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*在服务层重写领域测试（tests/unit/test_services.py）*'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Why would we want to do that?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要这样做呢？
- en: Tests are supposed to help us change our system fearlessly, but often we see
    teams writing too many tests against their domain model. This causes problems
    when they come to change their codebase and find that they need to update tens
    or even hundreds of unit tests.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该帮助我们无畏地改变我们的系统，但通常我们看到团队对其领域模型编写了太多测试。当他们来改变他们的代码库时，这会导致问题，并发现他们需要更新数十甚至数百个单元测试。
- en: This makes sense if you stop to think about the purpose of automated tests.
    We use tests to enforce that a property of the system doesn’t change while we’re
    working. We use tests to check that the API continues to return 200, that the
    database session continues to commit, and that orders are still being allocated.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果停下来思考自动化测试的目的，这是有道理的。我们使用测试来强制系统的某个属性在我们工作时不会改变。我们使用测试来检查API是否继续返回200，数据库会话是否继续提交，以及订单是否仍在分配。
- en: If we accidentally change one of those behaviors, our tests will break. The
    flip side, though, is that if we want to change the design of our code, any tests
    relying directly on that code will also fail.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们意外更改了其中一个行为，我们的测试将会失败。另一方面，如果我们想要更改代码的设计，任何直接依赖于该代码的测试也将失败。
- en: As we get further into the book, you’ll see how the service layer forms an API
    for our system that we can drive in multiple ways. Testing against this API reduces
    the amount of code that we need to change when we refactor our domain model. If
    we restrict ourselves to testing only against the service layer, we won’t have
    any tests that directly interact with “private” methods or attributes on our model
    objects, which leaves us freer to refactor them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们深入了解本书，您将看到服务层如何形成我们系统的API，我们可以以多种方式驱动它。针对此API进行测试可以减少我们在重构领域模型时需要更改的代码量。如果我们限制自己只针对服务层进行测试，我们将没有任何直接与模型对象上的“私有”方法或属性交互的测试，这使我们更自由地对其进行重构。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Every line of code that we put in a test is like a blob of glue, holding the
    system in a particular shape. The more low-level tests we have, the harder it
    will be to change things.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在测试中放入的每一行代码都像是一团胶水，将系统保持在特定的形状中。我们拥有的低级别测试越多，改变事物就会越困难。
- en: On Deciding What Kind of Tests to Write
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于决定编写何种测试
- en: You might be asking yourself, “Should I rewrite all my unit tests, then? Is
    it wrong to write tests against the domain model?” To answer those questions,
    it’s important to understand the trade-off between coupling and design feedback
    (see [Figure 5-1](#test_spectrum_diagram)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问自己，“那我应该重写所有的单元测试吗？针对领域模型编写测试是错误的吗？” 要回答这些问题，重要的是要理解耦合和设计反馈之间的权衡（见[图5-1](#test_spectrum_diagram)）。
- en: '![apwp 0501](Images/apwp_0501.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0501](Images/apwp_0501.png)'
- en: Figure 5-1\. The test spectrum
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-1。测试谱
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Extreme programming (XP) exhorts us to “listen to the code.” When we’re writing
    tests, we might find that the code is hard to use or notice a code smell. This
    is a trigger for us to refactor, and to reconsider our design.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 极限编程（XP）敦促我们“倾听代码”。当我们编写测试时，我们可能会发现代码很难使用或注意到代码味道。这是我们进行重构并重新考虑设计的触发器。
- en: We only get that feedback, though, when we’re working closely with the target
    code. A test for the HTTP API tells us nothing about the fine-grained design of
    our objects, because it sits at a much higher level of abstraction.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，只有当我们与目标代码密切合作时才能获得这种反馈。针对HTTP API的测试对我们的对象的细粒度设计毫无帮助，因为它处于更高的抽象级别。
- en: On the other hand, we can rewrite our entire application and, so long as we
    don’t change the URLs or request formats, our HTTP tests will continue to pass.
    This gives us confidence that large-scale changes, like changing the database
    schema, haven’t broken our code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可以重写整个应用程序，只要我们不更改URL或请求格式，我们的HTTP测试就会继续通过。这使我们有信心进行大规模的更改，比如更改数据库架构，不会破坏我们的代码。
- en: At the other end of the spectrum, the tests we wrote in [Chapter 1](ch01.xhtml#chapter_01_domain_model)
    helped us to flesh out our understanding of the objects we need. The tests guided
    us to a design that makes sense and reads in the domain language. When our tests
    read in the domain language, we feel comfortable that our code matches our intuition
    about the problem we’re trying to solve.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一端，我们在[第1章](ch01.xhtml#chapter_01_domain_model)中编写的测试帮助我们充分了解我们需要的对象。测试引导我们设计出一个合理的、符合领域语言的设计。当我们的测试以领域语言阅读时，我们感到我们的代码与我们对问题解决的直觉相匹配。
- en: Because the tests are written in the domain language, they act as living documentation
    for our model. A new team member can read these tests to quickly understand how
    the system works and how the core concepts interrelate.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为测试是用领域语言编写的，它们充当我们模型的活文档。新团队成员可以阅读这些测试，快速了解系统的工作原理以及核心概念的相互关系。
- en: We often “sketch” new behaviors by writing tests at this level to see how the
    code might look. When we want to improve the design of the code, though, we will
    need to replace or delete these tests, because they are tightly coupled to a particular
    implementation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常通过在这个级别编写测试来“勾勒”新的行为，以查看代码可能的外观。然而，当我们想要改进代码的设计时，我们将需要替换或删除这些测试，因为它们与特定实现紧密耦合。
- en: High and Low Gear
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高档和低档
- en: Most of the time, when we are adding a new feature or fixing a bug, we don’t
    need to make extensive changes to the domain model. In these cases, we prefer
    to write tests against services because of the lower coupling and higher coverage.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，当我们添加新功能或修复错误时，我们不需要对领域模型进行广泛的更改。在这些情况下，我们更喜欢针对服务编写测试，因为耦合度较低，覆盖范围较高。
- en: For example, when writing an `add_stock` function or a `cancel_order` feature,
    we can work more quickly and with less coupling by writing tests against the service
    layer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当编写`add_stock`函数或`cancel_order`功能时，我们可以通过针对服务层编写测试来更快地进行工作，并减少耦合。
- en: When starting a new project or when hitting a particularly gnarly problem, we
    will drop back down to writing tests against the domain model so we get better
    feedback and executable documentation of our intent.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始一个新项目或遇到一个特别棘手的问题时，我们会回到对领域模型编写测试，这样我们就能更好地得到反馈和我们意图的可执行文档。
- en: The metaphor we use is that of shifting gears. When starting a journey, the
    bicycle needs to be in a low gear so that it can overcome inertia. Once we’re
    off and running, we can go faster and more efficiently by changing into a high
    gear; but if we suddenly encounter a steep hill or are forced to slow down by
    a hazard, we again drop down to a low gear until we can pick up speed again.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的比喻是换挡。在开始旅程时，自行车需要处于低档位，以克服惯性。一旦我们开始跑，我们可以通过换到高档位来更快、更有效地行驶；但如果我们突然遇到陡峭的山坡或被危险迫使减速，我们再次降到低档位，直到我们可以再次加速。
- en: Fully Decoupling the Service-Layer Tests from the Domain
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将服务层测试与领域完全解耦
- en: We still have direct dependencies on the domain in our service-layer tests,
    because we use domain objects to set up our test data and to invoke our service-layer
    functions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在服务层测试中仍然直接依赖于领域，因为我们使用领域对象来设置我们的测试数据并调用我们的服务层函数。
- en: To have a service layer that’s fully decoupled from the domain, we need to rewrite
    its API to work in terms of primitives.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使服务层与领域完全解耦，我们需要重写其API，以基本类型的形式工作。
- en: 'Our service layer currently takes an `OrderLine` domain object:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务层目前接受一个`OrderLine`领域对象：
- en: '*Before: allocate takes a domain object (service_layer/services.py)*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*之前：allocate接受一个领域对象（service_layer/services.py）*'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How would it look if its parameters were all primitive types?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它的参数都是基本类型，它会是什么样子？
- en: '*After: allocate takes strings and ints (service_layer/services.py)*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*之后：allocate接受字符串和整数（service_layer/services.py）*'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We rewrite the tests in those terms as well:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也用这些术语重写了测试：
- en: '*Tests now use primitives in function call (tests/unit/test_services.py)*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试现在在函数调用中使用基本类型（tests/unit/test_services.py）*'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But our tests still depend on the domain, because we still manually instantiate
    `Batch` objects. So, if one day we decide to massively refactor how our `Batch`
    model works, we’ll have to change a bunch of tests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们的测试仍然依赖于领域，因为我们仍然手动实例化`Batch`对象。因此，如果有一天我们决定大规模重构我们的`Batch`模型的工作方式，我们将不得不更改一堆测试。
- en: 'Mitigation: Keep All Domain Dependencies in Fixture Functions'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓解：将所有领域依赖项保留在固定装置函数中
- en: 'We could at least abstract that out to a helper function or a fixture in our
    tests. Here’s one way you could do that, adding a factory function on `FakeRepository`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们至少可以将其抽象为测试中的一个辅助函数或固定装置。以下是一种你可以做到这一点的方式，即在`FakeRepository`上添加一个工厂函数：
- en: '*Factory functions for fixtures are one possibility (tests/unit/test_services.py)*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 固定装置的工厂函数是一种可能性（tests/unit/test_services.py）
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At least that would move all of our tests’ dependencies on the domain into one
    place.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 至少这将把我们所有测试对领域的依赖放在一个地方。
- en: Adding a Missing Service
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个缺失的服务
- en: 'We could go one step further, though. If we had a service to add stock, we
    could use that and make our service-layer tests fully expressed in terms of the
    service layer’s official use cases, removing all dependencies on the domain:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们可以再进一步。如果我们有一个添加库存的服务，我们可以使用它，并使我们的服务层测试完全按照服务层的官方用例来表达，消除对领域的所有依赖：
- en: '*Test for new add_batch service (tests/unit/test_services.py)*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 测试新的add_batch服务（tests/unit/test_services.py）
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In general, if you find yourself needing to do domain-layer stuff directly in
    your service-layer tests, it may be an indication that your service layer is incomplete.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果你发现自己需要在服务层测试中直接进行领域层操作，这可能表明你的服务层是不完整的。
- en: 'And the implementation is just two lines:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 而实现只是两行代码：
- en: '*A new service for add_batch (service_layer/services.py)*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*为add_batch添加一个新服务（service_layer/services.py）*'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Should you write a new service just because it would help remove dependencies
    from your tests? Probably not. But in this case, we almost definitely would need
    an `add_batch` service one day anyway.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该仅仅因为它有助于从你的测试中移除依赖而写一个新的服务吗？可能不。但在这种情况下，我们几乎肯定会在某一天需要一个`add_batch`服务。
- en: 'That now allows us to rewrite *all* of our service-layer tests purely in terms
    of the services themselves, using only primitives, and without any dependencies
    on the model:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以纯粹地用服务本身来重写*所有*我们的服务层测试，只使用原语，而不依赖于模型：
- en: '*Services tests now use only services (tests/unit/test_services.py)*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务测试现在只使用服务（tests/unit/test_services.py）*'
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a really nice place to be in. Our service-layer tests depend on only
    the service layer itself, leaving us completely free to refactor the model as
    we see fit.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是一个很好的地方。我们的服务层测试只依赖于服务层本身，让我们完全自由地根据需要重构模型。
- en: Carrying the Improvement Through to the E2E Tests
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将改进带入端到端测试
- en: In the same way that adding `add_batch` helped decouple our service-layer tests
    from the model, adding an API endpoint to add a batch would remove the need for
    the ugly `add_stock` fixture, and our E2E tests could be free of those hardcoded
    SQL queries and the direct dependency on the database.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就像添加`add_batch`帮助我们将服务层测试与模型解耦一样，添加一个API端点来添加批次将消除对丑陋的`add_stock`装置的需求，我们的端到端测试可以摆脱那些硬编码的SQL查询和对数据库的直接依赖。
- en: 'Thanks to our service function, adding the endpoint is easy, with just a little
    JSON wrangling and a single function call required:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的服务函数，添加端点很容易，只需要一点JSON处理和一个函数调用：
- en: '*API for adding a batch (entrypoints/flask_app.py)*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*用于添加批次的API（entrypoints/flask_app.py）*'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Are you thinking to yourself, POST to */add_batch*? That’s not very RESTful!
    You’re quite right. We’re being happily sloppy, but if you’d like to make it all
    more RESTy, maybe a POST to */batches*, then knock yourself out! Because Flask
    is a thin adapter, it’ll be easy. See [the next sidebar](#types_of_test_rules_of_thumb).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否在想，向*/add_batch*发POST请求？这不太符合RESTful！你是对的。我们很随意，但如果你想让它更符合RESTful，也许是向*/batches*发POST请求，那就尽管去做吧！因为Flask是一个薄适配器，所以很容易。参见[下一个侧边栏](#types_of_test_rules_of_thumb)。
- en: 'And our hardcoded SQL queries from *conftest.py* get replaced with some API
    calls, meaning the API tests have no dependencies other than the API, which is
    also nice:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我们在conftest.py中的硬编码SQL查询被一些API调用所取代，这意味着API测试除了API之外没有任何依赖，这也很好：
- en: '*API tests can now add their own batches (tests/e2e/test_api.py)*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: API测试现在可以添加自己的批次（tests/e2e/test_api.py）
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Wrap-Up
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Once you have a service layer in place, you really can move the majority of
    your test coverage to unit tests and develop a healthy test pyramid.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了一个服务层，你真的可以将大部分的测试覆盖移到单元测试，并且建立一个健康的测试金字塔。
- en: 'A few things will help along the way:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一些事情将会帮助你：
- en: Express your service layer in terms of primitives rather than domain objects.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用原语而不是领域对象来表达你的服务层。
- en: In an ideal world, you’ll have all the services you need to be able to test
    entirely against the service layer, rather than hacking state via repositories
    or the database. This pays off in your end-to-end tests as well.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在理想的世界里，你将拥有所有你需要的服务，能够完全针对服务层进行测试，而不是通过存储库或数据库来修改状态。这在你的端到端测试中也会得到回报。
- en: Onto the next chapter!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 进入下一章！
- en: '^([1](ch05.xhtml#idm45714894903464-marker)) A valid concern about writing tests
    at a higher level is that it can lead to combinatorial explosion for more complex
    use cases. In these cases, dropping down to lower-level unit tests of the various
    collaborating domain objects can be useful. But see also [Chapter 8](ch08.xhtml#chapter_08_events_and_message_bus)
    and [“Optionally: Unit Testing Event Handlers in Isolation with a Fake Message
    Bus”](ch09.xhtml#fake_message_bus).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch05.xhtml#idm45714894903464-marker)) 关于在更高层编写测试的一个有效担忧是，对于更复杂的用例，可能会导致组合爆炸。在这些情况下，降级到各种协作领域对象的低级单元测试可能会有用。但也参见[第8章](ch08.xhtml#chapter_08_events_and_message_bus)和“可选：使用虚假消息总线单独测试事件处理程序”（ch09.xhtml#fake_message_bus）。

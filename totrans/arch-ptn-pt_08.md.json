["```py\ngit clone https://github.com/cosmicpython/code.git\ncd code\ngit checkout chapter_06_uow\n# or to code along, checkout Chapter 4:\ngit checkout chapter_04_service_layer\n```", "```py\ndefallocate(orderid:str,sku:str,qty:int,uow:unit_of_work.AbstractUnitOfWork)->str:line=OrderLine(orderid,sku,qty)withuow:![1](Images/1.png)batches=uow.batches.list()![2](Images/2.png)...batchref=model.allocate(line,batches)uow.commit()![3](Images/3.png)\n```", "```py\ndeftest_uow_can_retrieve_a_batch_and_allocate_to_it(session_factory):session=session_factory()insert_batch(session,'batch1','HIPSTER-WORKBENCH',100,None)session.commit()uow=unit_of_work.SqlAlchemyUnitOfWork(session_factory)![1](Images/1.png)withuow:batch=uow.batches.get(reference='batch1')![2](Images/2.png)line=model.OrderLine('o1','HIPSTER-WORKBENCH',10)batch.allocate(line)uow.commit()![3](Images/3.png)batchref=get_allocated_batch_ref(session,'o1','HIPSTER-WORKBENCH')assertbatchref=='batch1'\n```", "```py\ndef insert_batch(session, ref, sku, qty, eta):\n    session.execute(\n        'INSERT INTO batches (reference, sku, _purchased_quantity, eta)'\n        ' VALUES (:ref, :sku, :qty, :eta)',\n        dict(ref=ref, sku=sku, qty=qty, eta=eta)\n    )\n\ndef get_allocated_batch_ref(session, orderid, sku):\n    [[orderlineid]] = session.execute(\n        'SELECT id FROM order_lines WHERE orderid=:orderid AND sku=:sku',\n        dict(orderid=orderid, sku=sku)\n    )\n    [[batchref]] = session.execute(\n        'SELECT b.reference FROM allocations JOIN batches AS b ON batch_id = b.id'\n        ' WHERE orderline_id=:orderlineid',\n        dict(orderlineid=orderlineid)\n    )\n    return batchref\n```", "```py\nclassAbstractUnitOfWork(abc.ABC):batches:repository.AbstractRepository![1](Images/1.png)def__exit__(self,*args):![2](Images/2.png)self.rollback()![4](Images/4.png)@abc.abstractmethoddefcommit(self):![3](Images/3.png)raiseNotImplementedError@abc.abstractmethoddefrollback(self):![4](Images/4.png)raiseNotImplementedError\n```", "```py\nDEFAULT_SESSION_FACTORY=sessionmaker(bind=create_engine(![1](Images/1.png)config.get_postgres_uri(),))classSqlAlchemyUnitOfWork(AbstractUnitOfWork):def__init__(self,session_factory=DEFAULT_SESSION_FACTORY):self.session_factory=session_factory![1](Images/1.png)def__enter__(self):self.session=self.session_factory()# type: Session ![2](Images/2.png)self.batches=repository.SqlAlchemyRepository(self.session)![2](Images/2.png)returnsuper().__enter__()def__exit__(self,*args):super().__exit__(*args)self.session.close()![3](Images/3.png)defcommit(self):![4](Images/4.png)self.session.commit()defrollback(self):![4](Images/4.png)self.session.rollback()\n```", "```py\nclassFakeUnitOfWork(unit_of_work.AbstractUnitOfWork):def__init__(self):self.batches=FakeRepository([])![1](Images/1.png)self.committed=False![2](Images/2.png)defcommit(self):self.committed=True![2](Images/2.png)defrollback(self):passdeftest_add_batch():uow=FakeUnitOfWork()![3](Images/3.png)services.add_batch(\"b1\",\"CRUNCHY-ARMCHAIR\",100,None,uow)![3](Images/3.png)assertuow.batches.get(\"b1\")isnotNoneassertuow.committeddeftest_allocate_returns_allocation():uow=FakeUnitOfWork()![3](Images/3.png)services.add_batch(\"batch1\",\"COMPLICATED-LAMP\",100,None,uow)![3](Images/3.png)result=services.allocate(\"o1\",\"COMPLICATED-LAMP\",10,uow)![3](Images/3.png)assertresult==\"batch1\"...\n```", "```py\ndefadd_batch(ref:str,sku:str,qty:int,eta:Optional[date],uow:unit_of_work.AbstractUnitOfWork![1](Images/1.png)):withuow:uow.batches.add(model.Batch(ref,sku,qty,eta))uow.commit()defallocate(orderid:str,sku:str,qty:int,uow:unit_of_work.AbstractUnitOfWork![1](Images/1.png))->str:line=OrderLine(orderid,sku,qty)withuow:batches=uow.batches.list()ifnotis_valid_sku(line.sku,batches):raiseInvalidSku(f'Invalid sku {line.sku}')batchref=model.allocate(line,batches)uow.commit()returnbatchref\n```", "```py\ndef test_rolls_back_uncommitted_work_by_default(session_factory):\n    uow = unit_of_work.SqlAlchemyUnitOfWork(session_factory)\n    with uow:\n        insert_batch(uow.session, 'batch1', 'MEDIUM-PLINTH', 100, None)\n\n    new_session = session_factory()\n    rows = list(new_session.execute('SELECT * FROM \"batches\"'))\n    assert rows == []\n\ndef test_rolls_back_on_error(session_factory):\n    class MyException(Exception):\n        pass\n\n    uow = unit_of_work.SqlAlchemyUnitOfWork(session_factory)\n    with pytest.raises(MyException):\n        with uow:\n            insert_batch(uow.session, 'batch1', 'LARGE-FORK', 100, None)\n            raise MyException()\n\n    new_session = session_factory()\n    rows = list(new_session.execute('SELECT * FROM \"batches\"'))\n    assert rows == []\n```", "```py\nclassAbstractUnitOfWork(abc.ABC):def__enter__(self):returnselfdef__exit__(self,exn_type,exn_value,traceback):ifexn_typeisNone:self.commit()![1](Images/1.png)else:self.rollback()![2](Images/2.png)\n```", "```py\ndef add_batch(ref: str, sku: str, qty: int, eta: Optional[date], uow):\n    with uow:\n        uow.batches.add(model.Batch(ref, sku, qty, eta))\n        # uow.commit()\n```", "```py\ndefreallocate(line:OrderLine,uow:AbstractUnitOfWork)->str:withuow:batch=uow.batches.get(sku=line.sku)ifbatchisNone:raiseInvalidSku(f'Invalid sku {line.sku}')batch.deallocate(line)![1](Images/1.png)allocate(line)![2](Images/2.png)uow.commit()\n```", "```py\ndefchange_batch_quantity(batchref:str,new_qty:int,uow:AbstractUnitOfWork):withuow:batch=uow.batches.get(reference=batchref)batch.change_purchased_quantity(new_qty)whilebatch.available_quantity<0:line=batch.deallocate_one()![1](Images/1.png)uow.commit()\n```", "```py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 e2e\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_api.py\n    \u251c\u2500\u2500 integration\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test_orm.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test_repository.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_uow.py\n    \u251c\u2500\u2500 pytest.ini\n    \u2514\u2500\u2500 unit\n        \u251c\u2500\u2500 test_allocate.py\n        \u251c\u2500\u2500 test_batches.py\n        \u2514\u2500\u2500 test_services.py\n```"]
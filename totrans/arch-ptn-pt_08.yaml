- en: Chapter 6\. Unit of Work Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。工作单元模式
- en: 'In this chapter we’ll introduce the final piece of the puzzle that ties together
    the Repository and Service Layer patterns: the *Unit of Work* pattern.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍将存储库和服务层模式联系在一起的最后一块拼图：*工作单元*模式。
- en: If the Repository pattern is our abstraction over the idea of persistent storage,
    the Unit of Work (UoW) pattern is our abstraction over the idea of *atomic operations*.
    It will allow us to finally and fully decouple our service layer from the data
    layer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存储库模式是我们对持久存储概念的抽象，那么工作单元（UoW）模式就是我们对*原子操作*概念的抽象。它将允许我们最终完全将服务层与数据层解耦。
- en: '[Figure 6-1](#before_uow_diagram) shows that, currently, a lot of communication
    occurs across the layers of our infrastructure: the API talks directly to the
    database layer to start a session, it talks to the repository layer to initialize
    `SQLAlchemyRepository`, and it talks to the service layer to ask it to allocate.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-1](#before_uow_diagram)显示，目前我们的基础设施层之间存在大量的通信：API直接与数据库层交互以启动会话，它与存储库层交互以初始化`SQLAlchemyRepository`，并且它与服务层交互以请求分配。'
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_06_uow branch [on GitHub](https://oreil.ly/MoWdZ):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于GitHub的chapter_06_uow分支中[（https://oreil.ly/MoWdZ）](https://oreil.ly/MoWdZ)：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![apwp 0601](Images/apwp_0601.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0601](Images/apwp_0601.png)'
- en: 'Figure 6-1\. Without UoW: API talks directly to three layers'
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-1。没有UoW：API直接与三层交互
- en: '[Figure 6-2](#after_uow_diagram) shows our target state. The Flask API now
    does only two things: it initializes a unit of work, and it invokes a service.
    The service collaborates with the UoW (we like to think of the UoW as being part
    of the service layer), but neither the service function itself nor Flask now needs
    to talk directly to the database.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-2](#after_uow_diagram)显示了我们的目标状态。Flask API现在只执行两件事：初始化工作单元，并调用服务。服务与UoW合作（我们喜欢认为UoW是服务层的一部分），但服务函数本身或Flask现在都不需要直接与数据库交互。'
- en: And we’ll do it all using a lovely piece of Python syntax, a context manager.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python语法的一个可爱的部分，即上下文管理器。
- en: '![apwp 0602](Images/apwp_0602.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0602](Images/apwp_0602.png)'
- en: 'Figure 6-2\. With UoW: UoW now manages database state'
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-2。使用UoW：UoW现在管理数据库状态
- en: The Unit of Work Collaborates with the Repository
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作单元与存储库合作
- en: 'Let’s see the unit of work (or UoW, which we pronounce “you-wow”) in action.
    Here’s how the service layer will look when we’re finished:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看工作单元（或UoW，我们发音为“you-wow”）的实际操作。完成后，服务层将如何看起来：
- en: '*Preview of unit of work in action (src/allocation/service_layer/services.py)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*工作单元在操作中的预览（src/allocation/service_layer/services.py）*'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO1-1)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO1-1)'
- en: We’ll start a UoW as a context manager.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将启动UoW作为上下文管理器。
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO1-2)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO1-2)'
- en: '`uow.batches` is the batches repo, so the UoW provides us access to our permanent
    storage.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`uow.batches`是批处理存储库，因此UoW为我们提供了对永久存储的访问。'
- en: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO1-3)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO1-3)'
- en: When we’re done, we commit or roll back our work, using the UoW.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们使用UoW提交或回滚我们的工作。
- en: The UoW acts as a single entrypoint to our persistent storage, and it keeps
    track of what objects were loaded and of the latest state.^([1](ch06.xhtml#idm45714894656504))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: UoW充当了我们持久存储的单一入口点，并跟踪了加载的对象和最新状态。^([1](ch06.xhtml#idm45714894656504))
- en: 'This gives us three useful things:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们三个有用的东西：
- en: A stable snapshot of the database to work with, so the objects we use aren’t
    changing halfway through an operation
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个稳定的数据库快照，以便我们使用的对象在操作中途不会发生更改
- en: A way to persist all of our changes at once, so if something goes wrong, we
    don’t end up in an inconsistent state
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种一次性持久化所有更改的方法，因此如果出现问题，我们不会处于不一致的状态
- en: A simple API to our persistence concerns and a handy place to get a repository
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我们的持久化问题提供了一个简单的API和一个方便的获取存储库的地方
- en: Test-Driving a UoW with Integration Tests
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过集成测试驱动UoW
- en: 'Here are our integration tests for the UOW:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的UOW集成测试：
- en: '*A basic “round-trip” test for a UoW (tests/integration/test_uow.py)*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*UoW的基本“往返”测试（tests/integration/test_uow.py）*'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO2-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO2-1)'
- en: We initialize the UoW by using our custom session factory and get back a `uow`
    object to use in our `with` block.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用自定义会话工厂来初始化UoW，并获得一个`uow`对象来在我们的`with`块中使用。
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO2-2)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO2-2)'
- en: The UoW gives us access to the batches repository via `uow.batches`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: UoW通过`uow.batches`为我们提供对批处理存储库的访问。
- en: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO2-3)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO2-3)'
- en: We call `commit()` on it when we’re done.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成时，我们调用`commit()`。
- en: 'For the curious, the `insert_batch` and `get_allocated_batch_ref` helpers look
    like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于好奇的人，`insert_batch`和`get_allocated_batch_ref`辅助程序如下：
- en: '*Helpers for doing SQL stuff (tests/integration/test_uow.py)*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*执行SQL操作的辅助程序（tests/integration/test_uow.py）*'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Unit of Work and Its Context Manager
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作单元及其上下文管理器
- en: 'In our tests we’ve implicitly defined an interface for what a UoW needs to
    do. Let’s make that explicit by using an abstract base class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们隐式地定义了UoW需要执行的接口。让我们通过使用抽象基类来明确定义：
- en: '*Abstract UoW context manager (src/allocation/service_layer/unit_of_work.py)*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象UoW上下文管理器（src/allocation/service_layer/unit_of_work.py）*'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO3-1)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO3-1)'
- en: The UoW provides an attribute called `.batches`, which will give us access to
    the batches repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: UoW提供了一个名为`.batches`的属性，它将为我们提供对批处理存储库的访问。
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO3-2)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO3-2)'
- en: If you’ve never seen a context manager, `__enter__` and `__exit__` are the two
    magic methods that execute when we enter the `with` block and when we exit it,
    respectively. They’re our setup and teardown phases.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未见过上下文管理器，`__enter__`和`__exit__`是我们进入`with`块和退出`with`块时执行的两个魔术方法。它们是我们的设置和拆卸阶段。
- en: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO3-4)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO3-4)'
- en: We’ll call this method to explicitly commit our work when we’re ready.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们准备好时，我们将调用这个方法来显式提交我们的工作。
- en: '[![4](Images/4.png)](#co_unit_of_work_pattern_CO3-3)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_unit_of_work_pattern_CO3-3)'
- en: If we don’t commit, or if we exit the context manager by raising an error, we
    do a `rollback`. (The rollback has no effect if `commit()` has been called. Read
    on for more discussion of this.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不提交，或者通过引发错误退出上下文管理器，我们将执行`rollback`。（如果调用了`commit()`，则`rollback`不起作用。继续阅读更多关于此的讨论。）
- en: The Real Unit of Work Uses SQLAlchemy Sessions
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真正的工作单元使用SQLAlchemy会话
- en: 'The main thing that our concrete implementation adds is the database session:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们具体实现的主要内容是数据库会话：
- en: '*The real SQLAlchemy UoW (src/allocation/service_layer/unit_of_work.py)*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*真正的SQLAlchemy UoW（src/allocation/service_layer/unit_of_work.py）*'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO4-1)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO4-1)'
- en: The module defines a default session factory that will connect to Postgres,
    but we allow that to be overridden in our integration tests so that we can use
    SQLite instead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块定义了一个默认的会话工厂，将连接到Postgres，但我们允许在集成测试中进行覆盖，以便我们可以改用SQLite。
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO4-3)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO4-3)'
- en: The `__enter__` method is responsible for starting a database session and instantiating
    a real repository that can use that session.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`__enter__`方法负责启动数据库会话并实例化一个可以使用该会话的真实存储库。'
- en: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO4-5)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO4-5)'
- en: We close the session on exit.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在退出时关闭会话。
- en: '[![4](Images/4.png)](#co_unit_of_work_pattern_CO4-6)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_unit_of_work_pattern_CO4-6)'
- en: Finally, we provide concrete `commit()` and `rollback()` methods that use our
    database session.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们提供使用我们的数据库会话的具体`commit()`和`rollback()`方法。
- en: Fake Unit of Work for Testing
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于测试的假工作单元
- en: 'Here’s how we use a fake UoW in our service-layer tests:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在服务层测试中如何使用假UoW的方式：
- en: '*Fake UoW (tests/unit/test_services.py)*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*假UoW（tests/unit/test_services.py）*'
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO5-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO5-1)'
- en: '`FakeUnitOfWork` and `FakeRepository` are tightly coupled, just like the real
    `UnitofWork` and `Repository` classes. That’s fine because we recognize that the
    objects are collaborators.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`FakeUnitOfWork`和`FakeRepository`紧密耦合，就像真正的`UnitofWork`和`Repository`类一样。这没关系，因为我们认识到这些对象是协作者。'
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO5-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO5-2)'
- en: Notice the similarity with the fake `commit()` function from `FakeSession` (which
    we can now get rid of). But it’s a substantial improvement because we’re now faking
    out code that we wrote rather than third-party code. Some people say, [“Don’t
    mock what you don’t own”](https://oreil.ly/0LVj3).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意与`FakeSession`中的假`commit()`函数的相似性（现在我们可以摆脱它）。但这是一个重大的改进，因为我们现在是在模拟我们编写的代码，而不是第三方代码。有些人说，“不要模拟你不拥有的东西”。
- en: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO5-4)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_unit_of_work_pattern_CO5-4)'
- en: In our tests, we can instantiate a UoW and pass it to our service layer, rather
    than passing a repository and a session. This is considerably less cumbersome.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们可以实例化一个UoW并将其传递给我们的服务层，而不是传递存储库和会话。这要简单得多。
- en: Using the UoW in the Service Layer
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务层使用UoW
- en: 'Here’s what our new service layer looks like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新服务层看起来是这样的：
- en: '*Service layer using UoW (src/allocation/service_layer/services.py)*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用UoW的服务层（src/allocation/service_layer/services.py）*'
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO6-1)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO6-1)'
- en: Our service layer now has only the one dependency, once again on an *abstract*
    UoW.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务层现在只有一个依赖，再次依赖于*抽象* UoW。
- en: Explicit Tests for Commit/Rollback Behavior
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显式测试提交/回滚行为
- en: 'To convince ourselves that the commit/rollback behavior works, we wrote a couple
    of tests:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确信提交/回滚行为有效，我们编写了一些测试：
- en: '*Integration tests for rollback behavior (tests/integration/test_uow.py)*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*回滚行为的集成测试（tests/integration/test_uow.py）*'
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: We haven’t shown it here, but it can be worth testing some of the more “obscure”
    database behavior, like transactions, against the “real” database—that is, the
    same engine. For now, we’re getting away with using SQLite instead of Postgres,
    but in [Chapter 7](ch07.xhtml#chapter_07_aggregate), we’ll switch some of the
    tests to using the real database. It’s convenient that our UoW class makes that
    easy!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有在这里展示它，但值得测试一些更“晦涩”的数据库行为，比如事务，针对“真实”的数据库，也就是相同的引擎。目前，我们使用SQLite代替Postgres，但在[第7章](ch07.xhtml#chapter_07_aggregate)中，我们将一些测试切换到使用真实数据库。我们的UoW类使这变得很方便！
- en: Explicit Versus Implicit Commits
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显式提交与隐式提交
- en: Now we briefly digress on different ways of implementing the UoW pattern.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们简要地偏离一下实现UoW模式的不同方式。
- en: 'We could imagine a slightly different version of the UoW that commits by default
    and rolls back only if it spots an exception:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以想象UoW的一个稍微不同的版本，默认情况下进行提交，只有在发现异常时才进行回滚：
- en: '*A UoW with implicit commit… (src/allocation/unit_of_work.py)*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*具有隐式提交的UoW…（src/allocation/unit_of_work.py）*'
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO7-1)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO7-1)'
- en: Should we have an implicit commit in the happy path?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，我们应该有一个隐式提交吗？
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO7-2)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO7-2)'
- en: And roll back only on exception?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 并且只在异常时回滚？
- en: 'It would allow us to save a line of code and to remove the explicit commit
    from our client code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们节省一行代码，并从客户端代码中删除显式提交：
- en: '*...would save us a line of code (src/allocation/service_layer/services.py)*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*...将为我们节省一行代码（src/allocation/service_layer/services.py）*'
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a judgment call, but we tend to prefer requiring the explicit commit
    so that we have to choose when to flush state.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个判断调用，但我们倾向于要求显式提交，这样我们就必须选择何时刷新状态。
- en: 'Although we use an extra line of code, this makes the software safe by default.
    The default behavior is to *not change anything*. In turn, that makes our code
    easier to reason about because there’s only one code path that leads to changes
    in the system: total success and an explicit commit. Any other code path, any
    exception, any early exit from the UoW’s scope leads to a safe state.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用了额外的一行代码，但这使得软件默认情况下是安全的。默认行为是*不改变任何东西*。反过来，这使得我们的代码更容易推理，因为只有一条代码路径会导致系统的更改：完全成功和显式提交。任何其他代码路径，任何异常，任何从UoW范围的早期退出都会导致安全状态。
- en: Similarly, we prefer to roll back by default because it’s easier to understand;
    this rolls back to the last commit, so either the user did one, or we blow their
    changes away. Harsh but simple.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们更喜欢默认情况下回滚，因为这样更容易理解；这将回滚到上次提交，所以要么用户进行了提交，要么我们取消他们的更改。严厉但简单。
- en: 'Examples: Using UoW to Group Multiple Operations into an Atomic Unit'
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：使用UoW将多个操作分组为一个原子单元
- en: Here are a few examples showing the Unit of Work pattern in use. You can see
    how it leads to simple reasoning about what blocks of code happen together.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，展示了UoW模式的使用。您可以看到它如何导致对代码块何时发生在一起的简单推理。
- en: 'Example 1: Reallocate'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例1：重新分配
- en: 'Suppose we want to be able to deallocate and then reallocate orders:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要能够取消分配然后重新分配订单：
- en: '*Reallocate service function*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*重新分配服务功能*'
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO8-1)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO8-1)'
- en: If `deallocate()` fails, we don’t want to call `allocate()`, obviously.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`deallocate()`失败，显然我们不想调用`allocate()`。
- en: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO8-2)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_unit_of_work_pattern_CO8-2)'
- en: If `allocate()` fails, we probably don’t want to actually commit the `deallocate()`
    either.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`allocate()`失败，我们可能不想实际提交`deallocate()`。
- en: 'Example 2: Change Batch Quantity'
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例2：更改批量数量
- en: Our shipping company gives us a call to say that one of the container doors
    opened, and half our sofas have fallen into the Indian Ocean. Oops!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的航运公司给我们打电话说，一个集装箱门打开了，我们的沙发有一半掉进了印度洋。糟糕！
- en: '*Change quantity*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*更改数量*'
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO9-1)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_unit_of_work_pattern_CO9-1)'
- en: Here we may need to deallocate any number of lines. If we get a failure at any
    stage, we probably want to commit none of the changes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可能需要取消分配任意数量的行。如果在任何阶段出现故障，我们可能不想提交任何更改。
- en: Tidying Up the Integration Tests
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整理集成测试
- en: 'We now have three sets of tests, all essentially pointing at the database:
    *test_orm.py*, *test_repository.py*, and *test_uow.py*. Should we throw any away?'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有三组测试，基本上都指向数据库：*test_orm.py*、*test_repository.py*和*test_uow.py*。我们应该放弃其中的任何一个吗？
- en: '*[PRE13]*  *You should always feel free to throw away tests if you think they’re
    not going to add value longer term. We’d say that *test_orm.py* was primarily
    a tool to help us learn SQLAlchemy, so we won’t need that long term, especially
    if the main things it’s doing are covered in *test_repository.py*. That last test,
    you might keep around, but we could certainly see an argument for just keeping
    everything at the highest possible level of abstraction (just as we did for the
    unit tests).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*[PRE13]*  *如果您认为测试长期内不会增加价值，那么您应该随时放弃测试。我们会说 *test_orm.py* 主要是帮助我们学习SQLAlchemy的工具，所以我们长期不需要它，特别是如果它正在做的主要事情已经在
    *test_repository.py* 中涵盖了。最后一个测试，您可能会保留，但我们当然可以看到只保持在最高可能的抽象级别上的论点（就像我们为单元测试所做的那样）。'
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'This is another example of the lesson from [Chapter 5](ch05.xhtml#chapter_05_high_gear_low_gear):
    as we build better abstractions, we can move our tests to run against them, which
    leaves us free to change the underlying details.*  *# Wrap-Up'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自[第5章](ch05.xhtml#chapter_05_high_gear_low_gear)的另一个教训的例子：随着我们构建更好的抽象，我们可以将我们的测试运行到它们所针对的抽象，这样我们就可以自由地更改底层细节。*  *#
    总结
- en: Hopefully we’ve convinced you that the Unit of Work pattern is useful, and that
    the context manager is a really nice Pythonic way of visually grouping code into
    blocks that we want to happen atomically.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我们已经说服了您，单位工作模式是有用的，并且上下文管理器是一种非常好的Pythonic方式，可以将代码可视化地分组到我们希望以原子方式发生的块中。
- en: This pattern is so useful, in fact, that SQLAlchemy already uses a UoW in the
    shape of the `Session` object. The `Session` object in SQLAlchemy is the way that
    your application loads data from the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式非常有用，事实上，SQLAlchemy已经使用了UoW，形式为`Session`对象。SQLAlchemy中的`Session`对象是您的应用程序从数据库加载数据的方式。
- en: Every time you load a new entity from the database, the session begins to *track*
    changes to the entity, and when the session is *flushed*, all your changes are
    persisted together. Why do we go to the effort of abstracting away the SQLAlchemy
    session if it already implements the pattern we want?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每次从数据库加载新实体时，会话开始*跟踪*对实体的更改，当会话*刷新*时，所有更改都会一起持久化。如果SQLAlchemy已经实现了我们想要的模式，为什么我们要努力抽象出SQLAlchemy会话呢？
- en: '[Table 6-1](#chapter_06_uow_tradeoffs) discusses some of the trade-offs.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[Table 6-1](#chapter_06_uow_tradeoffs) 讨论了一些权衡。'
- en: 'Table 6-1\. Unit of Work pattern: the trade-offs'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 表6-1\. 单元工作模式：权衡
- en: '| Pros | Cons |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 缺点 |'
- en: '| --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: We have a nice abstraction over the concept of atomic operations, and the context
    manager makes it easy to see, visually, what blocks of code are grouped together
    atomically.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们对原子操作的概念有一个很好的抽象，上下文管理器使得很容易直观地看到哪些代码块被原子地分组在一起。
- en: We have explicit control over when a transaction starts and finishes, and our
    application fails in a way that is safe by default. We never have to worry that
    an operation is partially committed.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以明确控制事务何时开始和结束，我们的应用程序默认以一种安全的方式失败。我们永远不必担心某个操作部分提交。
- en: It’s a nice place to put all your repositories so client code can access them.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个很好的地方，可以将所有的存储库放在一起，这样客户端代码就可以访问它们。
- en: As you’ll see in later chapters, atomicity isn’t only about transactions; it
    can help us work with events and the message bus.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如您将在后面的章节中看到的那样，原子性不仅仅是关于事务；它可以帮助我们处理事件和消息总线。
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Your ORM probably already has some perfectly good abstractions around atomicity.
    SQLAlchemy even has context managers. You can go a long way just passing a session
    around.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的ORM可能已经围绕原子性有一些完全合适的抽象。SQLAlchemy甚至有上下文管理器。只需传递一个会话就可以走得很远。
- en: We’ve made it look easy, but you have to think quite carefully about things
    like rollbacks, multithreading, and nested transactions. Perhaps just sticking
    to what Django or Flask-SQLAlchemy gives you will keep your life simpler.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们让它看起来很容易，但您必须仔细考虑回滚、多线程和嵌套事务等问题。也许只需坚持Django或Flask-SQLAlchemy给您的东西，就可以让您的生活更简单。
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'For one thing, the Session API is rich and supports operations that we don’t
    want or need in our domain. Our `UnitOfWork` simplifies the session to its essential
    core: it can be started, committed, or thrown away.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，会话API非常丰富，支持我们在领域中不需要或不需要的操作。我们的`UnitOfWork`简化了会话到其基本核心：它可以启动、提交或丢弃。
- en: For another, we’re using the `UnitOfWork` to access our `Repository` objects.
    This is a neat bit of developer usability that we couldn’t do with a plain SQLAlchemy
    `Session`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们使用`UnitOfWork`来访问我们的`Repository`对象。这是一个很好的开发人员可用性的技巧，我们无法使用普通的SQLAlchemy`Session`来实现。
- en: 'Lastly, we’re motivated again by the dependency inversion principle: our service
    layer depends on a thin abstraction, and we attach a concrete implementation at
    the outside edge of the system. This lines up nicely with SQLAlchemy’s own [recommendations](https://oreil.ly/tS0E0):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们再次受到依赖反转原则的激励：我们的服务层依赖于一个薄抽象，并且我们在系统的外围附加一个具体的实现。这与SQLAlchemy自己的[建议](https://oreil.ly/tS0E0)非常契合：
- en: Keep the life cycle of the session (and usually the transaction) separate and
    external. The most comprehensive approach, recommended for more substantial applications,
    will try to keep the details of session, transaction, and exception management
    as far as possible from the details of the program doing its work.
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 保持会话的生命周期（通常也是事务）分离和外部化。最全面的方法，建议用于更实质性的应用程序，将尽可能将会话、事务和异常管理的细节与执行其工作的程序的细节分开。
- en: '>'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: SQLALchemy “Session Basics” Documentation
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLALchemy“会话基础”文档
- en: ^([1](ch06.xhtml#idm45714894656504-marker)) You may have come across the use
    of the word *collaborators* to describe objects that work together to achieve
    a goal. The unit of work and the repository are a great example of collaborators
    in the object-modeling sense. In responsibility-driven design, clusters of objects
    that collaborate in their roles are called *object neighborhoods*, which is, in
    our professional opinion, totally adorable.*
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.xhtml#idm45714894656504-marker)) 您可能已经遇到过使用“合作者”一词来描述一起实现目标的对象。工作单元和存储库是对象建模意义上的合作者的绝佳示例。在责任驱动设计中，以其角色协作的对象群集被称为“对象邻域”，在我们的专业意见中，这是非常可爱的。

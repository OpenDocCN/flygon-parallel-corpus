- en: Part II. Event-Driven Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’m sorry that I long ago coined the term “objects” for this topic because it
    gets many people to focus on the lesser idea.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: The big idea is “messaging."…The key in making great and growable systems is
    much more to design how its modules communicate rather than what their internal
    properties and behaviors should be.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Alan Kay
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s all very well being able to write *one* domain model to manage a single
    bit of business process, but what happens when we need to write *many* models?
    In the real world, our applications sit within an organization and need to exchange
    information with other parts of the system. You may remember our context diagram
    shown in [Figure II-1](#allocation_context_diagram_again).
  prefs: []
  type: TYPE_NORMAL
- en: 'Faced with this requirement, many teams reach for microservices integrated
    via HTTP APIs. But if they’re not careful, they’ll end up producing the most chaotic
    mess of all: the distributed big ball of mud.'
  prefs: []
  type: TYPE_NORMAL
- en: In Part II, we’ll show how the techniques from [Part I](part01.xhtml#part1)
    can be extended to distributed systems. We’ll zoom out to look at how we can compose
    a system from many small components that interact through asynchronous message
    passing.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll see how our Service Layer and Unit of Work patterns allow us to reconfigure
    our app to run as an asynchronous message processor, and how event-driven systems
    help us to decouple aggregates and applications from one another.
  prefs: []
  type: TYPE_NORMAL
- en: '![apwp 0102](Images/apwp_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure II-1\. But exactly how will all these systems talk to each other?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We’ll look at the following patterns and techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: Domain Events
  prefs: []
  type: TYPE_NORMAL
- en: Trigger workflows that cross consistency boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Message Bus
  prefs: []
  type: TYPE_NORMAL
- en: Provide a unified way of invoking use cases from any endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: CQRS
  prefs: []
  type: TYPE_NORMAL
- en: Separating reads and writes avoids awkward compromises in an event-driven architecture
    and enables performance and scalability improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Plus, we’ll add a dependency injection framework. This has nothing to do with
    event-driven architecture per se, but it tidies up an awful lot of loose ends.
  prefs: []
  type: TYPE_NORMAL

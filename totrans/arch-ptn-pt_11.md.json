["```py\ngit clone https://github.com/cosmicpython/code.git\ncd code\ngit checkout chapter_08_events_and_message_bus\n# or to code along, checkout the previous chapter:\ngit checkout chapter_07_aggregate\n```", "```py\n@app.route(\"/allocate\", methods=['POST'])\ndef allocate_endpoint():\n    line = model.OrderLine(\n        request.json['orderid'],\n        request.json['sku'],\n        request.json['qty'],\n    )\n    try:\n        uow = unit_of_work.SqlAlchemyUnitOfWork()\n        batchref = services.allocate(line, uow)\n    except (model.OutOfStock, services.InvalidSku) as e:\n        send_mail(\n            'out of stock',\n            'stock_admin@made.com',\n            f'{line.orderid} - {line.sku}'\n        )\n        return jsonify({'message': str(e)}), 400\n\n    return jsonify({'batchref': batchref}), 201\n```", "```py\n    def allocate(self, line: OrderLine) -> str:\n        try:\n            batch = next(\n                b for b in sorted(self.batches) if b.can_allocate(line)\n            )\n            #...\n        except StopIteration:\n            email.send_mail('stock@made.com', f'Out of stock for {line.sku}')\n            raise OutOfStock(f'Out of stock for sku {line.sku}')\n```", "```py\ndef allocate(\n        orderid: str, sku: str, qty: int,\n        uow: unit_of_work.AbstractUnitOfWork\n) -> str:\n    line = OrderLine(orderid, sku, qty)\n    with uow:\n        product = uow.products.get(sku=line.sku)\n        if product is None:\n            raise InvalidSku(f'Invalid sku {line.sku}')\n        try:\n            batchref = product.allocate(line)\n            uow.commit()\n            return batchref\n        except model.OutOfStock:\n            email.send_mail('stock@made.com', f'Out of stock for {line.sku}')\n            raise\n```", "```py\nfromdataclassesimportdataclassclassEvent:![1](Images/1.png)pass@dataclassclassOutOfStock(Event):![2](Images/2.png)sku:str\n```", "```py\ndeftest_records_out_of_stock_event_if_cannot_allocate():batch=Batch('batch1','SMALL-FORK',10,eta=today)product=Product(sku=\"SMALL-FORK\",batches=[batch])product.allocate(OrderLine('order1','SMALL-FORK',10))allocation=product.allocate(OrderLine('order2','SMALL-FORK',1))assertproduct.events[-1]==events.OutOfStock(sku=\"SMALL-FORK\")![1](Images/1.png)assertallocationisNone\n```", "```py\nclassProduct:def__init__(self,sku:str,batches:List[Batch],version_number:int=0):self.sku=skuself.batches=batchesself.version_number=version_numberself.events=[]# type: List[events.Event] ![1](Images/1.png)defallocate(self,line:OrderLine)->str:try:#...exceptStopIteration:self.events.append(events.OutOfStock(line.sku))![2](Images/2.png)# raise OutOfStock(f'Out of stock for sku {line.sku}') ![3](Images/3.png)returnNone\n```", "```py\ndef handle(event: events.Event):\n    for handler in HANDLERS[type(event)]:\n        handler(event)\n\ndef send_out_of_stock_notification(event: events.OutOfStock):\n    email.send_mail(\n        'stock@made.com',\n        f'Out of stock for {event.sku}',\n    )\n\nHANDLERS = {\n    events.OutOfStock: [send_out_of_stock_notification],\n\n}  # type: Dict[Type[events.Event], List[Callable]]\n```", "```py\nfrom.importmessagebus...defallocate(orderid:str,sku:str,qty:int,uow:unit_of_work.AbstractUnitOfWork)->str:line=OrderLine(orderid,sku,qty)withuow:product=uow.products.get(sku=line.sku)ifproductisNone:raiseInvalidSku(f'Invalid sku {line.sku}')try:![1](Images/1.png)batchref=product.allocate(line)uow.commit()returnbatchreffinally:![1](Images/1.png)messagebus.handle(product.events)![2](Images/2.png)\n```", "```py\ndefallocate(orderid:str,sku:str,qty:int,uow:unit_of_work.AbstractUnitOfWork)->str:line=OrderLine(orderid,sku,qty)withuow:product=uow.products.get(sku=line.sku)ifproductisNone:raiseInvalidSku(f'Invalid sku {line.sku}')batchref=product.allocate(line)uow.commit()![1](Images/1.png)ifbatchrefisNone:messagebus.handle(events.OutOfStock(line.sku))returnbatchref\n```", "```py\nclassAbstractUnitOfWork(abc.ABC):...defcommit(self):self._commit()![1](Images/1.png)self.publish_events()![2](Images/2.png)defpublish_events(self):![2](Images/2.png)forproductinself.products.seen:![3](Images/3.png)whileproduct.events:event=product.events.pop(0)messagebus.handle(event)@abc.abstractmethoddef_commit(self):raiseNotImplementedError...classSqlAlchemyUnitOfWork(AbstractUnitOfWork):...def_commit(self):![1](Images/1.png)self.session.commit()\n```", "```py\nclassAbstractRepository(abc.ABC):def__init__(self):self.seen=set()# type: Set[model.Product] ![1](Images/1.png)defadd(self,product:model.Product):![2](Images/2.png)self._add(product)self.seen.add(product)defget(self,sku)->model.Product:![3](Images/3.png)product=self._get(sku)ifproduct:self.seen.add(product)returnproduct@abc.abstractmethoddef_add(self,product:model.Product):![2](Images/2.png)raiseNotImplementedError@abc.abstractmethod![3](Images/3.png)def_get(self,sku)->model.Product:raiseNotImplementedErrorclassSqlAlchemyRepository(AbstractRepository):def__init__(self,session):super().__init__()self.session=sessiondef_add(self,product):![2](Images/2.png)self.session.add(product)def_get(self,sku):![3](Images/3.png)returnself.session.query(model.Product).filter_by(sku=sku).first()\n```", "```py\ndef allocate(\n        orderid: str, sku: str, qty: int,\n        uow: unit_of_work.AbstractUnitOfWork\n) -> str:\n    line = OrderLine(orderid, sku, qty)\n    with uow:\n        product = uow.products.get(sku=line.sku)\n        if product is None:\n            raise InvalidSku(f'Invalid sku {line.sku}')\n        batchref = product.allocate(line)\n        uow.commit()\n        return batchref\n```", "```py\nclass FakeRepository(repository.AbstractRepository):\n\n    def __init__(self, products):\n        super().__init__()\n        self._products = set(products)\n\n    def _add(self, product):\n        self._products.add(product)\n\n    def _get(self, sku):\n        return next((p for p in self._products if p.sku == sku), None)\n\n...\n\nclass FakeUnitOfWork(unit_of_work.AbstractUnitOfWork):\n    ...\n\n    def _commit(self):\n        self.committed = True\n```"]
["```py\ngit clone https://github.com/cosmicpython/code.git\ncd code\ngit checkout chapter_10_commands\n# or to code along, checkout the previous chapter:\ngit checkout chapter_09_all_messagebus\n```", "```py\nclassCommand:pass@dataclassclassAllocate(Command):![1](Images/1.png)orderid:strsku:strqty:int@dataclassclassCreateBatch(Command):![2](Images/2.png)ref:strsku:strqty:inteta:Optional[date]=None@dataclassclassChangeBatchQuantity(Command):![3](Images/3.png)ref:strqty:int\n```", "```py\nMessage=Union[commands.Command,events.Event]defhandle(message:Message,uow:unit_of_work.AbstractUnitOfWork):![1](Images/1.png)results=[]queue=[message]whilequeue:message=queue.pop(0)ifisinstance(message,events.Event):handle_event(message,queue,uow)![2](Images/2.png)elifisinstance(message,commands.Command):cmd_result=handle_command(message,queue,uow)![2](Images/2.png)results.append(cmd_result)else:raiseException(f'{message} was not an Event or Command')returnresults\n```", "```py\ndefhandle_event(event:events.Event,queue:List[Message],uow:unit_of_work.AbstractUnitOfWork):forhandlerinEVENT_HANDLERS[type(event)]:![1](Images/1.png)try:logger.debug('handling event %s with handler %s',event,handler)handler(event,uow=uow)queue.extend(uow.collect_new_events())exceptException:logger.exception('Exception handling event %s',event)continue![2](Images/2.png)\n```", "```py\ndefhandle_command(command:commands.Command,queue:List[Message],uow:unit_of_work.AbstractUnitOfWork):logger.debug('handling command %s',command)try:handler=COMMAND_HANDLERS[type(command)]![1](Images/1.png)result=handler(command,uow=uow)queue.extend(uow.collect_new_events())returnresult![3](Images/3.png)exceptException:logger.exception('Exception handling command %s',command)raise![2](Images/2.png)\n```", "```py\nEVENT_HANDLERS = {\n    events.OutOfStock: [handlers.send_out_of_stock_notification],\n}  # type: Dict[Type[events.Event], List[Callable]]\n\nCOMMAND_HANDLERS = {\n    commands.Allocate: handlers.allocate,\n    commands.CreateBatch: handlers.add_batch,\n    commands.ChangeBatchQuantity: handlers.change_batch_quantity,\n}  # type: Dict[Type[commands.Command], Callable]\n```", "```py\nGiven a customer with two orders in their history,\nWhen the customer places a third order,\nThen they should be flagged as a VIP.\n\nWhen a customer first becomes a VIP\nThen we should send them an email to congratulate them\n```", "```py\nclassHistory:# Aggregatedef__init__(self,customer_id:int):self.orders=set()# Set[HistoryEntry]self.customer_id=customer_iddefrecord_order(self,order_id:str,order_amount:int):![1](Images/1.png)entry=HistoryEntry(order_id,order_amount)ifentryinself.orders:returnself.orders.add(entry)iflen(self.orders)==3:self.events.append(CustomerBecameVIP(self.customer_id))defcreate_order_from_basket(uow,cmd:CreateOrder):![2](Images/2.png)withuow:order=Order.from_basket(cmd.customer_id,cmd.basket_items)uow.orders.add(order)uow.commit()# raises OrderCreateddefupdate_customer_history(uow,event:OrderCreated):![3](Images/3.png)withuow:history=uow.order_history.get(event.customer_id)history.record_order(event.order_id,event.order_amount)uow.commit()# raises CustomerBecameVIPdefcongratulate_vip_customer(uow,event:CustomerBecameVip):![4](Images/4.png)withuow:customer=uow.customers.get(event.customer_id)email.send(customer.email_address,f'Congratulations {customer.first_name}!')\n```", "```py\ndef handle_event(\n    event: events.Event,\n    queue: List[Message],\n    uow: unit_of_work.AbstractUnitOfWork\n):\n    for handler in EVENT_HANDLERS[type(event)]:\n        try:\n            logger.debug('handling event %s with handler %s', event, handler)\n            handler(event, uow=uow)\n            queue.extend(uow.collect_new_events())\n        except Exception:\n            logger.exception('Exception handling event %s', event)\n            continue\n```", "```py\nHandling event CustomerBecameVIP(customer_id=12345)\nwith handler <function congratulate_vip_customer at 0x10ebc9a60>\n```", "```py\nfromtenacityimportRetrying,RetryError,stop_after_attempt,wait_exponential![1](Images/1.png)...defhandle_event(event:events.Event,queue:List[Message],uow:unit_of_work.AbstractUnitOfWork):forhandlerinEVENT_HANDLERS[type(event)]:try:forattemptinRetrying(![2](Images/2.png)stop=stop_after_attempt(3),wait=wait_exponential()):withattempt:logger.debug('handling event %s with handler %s',event,handler)handler(event,uow=uow)queue.extend(uow.collect_new_events())exceptRetryErrorasretry_failure:logger.error('Failed to handle event %s times, giving up!,retry_failure.last_attempt.attempt_number)continue\n```"]
- en: Chapter 10\. Commands and Command Handler
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。命令和命令处理程序
- en: In the previous chapter, we talked about using events as a way of representing
    the inputs to our system, and we turned our application into a message-processing
    machine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们谈到使用事件作为表示系统输入的一种方式，并将我们的应用程序转变为一个消息处理机器。
- en: To achieve that, we converted all our use-case functions to event handlers.
    When the API receives a POST to create a new batch, it builds a new `BatchCreated`
    event and handles it as if it were an internal event. This might feel counterintuitive.
    After all, the batch *hasn’t* been created yet; that’s why we called the API.
    We’re going to fix that conceptual wart by introducing commands and showing how
    they can be handled by the same message bus but with slightly different rules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将所有的用例函数转换为事件处理程序。当API接收到一个创建新批次的POST请求时，它构建一个新的`BatchCreated`事件，并将其处理为内部事件。这可能感觉反直觉。毕竟，批次*还没有*被创建；这就是我们调用API的原因。我们将通过引入命令并展示它们如何通过相同的消息总线处理，但规则略有不同来解决这个概念上的问题。
- en: Tip
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_10_commands branch [on GitHub](https://oreil.ly/U_VGa):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码在GitHub的chapter_10_commands分支中[https://oreil.ly/U_VGa](https://oreil.ly/U_VGa)：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Commands and Events
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令和事件
- en: Like events, *commands* are a type of message—instructions sent by one part
    of a system to another. We usually represent commands with dumb data structures
    and can handle them in much the same way as events.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与事件一样，*命令*是一种消息类型——由系统的一部分发送给另一部分的指令。我们通常用愚蠢的数据结构表示命令，并且可以以与事件相同的方式处理它们。
- en: The differences between commands and events, though, are important.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，命令和事件之间的差异是重要的。
- en: Commands are sent by one actor to another specific actor with the expectation
    that a particular thing will happen as a result. When we post a form to an API
    handler, we are sending a command. We name commands with imperative mood verb
    phrases like “allocate stock” or “delay shipment.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 命令由一个参与者发送给另一个特定的参与者，并期望作为结果发生特定的事情。当我们向API处理程序发布表单时，我们正在发送一个命令。我们用祈使句动词短语命名命令，比如“分配库存”或“延迟发货”。
- en: Commands capture *intent*. They express our wish for the system to do something.
    As a result, when they fail, the sender needs to receive error information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 命令捕获*意图*。它们表达了我们希望系统执行某些操作的愿望。因此，当它们失败时，发送者需要接收错误信息。
- en: '*Events* are broadcast by an actor to all interested listeners. When we publish
    `BatchQuantityChanged`, we don’t know who’s going to pick it up. We name events
    with past-tense verb phrases like “order allocated to stock” or “shipment delayed.”'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*事件*由一个参与者广播给所有感兴趣的监听器。当我们发布`BatchQuantityChanged`时，我们不知道谁会接收到它。我们用过去时动词短语命名事件，比如“订单分配给库存”或“发货延迟”。'
- en: We often use events to spread the knowledge about successful commands.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常使用事件来传播关于成功命令的知识。
- en: Events capture *facts* about things that happened in the past. Since we don’t
    know who’s handling an event, senders should not care whether the receivers succeeded
    or failed. [Table 10-1](#events_vs_commands_table) recaps the differences.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事件捕获*过去发生的事情*的事实。由于我们不知道谁在处理事件，发送者不应关心接收者成功与否。[表10-1](#events_vs_commands_table)总结了差异。
- en: Table 10-1\. Events versus commands
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表10-1。事件与命令的差异
- en: '|  | Event | Command |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|  | 事件 | 命令 |'
- en: '| --- | --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Named | Past tense | Imperative mood |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 命名 | 过去式 | 祈使句 |'
- en: '| Error handling | Fail independently | Fail noisily |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 错误处理 | 独立失败 | 失败时有噪音 |'
- en: '| Sent to | All listeners | One recipient |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 发送至 | 所有监听器 | 一个接收者 |'
- en: What kinds of commands do we have in our system right now?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统现在有什么样的命令？
- en: '*Pulling out some commands (src/allocation/domain/commands.py)*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*提取一些命令（src/allocation/domain/commands.py）*'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_commands_and_command_handler_CO1-1)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_commands_and_command_handler_CO1-1)'
- en: '`commands.Allocate` will replace `events.AllocationRequired`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`commands.Allocate`将替换`events.AllocationRequired`。'
- en: '[![2](Images/2.png)](#co_commands_and_command_handler_CO1-2)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_commands_and_command_handler_CO1-2)'
- en: '`commands.CreateBatch` will replace `events.BatchCreated`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`commands.CreateBatch`将替换`events.BatchCreated`。'
- en: '[![3](Images/3.png)](#co_commands_and_command_handler_CO1-3)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_commands_and_command_handler_CO1-3)'
- en: '`commands.ChangeBatchQuantity` will replace `events.BatchQuantityChanged`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`commands.ChangeBatchQuantity`将替换`events.BatchQuantityChanged`。'
- en: Differences in Exception Handling
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理的差异
- en: 'Just changing the names and verbs is all very well, but that won’t change the
    behavior of our system. We want to treat events and commands similarly, but not
    exactly the same. Let’s see how our message bus changes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 只是改变名称和动词是很好的，但这不会改变我们系统的行为。我们希望以类似的方式处理事件和命令，但不完全相同。让我们看看我们的消息总线如何改变：
- en: '*Dispatch events and commands differently (src/allocation/service_layer/messagebus.py)*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*不同的调度事件和命令（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_commands_and_command_handler_CO2-1)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_commands_and_command_handler_CO2-1)'
- en: It still has a main `handle()` entrypoint that takes a `message`, which may
    be a command or an event.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然有一个主要的`handle()`入口，接受一个`message`，它可以是一个命令或一个事件。
- en: '[![2](Images/2.png)](#co_commands_and_command_handler_CO2-2)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_commands_and_command_handler_CO2-2)'
- en: We dispatch events and commands to two different helper functions, shown next.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将事件和命令分派给两个不同的辅助函数，如下所示。
- en: 'Here’s how we handle events:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们处理事件的方式：
- en: '*Events cannot interrupt the flow (src/allocation/service_layer/messagebus.py)*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*事件不能中断流程（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_commands_and_command_handler_CO3-1)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_commands_and_command_handler_CO3-1)'
- en: Events go to a dispatcher that can delegate to multiple handlers per event.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 事件发送到一个分发器，可以将每个事件委派给多个处理程序。
- en: '[![2](Images/2.png)](#co_commands_and_command_handler_CO3-2)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_commands_and_command_handler_CO3-2)'
- en: It catches and logs errors but doesn’t let them interrupt message processing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它捕获并记录错误，但不允许它们中断消息处理。
- en: 'And here’s how we do commands:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们处理命令的方式：
- en: '*Commands reraise exceptions (src/allocation/service_layer/messagebus.py)*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*命令重新引发异常（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_commands_and_command_handler_CO4-1)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_commands_and_command_handler_CO4-1)'
- en: The command dispatcher expects just one handler per command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 命令调度程序期望每个命令只有一个处理程序。
- en: '[![2](Images/2.png)](#co_commands_and_command_handler_CO4-3)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_commands_and_command_handler_CO4-3)'
- en: If any errors are raised, they fail fast and will bubble up.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果引发任何错误，它们会快速失败并上升。
- en: '[![3](Images/3.png)](#co_commands_and_command_handler_CO4-2)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_commands_and_command_handler_CO4-2)'
- en: '`return result` is only temporary; as mentioned in [“A Temporary Ugly Hack:
    The Message Bus Has to Return Results”](ch09.xhtml#temporary_ugly_hack), it’s
    a temporary hack to allow the message bus to return the batch reference for the
    API to use. We’ll fix this in [Chapter 12](ch12.xhtml#chapter_12_cqrs).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`return result`只是临时的；如[“临时的丑陋的黑客：消息总线必须返回结果”](ch09.xhtml#temporary_ugly_hack)中所述，这是一个临时的黑客，允许消息总线返回API使用的批次引用。我们将在[第12章](ch12.xhtml#chapter_12_cqrs)中修复这个问题。'
- en: 'We also change the single `HANDLERS` dict into different ones for commands
    and events. Commands can have only one handler, according to our convention:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将单个`HANDLERS`字典更改为命令和事件的不同字典。根据我们的约定，命令只能有一个处理程序：
- en: '*New handlers dicts (src/allocation/service_layer/messagebus.py)*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*新处理程序字典（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Discussion: Events, Commands, and Error Handling'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论：事件、命令和错误处理
- en: Many developers get uncomfortable at this point and ask, “What happens when
    an event fails to process? How am I supposed to make sure the system is in a consistent
    state?” If we manage to process half of the events during `messagebus.handle`
    before an out-of-memory error kills our process, how do we mitigate problems caused
    by the lost messages?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员在这一点感到不舒服，并问：“当事件处理失败时会发生什么？我应该如何确保系统处于一致状态？”如果我们在`messagebus.handle`处理一半的事件之前由于内存不足错误而终止进程，我们如何减轻因丢失消息而引起的问题？
- en: 'Let’s start with the worst case: we fail to handle an event, and the system
    is left in an inconsistent state. What kind of error would cause this? Often in
    our systems we can end up in an inconsistent state when only half an operation
    is completed.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最坏的情况开始：我们未能处理事件，系统处于不一致状态。会导致这种情况的是什么样的错误？在我们的系统中，当只完成了一半的操作时，我们经常会陷入不一致状态。
- en: 'For example, we could allocate three units of `DESIRABLE_BEANBAG` to a customer’s
    order but somehow fail to reduce the amount of remaining stock. This would cause
    an inconsistent state: the three units of stock are both allocated *and* available,
    depending on how you look at it. Later, we might allocate those same beanbags
    to another customer, causing a headache for customer support.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以为客户的订单分配三个单位的`DESIRABLE_BEANBAG`，但在某种程度上未能减少剩余库存量。这将导致不一致的状态：三个单位的库存既被分配*又*可用，这取决于你如何看待它。后来，我们可能会将这些相同的沙发床分配给另一个客户，给客户支持带来麻烦。
- en: In our allocation service, though, we’ve already taken steps to prevent that
    happening. We’ve carefully identified *aggregates* that act as consistency boundaries,
    and we’ve introduced a *UoW* that manages the atomic success or failure of an
    update to an aggregate.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的分配服务中，我们已经采取了措施来防止发生这种情况。我们已经仔细确定了作为一致性边界的*聚合*，并且我们引入了一个*UoW*来管理对聚合的更新的原子成功或失败。
- en: 'For example, when we allocate stock to an order, our consistency boundary is
    the `Product` aggregate. This means that we can’t accidentally overallocate: either
    a particular order line is allocated to the product, or it is not—there’s no room
    for inconsistent states.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们为订单分配库存时，我们的一致性边界是`Product`聚合。这意味着我们不能意外地过度分配：要么特定订单行分配给产品，要么不分配——没有不一致状态的余地。
- en: By definition, we don’t require two aggregates to be immediately consistent,
    so if we fail to process an event and update only a single aggregate, our system
    can still be made eventually consistent. We shouldn’t violate any constraints
    of the system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，我们不需要立即使两个聚合保持一致，因此如果我们未能处理事件并仅更新单个聚合，我们的系统仍然可以最终保持一致。我们不应违反系统的任何约束。
- en: With this example in mind, we can better understand the reason for splitting
    messages into commands and events. When a user wants to make the system do something,
    we represent their request as a *command*. That command should modify a single
    *aggregate* and either succeed or fail in totality. Any other bookkeeping, cleanup,
    and notification we need to do can happen via an *event*. We don’t require the
    event handlers to succeed in order for the command to be successful.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个例子，我们可以更好地理解将消息分割为命令和事件的原因。当用户想要让系统执行某些操作时，我们将他们的请求表示为*命令*。该命令应修改单个*聚合*，并且要么完全成功，要么完全失败。我们需要做的任何其他簿记，清理和通知都可以通过*事件*来进行。我们不需要事件处理程序成功才能使命令成功。
- en: Let’s look at another example (from a different, imaginary projet) to see why
    not.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子（来自不同的、虚构的项目）来看看为什么不行。
- en: 'Imagine we are building an ecommerce website that sells expensive luxury goods.
    Our marketing department wants to reward customers for repeat visits. We will
    flag customers as VIPs after they make their third purchase, and this will entitle
    them to priority treatment and special offers. Our acceptance criteria for this
    story reads as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在构建一个销售昂贵奢侈品的电子商务网站。我们的营销部门希望奖励重复访问的客户。他们在第三次购买后将客户标记为VIP，并且这将使他们有资格获得优先处理和特别优惠。我们对这个故事的验收标准如下：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using the techniques we’ve already discussed in this book, we decide that we
    want to build a new `History` aggregate that records orders and can raise domain
    events when rules are met. We will structure the code like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在本书中已经讨论过的技术，我们决定要构建一个新的`History`聚合，记录订单并在满足规则时引发领域事件。我们将按照以下结构编写代码：
- en: '*VIP customer (example code for a different project)*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*VIP客户（另一个项目的示例代码）*'
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_commands_and_command_handler_CO5-1)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_commands_and_command_handler_CO5-1)'
- en: The `History` aggregate captures the rules indicating when a customer becomes
    a VIP. This puts us in a good place to handle changes when the rules become more
    complex in the future.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`History`聚合捕获了指示客户何时成为VIP的规则。这使我们能够在未来规则变得更加复杂时处理变化。'
- en: '[![2](Images/2.png)](#co_commands_and_command_handler_CO5-2)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_commands_and_command_handler_CO5-2)'
- en: Our first handler creates an order for the customer and raises a domain event
    `OrderCreated`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个处理程序为客户创建订单，并引发领域事件`OrderCreated`。
- en: '[![3](Images/3.png)](#co_commands_and_command_handler_CO5-3)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_commands_and_command_handler_CO5-3)'
- en: Our second handler updates the `History` object to record that an order was
    created.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个处理程序更新`History`对象，记录已创建订单。
- en: '[![4](Images/4.png)](#co_commands_and_command_handler_CO5-4)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_commands_and_command_handler_CO5-4)'
- en: Finally, we send an email to the customer when they become a VIP.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当客户成为VIP时，我们会给他们发送一封电子邮件。
- en: Using this code, we can gain some intuition about error handling in an event-driven
    system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这段代码，我们可以对事件驱动系统中的错误处理有一些直觉。
- en: In our current implementation, we raise events about an aggregate *after* we
    persist our state to the database. What if we raised those events *before* we
    persisted, and committed all our changes at the same time? That way, we could
    be sure that all the work was complete. Wouldn’t that be safer?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的实现中，我们在将状态持久化到数据库之后才引发关于聚合的事件。如果我们在持久化之前引发这些事件，并同时提交所有的更改，会怎样呢？这样，我们就可以确保所有的工作都已完成。这样不是更安全吗？
- en: What happens, though, if the email server is slightly overloaded? If all the
    work has to complete at the same time, a busy email server can stop us from taking
    money for orders.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果电子邮件服务器稍微过载会发生什么呢？如果所有工作都必须同时完成，繁忙的电子邮件服务器可能会阻止我们接受订单的付款。
- en: What happens if there is a bug in the implementation of the `History` aggregate?
    Should we fail to take your money just because we can’t recognize you as a VIP?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`History`聚合的实现中存在错误，会发生什么？难道因为我们无法识别您为VIP而放弃收取您的钱吗？
- en: By separating out these concerns, we have made it possible for things to fail
    in isolation, which improves the overall reliability of the system. The only part
    of this code that *has* to complete is the command handler that creates an order.
    This is the only part that a customer cares about, and it’s the part that our
    business stakeholders should prioritize.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分离这些关注点，我们使得事情可以独立失败，这提高了系统的整体可靠性。这段代码中*必须*完成的部分只有创建订单的命令处理程序。这是客户关心的唯一部分，也是我们的业务利益相关者应该优先考虑的部分。
- en: Notice how we’ve deliberately aligned our transactional boundaries to the start
    and end of the business processes. The names that we use in the code match the
    jargon used by our business stakeholders, and the handlers we’ve written match
    the steps of our natural language acceptance criteria. This concordance of names
    and structure helps us to reason about our systems as they grow larger and more
    complex.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们故意将事务边界与业务流程的开始和结束对齐。代码中使用的名称与我们的业务利益相关者使用的行话相匹配，我们编写的处理程序与我们的自然语言验收标准的步骤相匹配。名称和结构的一致性帮助我们推理系统在变得越来越大和复杂时的情况。
- en: Recovering from Errors Synchronously
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步恢复错误
- en: Hopefully we’ve convinced you that it’s OK for events to fail independently
    from the commands that raised them. What should we do, then, to make sure we can
    recover from errors when they inevitably occur?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我们已经说服您，事件可以独立于引发它们的命令而失败。那么，当错误不可避免地发生时，我们应该怎么做才能确保我们能够从错误中恢复呢？
- en: The first thing we need is to know *when* an error has occurred, and for that
    we usually rely on logs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要知道错误发生的*时间*，通常我们依赖日志来做到这一点。
- en: 'Let’s look again at the `handle_event` method from our message bus:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看我们消息总线中的`handle_event`方法：
- en: '*Current handle function (src/allocation/service_layer/messagebus.py)*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*当前处理函数（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When we handle a message in our system, the first thing we do is write a log
    line to record what we’re about to do. For our `CustomerBecameVIP` use case, the
    logs might read as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在系统中处理消息时，我们首先要做的是写入日志记录我们即将要做的事情。对于`CustomerBecameVIP`用例，日志可能如下所示：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Because we’ve chosen to use dataclasses for our message types, we get a neatly
    printed summary of the incoming data that we can copy and paste into a Python
    shell to re-create the object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们选择使用数据类来表示我们的消息类型，我们可以得到一个整洁打印的摘要，其中包含了我们可以复制并粘贴到Python shell中以重新创建对象的传入数据。
- en: When an error occurs, we can use the logged data to either reproduce the problem
    in a unit test or replay the message into the system.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误时，我们可以使用记录的数据来在单元测试中重现问题，或者将消息重新播放到系统中。
- en: Manual replay works well for cases where we need to fix a bug before we can
    re-process an event, but our systems will *always* experience some background
    level of transient failure. This includes things like network hiccups, table deadlocks,
    and brief downtime caused by deployments.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 手动重放对于需要在重新处理事件之前修复错误的情况非常有效，但我们的系统将始终经历一定程度的瞬态故障。这包括网络故障、表死锁以及部署导致的短暂停机等情况。
- en: For most of those cases, we can recover elegantly by trying again. As the proverb
    says, “If at first you don’t succeed, retry the operation with an exponentially
    increasing back-off period.”
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数情况，我们可以通过再次尝试来优雅地恢复。正如谚语所说：“如果一开始你没有成功，就用指数增长的等待时间重试操作。”
- en: '*Handle with retry (src/allocation/service_layer/messagebus.py)*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*带重试的处理（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_commands_and_command_handler_CO6-1)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_commands_and_command_handler_CO6-1)'
- en: Tenacity is a Python library that implements common patterns for retrying.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Tenacity是一个实现重试常见模式的Python库。
- en: '[![2](Images/2.png)](#co_commands_and_command_handler_CO6-2)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_commands_and_command_handler_CO6-2)'
- en: Here we configure our message bus to retry operations up to three times, with
    an exponentially increasing wait between attempts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们配置我们的消息总线，最多重试三次，在尝试之间等待的时间会指数增长。
- en: Retrying operations that might fail is probably the single best way to improve
    the resilience of our software. Again, the Unit of Work and Command Handler patterns
    mean that each attempt starts from a consistent state and won’t leave things half-finished.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 重试可能会失败的操作可能是改善软件弹性的最佳方法。再次，工作单元和命令处理程序模式意味着每次尝试都从一致的状态开始，并且不会留下半成品。
- en: Warning
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: At some point, regardless of `tenacity`, we’ll have to give up trying to process
    the message. Building reliable systems with distributed messages is hard, and
    we have to skim over some tricky bits. There are pointers to more reference materials
    in the [epilogue](afterword01.xhtml#epilogue_1_how_to_get_there_from_here).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，无论`tenacity`如何，我们都必须放弃尝试处理消息。构建可靠的分布式消息系统很困难，我们必须略过一些棘手的部分。在[结语](afterword01.xhtml#epilogue_1_how_to_get_there_from_here)中有更多参考资料的指针。
- en: Wrap-Up
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this book we decided to introduce the concept of events before the concept
    of commands, but other guides often do it the other way around. Making explicit
    the requests that our system can respond to by giving them a name and their own
    data structure is quite a fundamental thing to do. You’ll sometimes see people
    use the name *Command Handler* pattern to describe what we’re doing with Events,
    Commands, and Message Bus.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们决定在介绍命令的概念之前先介绍事件的概念，但其他指南通常是相反的。通过为系统可以响应的请求命名并为它们提供自己的数据结构，是一件非常基本的事情。有时你会看到人们使用“命令处理程序”模式来描述我们在事件、命令和消息总线中所做的事情。
- en: '[Table 10-2](#chapter_10_commands_and_events_tradeoffs) discusses some of the
    things you should think about before you jump on board.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[表10-2](#chapter_10_commands_and_events_tradeoffs)讨论了在你加入之前应该考虑的一些事情。'
- en: 'Table 10-2\. Splitting commands and events: the trade-offs'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 表10-2。分割命令和事件：权衡利弊
- en: '| Pros | Cons |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 缺点 |'
- en: '| --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Treating commands and events differently helps us understand which things have
    to succeed and which things we can tidy up later.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将命令和事件区分对待有助于我们理解哪些事情必须成功，哪些事情可以稍后整理。
- en: '`CreateBatch` is definitely a less confusing name than `BatchCreated`. We are
    being explicit about the intent of our users, and explicit is better than implicit,
    right?'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateBatch`绝对比`BatchCreated`更清晰。我们明确了用户的意图，而明确比隐含更好，对吧？'
- en: '|'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The semantic differences between commands and events can be subtle. Expect bikeshedding
    arguments over the differences.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令和事件之间的语义差异可能是微妙的。对于这些差异可能会有很多争论。
- en: We’re expressly inviting failure. We know that sometimes things will break,
    and we’re choosing to handle that by making the failures smaller and more isolated.
    This can make the system harder to reason about and requires better monitoring.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们明确地邀请失败。我们知道有时会出现问题，我们选择通过使失败变得更小更隔离来处理这些问题。这可能会使系统更难以理解，并需要更好的监控。
- en: '|'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: In [Chapter 11](ch11.xhtml#chapter_11_external_events) we’ll talk about using
    events as an integration pattern.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](ch11.xhtml#chapter_11_external_events)中，我们将讨论使用事件作为集成模式。

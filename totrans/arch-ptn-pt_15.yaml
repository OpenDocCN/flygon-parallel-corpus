- en: Chapter 12\. Command-Query Responsibility Segregation (CQRS)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to start with a fairly uncontroversial insight:
    reads (queries) and writes (commands) are different, so they should be treated
    differently (or have their responsibilities segregated, if you will). Then we’re
    going to push that insight as far as we can.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: If you’re anything like Harry, this will all seem extreme at first, but hopefully
    we can make the argument that it’s not *totally* unreasonable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-1](#maps_chapter_11) shows where we might end up.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The code for this chapter is in the chapter_12_cqrs branch [on GitHub](https://oreil.ly/YbWGT).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, though, why bother?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![apwp 1201](Images/apwp_1201.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. Separating reads from writes
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Domain Models Are for Writing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve spent a lot of time in this book talking about how to build software that
    enforces the rules of our domain. These rules, or constraints, will be different
    for every application, and they make up the interesting core of our systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we’ve set explicit constraints like “You can’t allocate more stock
    than is available,” as well as implicit constraints like “Each order line is allocated
    to a single batch.”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'We wrote down these rules as unit tests at the beginning of the book:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '*Our basic domain tests (tests/unit/test_batches.py)*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To apply these rules properly, we needed to ensure that operations were consistent,
    and so we introduced patterns like *Unit of Work* and *Aggregate* that help us
    commit small chunks of work.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: To communicate changes between those small chunks, we introduced the Domain
    Events pattern so we can write rules like “When stock is damaged or lost, adjust
    the available quantity on the batch, and reallocate orders if necessary.”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: All of this complexity exists so we can enforce rules when we change the state
    of our system. We’ve built a flexible set of tools for writing data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: What about reads, though?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Most Users Aren’t Going to Buy Your Furniture
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At MADE.com, we have a system very like the allocation service. In a busy day,
    we might process one hundred orders in an hour, and we have a big gnarly system
    for allocating stock to those orders.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: In that same busy day, though, we might have one hundred product views per *second*.
    Each time somebody visits a product page, or a product listing page, we need to
    figure out whether the product is still in stock and how long it will take us
    to deliver it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The *domain* is the same—we’re concerned with batches of stock, and their arrival
    date, and the amount that’s still available—but the access pattern is very different.
    For example, our customers won’t notice if the query is a few seconds out of date,
    but if our allocate service is inconsistent, we’ll make a mess of their orders.
    We can take advantage of this difference by making our reads *eventually consistent*
    in order to make them perform better.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of these requirements as forming two halves of a system: the read
    side and the write side, shown in [Table 12-1](#read_and_write_table).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: For the write side, our fancy domain architectural patterns help us to evolve
    our system over time, but the complexity we’ve built so far doesn’t buy anything
    for reading data. The service layer, the unit of work, and the clever domain model
    are just bloat.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Table 12-1\. Read versus write
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Read side | Write side |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| Behavior | Simple read | Complex business logic |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| Cacheability | Highly cacheable | Uncacheable |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| Consistency | Can be stale | Must be transactionally consistent |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: Post/Redirect/Get and CQS
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do web development, you’re probably familiar with the Post/Redirect/Get
    pattern. In this technique, a web endpoint accepts an HTTP POST and responds with
    a redirect to see the result. For example, we might accept a POST to */batches*
    to create a new batch and redirect the user to */batches/123* to see their newly
    created batch.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: This approach fixes the problems that arise when users refresh the results page
    in their browser or try to bookmark a results page. In the case of a refresh,
    it can lead to our users double-submitting data and thus buying two sofas when
    they needed only one. In the case of a bookmark, our hapless customers will end
    up with a broken page when they try to GET a POST endpoint.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Both these problems happen because we’re returning data in response to a write
    operation. Post/Redirect/Get sidesteps the issue by separating the read and write
    phases of our operation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'This technique is a simple example of command-query separation (CQS). In CQS
    we follow one simple rule: functions should either modify state or answer questions,
    but never both. This makes software easier to reason about: we should always be
    able to ask, “Are the lights on?” without flicking the light switch.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When building APIs, we can apply the same design technique by returning a 201
    Created, or a 202 Accepted, with a Location header containing the URI of our new
    resources. What’s important here isn’t the status code we use but the logical
    separation of work into a write phase and a query phase.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'As you’ll see, we can use the CQS principle to make our systems faster and
    more scalable, but first, let’s fix the CQS violation in our existing code. Ages
    ago, we introduced an `allocate` endpoint that takes an order and calls our service
    layer to allocate some stock. At the end of the call, we return a 200 OK and the
    batch ID. That’s led to some ugly design flaws so that we can get the data we
    need. Let’s change it to return a simple OK message and instead provide a new
    read-only endpoint to retrieve allocation state:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '*API test does a GET after the POST (tests/e2e/test_api.py)*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: OK, what might the Flask app look like?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '*Endpoint for viewing allocations (src/allocation/entrypoints/flask_app.py)*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_command_query_responsibility_segregation__cqrs__CO1-1)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: All right, a *views.py*, fair enough; we can keep read-only stuff in there,
    and it’ll be a real *views.py*, not like Django’s, something that knows how to
    build read-only views of our data…
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Hold On to Your Lunch, Folks
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hmm, so we can probably just add a list method to our existing repository object:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '*Views do…raw SQL? (src/allocation/views.py)*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Excuse me? Raw SQL?*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: If you’re anything like Harry encountering this pattern for the first time,
    you’ll be wondering what on earth Bob has been smoking. We’re hand-rolling our
    own SQL now, and converting database rows directly to dicts? After all the effort
    we put into building a nice domain model? And what about the Repository pattern?
    Isn’t that meant to be our abstraction around the database? Why don’t we reuse
    that?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Well, let’s explore that seemingly simpler alternative first, and see what it
    looks like in practice.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: We’ll still keep our view in a separate *views.py* module; enforcing a clear
    distinction between reads and writes in your application is still a good idea.
    We apply command-query separation, and it’s easy to see which code modifies state
    (the event handlers) and which code just retrieves read-only state (the views).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Splitting out your read-only views from your state-modifying command and event
    handlers is probably a good idea, even if you don’t want to go to full-blown CQRS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Testing CQRS Views
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into exploring various options, let’s talk about testing. Whichever
    approaches you decide to go for, you’re probably going to need at least one integration
    test. Something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '*An integration test for a view (tests/integration/test_views.py)*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_command_query_responsibility_segregation__cqrs__CO2-1)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: We do the setup for the integration test by using the public entrypoint to our
    application, the message bus. That keeps our tests decoupled from any implementation/infrastructure
    details about how things get stored.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '“Obvious” Alternative 1: Using the Existing Repository'
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How about adding a helper method to our `products` repository?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '*A simple view that uses the repository (src/allocation/views.py)*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_command_query_responsibility_segregation__cqrs__CO3-1)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Our repository returns `Product` objects, and we need to find all the products
    for the SKUs in a given order, so we’ll build a new helper method called `.for_order()`
    on the repository.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_command_query_responsibility_segregation__cqrs__CO3-2)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Now we have products but we actually want batch references, so we get all the
    possible batches with a list comprehension.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_command_query_responsibility_segregation__cqrs__CO3-3)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: We filter *again* to get just the batches for our specific order. That, in turn,
    relies on our `Batch` objects being able to tell us which order IDs it has allocated.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'We implement that last using a `.orderid` property:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '*An arguably unnecessary property on our model (src/allocation/domain/model.py)*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can start to see that reusing our existing repository and domain model classes
    is not as straightforward as you might have assumed. We’ve had to add new helper
    methods to both, and we’re doing a bunch of looping and filtering in Python, which
    is work that would be done much more efficiently by the database.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: So yes, on the plus side we’re reusing our existing abstractions, but on the
    downside, it all feels quite clunky.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Your Domain Model Is Not Optimized for Read Operations
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we’re seeing here are the effects of having a domain model that is designed
    primarily for write operations, while our requirements for reads are often conceptually
    quite different.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the chin-stroking-architect’s justification for CQRS. As we’ve said
    before, a domain model is not a data model—we’re trying to capture the way the
    business works: workflow, rules around state changes, messages exchanged; concerns
    about how the system reacts to external events and user input. *Most of this stuff
    is totally irrelevant for read-only operations*.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This justification for CQRS is related to the justification for the Domain Model
    pattern. If you’re building a simple CRUD app, reads and writes are going to be
    closely related, so you don’t need a domain model or CQRS. But the more complex
    your domain, the more likely you are to need both.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: To make a facile point, your domain classes will have multiple methods for modifying
    state, and you won’t need any of them for read-only operations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: As the complexity of your domain model grows, you will find yourself making
    more and more choices about how to structure that model, which make it more and
    more awkward to use for read operations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '“Obvious” Alternative 2: Using the ORM'
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may be thinking, OK, if our repository is clunky, and working with `Products`
    is clunky, then I can at least use my ORM and work with `Batches`. That’s what
    it’s for!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '*A simple view that uses the ORM (src/allocation/views.py)*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: But is that *actually* any easier to write or understand than the raw SQL version
    from the code example in [“Hold On to Your Lunch, Folks”](#hold-on-ch12)? It may
    not look too bad up there, but we can tell you it took several attempts, and plenty
    of digging through the SQLAlchemy docs. SQL is just SQL.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: But the ORM can also expose us to performance problems.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: SELECT N+1 and Other Performance Considerations
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The so-called [`SELECT N+1`](https://oreil.ly/OkBOS) problem is a common performance
    problem with ORMs: when retrieving a list of objects, your ORM will often perform
    an initial query to, say, get all the IDs of the objects it needs, and then issue
    individual queries for each object to retrieve their attributes. This is especially
    likely if there are any foreign-key relationships on your objects.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In all fairness, we should say that SQLAlchemy is quite good at avoiding the
    `SELECT N+1` problem. It doesn’t display it in the preceding example, and you
    can request [eager loading](https://oreil.ly/XKDDm) explicitly to avoid it when
    dealing with joined objects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Beyond `SELECT N+1`, you may have other reasons for wanting to decouple the
    way you persist state changes from the way that you retrieve current state. A
    set of fully normalized relational tables is a good way to make sure that write
    operations never cause data corruption. But retrieving data using lots of joins
    can be slow. It’s common in such cases to add some denormalized views, build read
    replicas, or even add caching layers.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Time to Completely Jump the Shark
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On that note: have we convinced you that our raw SQL version isn’t so weird
    as it first seemed? Perhaps we were exaggerating for effect? Just you wait.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: So, reasonable or not, that hardcoded SQL query is pretty ugly, right? What
    if we made it nicer…
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '*A much nicer query (src/allocation/views.py)*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: …by *keeping a totally separate, denormalized data store for our view model*?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '*Hee hee hee, no foreign keys, just strings, YOLO (src/allocation/adapters/orm.py)*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: OK, nicer-looking SQL queries wouldn’t be a justification for anything really,
    but building a denormalized copy of your data that’s optimized for read operations
    isn’t uncommon, once you’ve reached the limits of what you can do with indexes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Even with well-tuned indexes, a relational database uses a lot of CPU to perform
    joins. The fastest queries will always be `SELECT * from *mytable* WHERE *key*
    = :*value*`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: More than raw speed, though, this approach buys us scale. When we’re writing
    data to a relational database, we need to make sure that we get a lock over the
    rows we’re changing so we don’t run into consistency problems.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: If multiple clients are changing data at the same time, we’ll have weird race
    conditions. When we’re *reading* data, though, there’s no limit to the number
    of clients that can concurrently execute. For this reason, read-only stores can
    be horizontally scaled out.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Because read replicas can be inconsistent, there’s no limit to how many we can
    have. If you’re struggling to scale a system with a complex data store, ask whether
    you could build a simpler read model.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the read model up to date is the challenge! Database views (materialized
    or otherwise) and triggers are a common solution, but that limits you to your
    database. We’d like to show you how to reuse our event-driven architecture instead.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Updating a Read Model Table Using an Event Handler
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We add a second handler to the `Allocated` event:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '*Allocated event gets a new handler (src/allocation/service_layer/messagebus.py)*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here’s what our update-view-model code looks like:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '*Update on allocation (src/allocation/service_layer/handlers.py)*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Believe it or not, that will pretty much work! *And it will work against the
    exact same integration tests as the rest of our options.*
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, you’ll also need to handle `Deallocated`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '*A second listener for read model updates*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Figure 12-2](#read_model_sequence_diagram) shows the flow across the two requests.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![apwp 1202](Images/apwp_1202.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. Sequence diagram for read model
  id: totrans-124
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In [Figure 12-2](#read_model_sequence_diagram), you can see two transactions
    in the POST/write operation, one to update the write model and one to update the
    read model, which the GET/read operation can use.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Changing Our Read Model Implementation Is Easy
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see the flexibility that our event-driven model buys us in action, by
    seeing what happens if we ever decide we want to implement a read model by using
    a totally separate storage engine, Redis.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Just watch:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '*Handlers update a Redis read model (src/allocation/service_layer/handlers.py)*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The helpers in our Redis module are one-liners:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '*Redis read model read and update (src/allocation/adapters/redis_eventpublisher.py)*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: (Maybe the name *redis_eventpublisher.py* is a misnomer now, but you get the
    idea.)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'And the view itself changes very slightly to adapt to its new backend:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 而且视图本身也略有变化，以适应其新的后端：
- en: '*View adapted to Redis (src/allocation/views.py)*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*适应Redis的视图（src/allocation/views.py）*'
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And the *exact same* integration tests that we had before still pass, because
    they are written at a level of abstraction that’s decoupled from the implementation:
    setup puts messages on the message bus, and the assertions are against our view.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，我们之前编写的*完全相同*的集成测试仍然通过，因为它们是以与实现解耦的抽象级别编写的：设置将消息放入消息总线，断言针对我们的视图。
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Event handlers are a great way to manage updates to a read model, if you decide
    you need one. They also make it easy to change the implementation of that read
    model at a later date.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定需要，事件处理程序是管理对读模型的更新的好方法。它们还可以轻松地在以后更改该读模型的实现。
- en: Wrap-Up
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: '[Table 12-2](#view_model_tradeoffs) proposes some pros and cons for each of
    our options.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[表12-2](#view_model_tradeoffs)提出了我们各种选项的一些利弊。'
- en: As it happens, the allocation service at MADE.com does use “full-blown” CQRS,
    with a read model stored in Redis, and even a second layer of cache provided by
    Varnish. But its use cases are quite a bit different from what we’ve shown here.
    For the kind of allocation service we’re building, it seems unlikely that you’d
    need to use a separate read model and event handlers for updating it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，MADE.com的分配服务确实使用了“全面的”CQRS，在Redis中存储了一个读模型，甚至还提供了由Varnish提供的第二层缓存。但其用例与我们在这里展示的情况相当不同。对于我们正在构建的分配服务，似乎不太可能需要使用单独的读模型和事件处理程序进行更新。
- en: But as your domain model becomes richer and more complex, a simplified read
    model become ever more compelling.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 但随着您的领域模型变得更加丰富和复杂，简化的读模型变得更加引人注目。
- en: Table 12-2\. Trade-offs of various view model options
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 表12-2。各种视图模型选项的权衡
- en: '| Option | Pros | Cons |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 优点 | 缺点 |'
- en: '| --- | --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Just use repositories | Simple, consistent approach. | Expect performance
    issues with complex query patterns. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 只使用存储库 | 简单、一致的方法。 | 预期在复杂的查询模式中出现性能问题。 |'
- en: '| Use custom queries with your ORM | Allows reuse of DB configuration and model
    definitions. | Adds another query language with its own quirks and syntax. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 使用ORM自定义查询 | 允许重用DB配置和模型定义。 | 添加另一种具有自己怪癖和语法的查询语言。 |'
- en: '| Use hand-rolled SQL | Offers fine control over performance with a standard
    query syntax. | Changes to DB schema have to be made to your hand-rolled queries
    *and* your ORM definitions. Highly normalized schemas may still have performance
    limitations. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 使用手动编写的SQL | 通过标准查询语法可以对性能进行精细控制。 | 必须对手动编写的查询和ORM定义进行数据库模式更改。高度规范化的模式可能仍然存在性能限制。
    |'
- en: '| Create separate read stores with events | Read-only copies are easy to scale
    out. Views can be constructed when data changes so that queries are as simple
    as possible. | Complex technique. Harry will be forever suspicious of your tastes
    and motives. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 使用事件创建单独的读取存储 | 只读副本易于扩展。在数据更改时可以构建视图，以使查询尽可能简单。 | 复杂的技术。哈里将永远怀疑你的品味和动机。
    |'
- en: Often, your read operations will be acting on the same conceptual objects as
    your write model, so using the ORM, adding some read methods to your repositories,
    and using domain model classes for your read operations is *just fine*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您的读操作将作用于与写模型相同的概念对象，因此可以使用ORM，在存储库中添加一些读取方法，并对读取操作使用领域模型类*非常好*。
- en: In our book example, the read operations act on quite different conceptual entities
    to our domain model. The allocation service thinks in terms of `Batches` for a
    single SKU, but users care about allocations for a whole order, with multiple
    SKUs, so using the ORM ends up being a little awkward. We’d be quite tempted to
    go with the raw-SQL view we showed right at the beginning of the chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的书例中，读操作涉及的概念实体与我们的领域模型非常不同。分配服务以单个SKU的“批次”为单位思考，但用户关心的是整个订单的分配，包括多个SKU，因此使用ORM最终有点尴尬。我们可能会倾向于选择我们在本章开头展示的原始SQL视图。
- en: On that note, let’s sally forth into our final chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，让我们继续进入我们的最后一章。

- en: Chapter 13\. Dependency Injection (and Bootstrapping)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency injection (DI) is regarded with suspicion in the Python world. And
    we’ve managed *just fine* without it so far in the example code for this book!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore some of the pain points in our code that lead
    us to consider using DI, and we’ll present some options for how to do it, leaving
    it to you to pick which you think is most Pythonic.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also add a new component to our architecture called *bootstrap.py*; it
    will be in charge of dependency injection, as well as some other initialization
    stuff that we often need. We’ll explain why this sort of thing is called a *composition
    root* in OO languages, and why *bootstrap script* is just fine for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 13-1](#bootstrap_chapter_before_diagram) shows what our app looks like
    without a bootstrapper: the entrypoints do a lot of initialization and passing
    around of our main dependency, the UoW.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you haven’t already, it’s worth reading [Chapter 3](ch03.xhtml#chapter_03_abstractions)
    before continuing with this chapter, particularly the discussion of functional
    versus object-oriented dependency management.
  prefs: []
  type: TYPE_NORMAL
- en: '![apwp 1301](Images/apwp_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-1\. Without bootstrap: entrypoints do a lot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The code for this chapter is in the chapter_13_dependency_injection branch
    [on GitHub](https://oreil.ly/-B7e6):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 13-2](#bootstrap_chapter_after_diagram) shows our bootstrapper taking
    over those responsibilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '![apwp 1302](Images/apwp_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. Bootstrap takes care of all that in one place
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Implicit Versus Explicit Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on your particular brain type, you may have a slight feeling of unease
    at the back of your mind at this point. Let’s bring it out into the open. We’ve
    shown you two ways of managing dependencies and testing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our database dependency, we’ve built a careful framework of explicit dependencies
    and easy options for overriding them in tests. Our main handler functions declare
    an explicit dependency on the UoW:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Our handlers have an explicit dependency on the UoW (src/allocation/service_layer/handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And that makes it easy to swap in a fake UoW in our service-layer tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Service-layer tests against a fake UoW: (tests/unit/test_services.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The UoW itself declares an explicit dependency on the session factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The UoW depends on a session factory (src/allocation/service_layer/unit_of_work.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We take advantage of it in our integration tests to be able to sometimes use
    SQLite instead of Postgres:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Integration tests against a different DB (tests/integration/test_uow.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Integration tests swap out the default Postgres `session_factory` for a SQLite
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Aren’t Explicit Dependencies Totally Weird and Java-y?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’re used to the way things normally happen in Python, you’ll be thinking
    all this is a bit weird. The standard way to do things is to declare our dependency
    implicitly by simply importing it, and then if we ever need to change it for tests,
    we can monkeypatch, as is Right and True in dynamic languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Email sending as a normal import-based dependency (src/allocation/service_layer/handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Hardcoded import
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calls specific email sender directly
  prefs: []
  type: TYPE_NORMAL
- en: 'Why pollute our application code with unnecessary arguments just for the sake
    of our tests? `mock.patch` makes monkeypatching nice and easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '*mock dot patch, thank you Michael Foord (tests/unit/test_handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The trouble is that we’ve made it look easy because our toy example doesn’t
    send real email (`email.send_mail` just does a `print`), but in real life, you’d
    end up having to call `mock.patch` for *every single test* that might cause an
    out-of-stock notification. If you’ve worked on codebases with lots of mocks used
    to prevent unwanted side effects, you’ll know how annoying that mocky boilerplate
    gets.
  prefs: []
  type: TYPE_NORMAL
- en: And you’ll know that mocks tightly couple us to the implementation. By choosing
    to monkeypatch `email.send_mail`, we are tied to doing `import email`, and if
    we ever want to do `from email import send_mail`, a trivial refactor, we’d have
    to change all our mocks.
  prefs: []
  type: TYPE_NORMAL
- en: So it’s a trade-off. Yes, declaring explicit dependencies is unnecessary, strictly
    speaking, and using them would make our application code marginally more complex.
    But in return, we’d get tests that are easier to write and manage.
  prefs: []
  type: TYPE_NORMAL
- en: 'On top of that, declaring an explicit dependency is an example of the dependency
    inversion principle—rather than having an (implicit) dependency on a *specific*
    detail, we have an (explicit) dependency on an *abstraction*:'
  prefs: []
  type: TYPE_NORMAL
- en: Explicit is better than implicit.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: The Zen of Python
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The explicit dependency is more abstract (src/allocation/service_layer/handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'But if we do change to declaring all these dependencies explicitly, who will
    inject them, and how? So far, we’ve really been dealing with only passing the
    UoW around: our tests use `FakeUnitOfWork`, while Flask and Redis eventconsumer
    entrypoints use the real UoW, and the message bus passes them onto our command
    handlers. If we add real and fake email classes, who will create them and pass
    them on?'
  prefs: []
  type: TYPE_NORMAL
- en: That’s extra (duplicated) cruft for Flask, Redis, and our tests. Moreover, putting
    all the responsibility for passing dependencies to the right handler onto the
    message bus feels like a violation of the SRP.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we’ll reach for a pattern called *Composition Root* (a bootstrap script
    to you and me),^([1](ch13.xhtml#idm45714881770184)) and we’ll do a bit of “manual
    DI” (dependency injection without a framework). See [Figure 13-3](#bootstrap_new_image).^([2](ch13.xhtml#idm45714881767896))
  prefs: []
  type: TYPE_NORMAL
- en: '![apwp 1303](Images/apwp_1303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-3\. Bootstrapper between entrypoints and message bus
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Preparing Handlers: Manual DI with Closures and Partials'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One way to turn a function with dependencies into one that’s ready to be called
    later with those dependencies *already injected* is to use closures or partial
    functions to compose the function with its dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Examples of DI using closures or partial functions*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between closures (lambdas or named functions) and `functools.partial`
    is that the former use [late binding of variables](https://docs.python-guide.org/writing/gotchas/#late-binding-closures),
    which can be a source of confusion if any of the dependencies are mutable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the same pattern again for the `send_out_of_stock_notification()` handler,
    which has different dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Another closure and partial functions example*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: An Alternative Using Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Closures and partial functions will feel familiar to people who’ve done a bit
    of functional programming. Here’s an alternative using classes, which may appeal
    to others. It requires rewriting all our handler functions as classes, though:'
  prefs: []
  type: TYPE_NORMAL
- en: '*DI using classes*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The class is designed to produce a callable function, so it has a `*call*` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: But we use the `init` to declare the dependencies it requires. This sort of
    thing will feel familiar if you’ve ever made class-based descriptors, or a class-based
    context manager that takes arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Use whichever you and your team feel more comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: A Bootstrap Script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want our bootstrap script to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare default dependencies but allow us to override them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the “init” stuff that we need to get our app started
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inject all the dependencies into our handlers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give us back the core object for our app, the message bus
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s a first cut:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A bootstrap function (src/allocation/bootstrap.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`orm.start_mappers()` is our example of initialization work that needs to be
    done once at the beginning of an app. We also see things like setting up the `logging`
    module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the argument defaults to define what the normal/production defaults
    are. It’s nice to have them in a single place, but sometimes dependencies have
    some side effects at construction time, in which case you might prefer to default
    them to `None` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We build up our injected versions of the handler mappings by using a function
    called `inject_dependencies()`, which we’ll show next.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_dependency_injection__and_bootstrapping__CO5-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We return a configured message bus ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we inject dependencies into a handler function by inspecting it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*DI by inspecting function signatures (src/allocation/bootstrap.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We inspect our command/event handler’s arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We match them by name to our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO6-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We inject them as kwargs to produce a partial.
  prefs: []
  type: TYPE_NORMAL
- en: Message Bus Is Given Handlers at Runtime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our message bus will no longer be static; it needs to have the already-injected
    handlers given to it. So we turn it from being a module into a configurable class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*MessageBus as a class (src/allocation/service_layer/messagebus.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The message bus becomes a class…
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: …which is given its already-dependency-injected handlers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO7-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The main `handle()` function is substantially the same, with just a few attributes
    and methods moved onto `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_dependency_injection__and_bootstrapping__CO7-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Using `self.queue` like this is not thread-safe, which might be a problem if
    you’re using threads, because the bus instance is global in the Flask app context
    as we’ve written it. Just something to watch out for.
  prefs: []
  type: TYPE_NORMAL
- en: What else changes in the bus?
  prefs: []
  type: TYPE_NORMAL
- en: '*Event and command handler logic stays the same (src/allocation/service_layer/messagebus.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`handle_event` and `handle_command` are substantially the same, but instead
    of indexing into a static `EVENT_HANDLERS` or `COMMAND_HANDLERS` dict, they use
    the versions on `self`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of passing a UoW into the handler, we expect the handlers to already
    have all their dependencies, so all they need is a single argument, the specific
    event or command.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap in Our Entrypoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our application’s entrypoints, we now just call `bootstrap.bootstrap()`
    and get a message bus that’s ready to go, rather than configuring a UoW and the
    rest of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Flask calls bootstrap (src/allocation/entrypoints/flask_app.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We no longer need to call `start_orm()`; the bootstrap script’s initialization
    stages will do that.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We no longer need to explicitly build a particular type of UoW; the bootstrap
    script defaults take care of it.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: And our message bus is now a specific instance rather than the global module.^([3](ch13.xhtml#idm45714880379080))
  prefs: []
  type: TYPE_NORMAL
- en: Initializing DI in Our Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In tests, we can use `bootstrap.bootstrap()` with overridden defaults to get
    a custom message bus. Here’s an example in an integration test:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Overriding bootstrap defaults (tests/integration/test_views.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We do still want to start the ORM…
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: …because we’re going to use a real UoW, albeit with an in-memory database.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: But we don’t need to send email or publish, so we make those noops.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our unit tests, in contrast, we can reuse our `FakeUnitOfWork`:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bootstrap in unit test (tests/unit/test_handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: No need to start the ORM…
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: …because the fake UoW doesn’t use one.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO11-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We want to fake out our email and Redis adapters too.
  prefs: []
  type: TYPE_NORMAL
- en: So that gets rid of a little duplication, and we’ve moved a bunch of setup and
    sensible defaults into a single place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building an Adapter “Properly”: A Worked Example'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To really get a feel for how it all works, let’s work through an example of
    how you might “properly” build an adapter and do dependency injection for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, we have two types of dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Two types of dependencies (src/allocation/service_layer/messagebus.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The UoW has an abstract base class. This is the heavyweight option for declaring
    and managing your external dependency. We’d use this for the case when the dependency
    is relatively complex.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Our email sender and pub/sub publisher are defined as functions. This works
    just fine for simple dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the things we find ourselves injecting at work:'
  prefs: []
  type: TYPE_NORMAL
- en: An S3 filesystem client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A key/value store client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `requests` session object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most of these will have more-complex APIs that you can’t capture as a single
    function: read and write, GET and POST, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Even though it’s simple, let’s use `send_mail` as an example to talk through
    how you might define a more complex dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Define the Abstract and Concrete Implementations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll imagine a more generic notifications API. Could be email, could be SMS,
    could be Slack posts one day.
  prefs: []
  type: TYPE_NORMAL
- en: '*An ABC and a concrete implementation (src/allocation/adapters/notifications.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We change the dependency in the bootstrap script:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Notifications in message bus (src/allocation/bootstrap.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Make a Fake Version for Your Tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We work through and define a fake version for unit testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Fake notifications (tests/unit/test_handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And we use it in our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Tests change slightly (tests/unit/test_handlers.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Figure Out How to Integration Test the Real Thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we test the real thing, usually with an end-to-end or integration test.
    We’ve used [MailHog](https://github.com/mailhog/MailHog) as a real-ish email server
    for our Docker dev environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Docker-compose config with real fake email server (docker-compose.yml)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In our integration tests, we use the real `EmailNotifications` class, talking
    to the MailHog server in the Docker cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Integration test for email (tests/integration/test_email.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_dependency_injection__and_bootstrapping__CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use our bootstrapper to build a message bus that talks to the real notifications
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_dependency_injection__and_bootstrapping__CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We figure out how to fetch emails from our “real” email server.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_dependency_injection__and_bootstrapping__CO13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the bus to do our test setup.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_dependency_injection__and_bootstrapping__CO13-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Against all the odds, this actually worked, pretty much at the first go!
  prefs: []
  type: TYPE_NORMAL
- en: And that’s it really.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap-Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have more than one adapter, you’ll start to feel a lot of pain from
    passing dependencies around manually, unless you do some kind of *dependency injection.*
  prefs: []
  type: TYPE_NORMAL
- en: Setting up dependency injection is just one of many typical setup/initialization
    activities that you need to do just once when starting your app. Putting this
    all together into a *bootstrap script* is often a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap script is also good as a place to provide sensible default configuration
    for your adapters, and as a single place to override those adapters with fakes
    for your tests.
  prefs: []
  type: TYPE_NORMAL
- en: A dependency injection framework can be useful if you find yourself needing
    to do DI at multiple levels—if you have chained dependencies of components that
    all need DI, for example.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also presented a worked example of changing an implicit/simple
    dependency into a “proper” adapter, factoring out an ABC, defining its real and
    fake implementations, and thinking through integration testing.
  prefs: []
  type: TYPE_NORMAL
- en: These were the last patterns we wanted to cover, which brings us to the end
    of [Part II](part02.xhtml#part2). In [the epilogue](afterword01.xhtml#epilogue_1_how_to_get_there_from_here),
    we’ll try to give you some pointers for applying these techniques in the Real
    World^(TM).
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch13.xhtml#idm45714881770184-marker)) Because Python is not a “pure” OO
    language, Python developers aren’t necessarily used to the concept of needing
    to *compose* a set of objects into a working application. We just pick our entrypoint
    and run code from top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch13.xhtml#idm45714881767896-marker)) Mark Seemann calls this [*Pure DI*](https://oreil.ly/iGpDL)
    or sometimes *Vanilla DI*.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch13.xhtml#idm45714880379080-marker)) However, it’s still a global in
    the `flask_app` module scope, if that makes sense. This may cause problems if
    you ever find yourself wanting to test your Flask app in-process by using the
    Flask Test Client instead of using Docker as we do. It’s worth researching [Flask
    app factories](https://oreil.ly/_a6Kl) if you get into this.
  prefs: []
  type: TYPE_NORMAL

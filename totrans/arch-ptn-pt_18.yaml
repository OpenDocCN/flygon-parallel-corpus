- en: Appendix A. Summary Diagram and Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s what our architecture looks like by the end of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![diagram showing all components: flask+eventconsumer, service layer, adapters,
    domain etc](Images/apwp_aa01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Table A-1](#ds1_table) recaps each pattern and what it does.'
  prefs: []
  type: TYPE_NORMAL
- en: Table A-1\. The components of our architecture and what they all do
  prefs: []
  type: TYPE_NORMAL
- en: '| Layer | Component | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**Domain**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Defines the business logic.*'
  prefs: []
  type: TYPE_NORMAL
- en: '| Entity | A domain object whose attributes may change but that has a recognizable
    identity over time. |'
  prefs: []
  type: TYPE_TB
- en: '| Value object | An immutable domain object whose attributes entirely define
    it. It is fungible with other identical objects. |'
  prefs: []
  type: TYPE_TB
- en: '| Aggregate | Cluster of associated objects that we treat as a unit for the
    purpose of data changes. Defines and enforces a consistency boundary. |'
  prefs: []
  type: TYPE_TB
- en: '| Event | Represents something that happened. |'
  prefs: []
  type: TYPE_TB
- en: '| Command | Represents a job the system should perform. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service Layer**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Defines the jobs the system should perform and orchestrates different components.*'
  prefs: []
  type: TYPE_NORMAL
- en: '| Handler | Receives a command or an event and performs what needs to happen.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Unit of work | Abstraction around data integrity. Each unit of work represents
    an atomic update. Makes repositories available. Tracks new events on retrieved
    aggregates. |'
  prefs: []
  type: TYPE_TB
- en: '| Message bus (internal) | Handles commands and events by routing them to the
    appropriate handler. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adapters** (Secondary)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Concrete implementations of an interface that goes from our system to the
    outside world (I/O).*'
  prefs: []
  type: TYPE_NORMAL
- en: '| Repository | Abstraction around persistent storage. Each aggregate has its
    own repository. |'
  prefs: []
  type: TYPE_TB
- en: '| Event publisher | Pushes events onto the external message bus. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**Entrypoints** (Primary adapters)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Translate external inputs into calls into the service layer.*'
  prefs: []
  type: TYPE_NORMAL
- en: '| Web | Receives web requests and translates them into commands, passing them
    to the internal message bus. |'
  prefs: []
  type: TYPE_TB
- en: '| Event consumer | Reads events from the external message bus and translates
    them into commands, passing them to the internal message bus. |'
  prefs: []
  type: TYPE_TB
- en: '| N/A | External message bus (message broker) | A piece of infrastructure that
    different services use to intercommunicate, via events. |'
  prefs: []
  type: TYPE_TB

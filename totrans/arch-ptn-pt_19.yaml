- en: Appendix B. A Template Project Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Around [Chapter 4](ch04.xhtml#chapter_04_service_layer), we moved from just
    having everything in one folder to a more structured tree, and we thought it might
    be of interest to outline the moving parts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The code for this appendix is in the appendix_project_structure branch [on
    GitHub](https://oreil.ly/1rDRC):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The basic folder structure looks like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '*Project tree*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_a_template_project_structure_CO1-1)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Our *docker-compose.yml* and our *Dockerfile* are the main bits of configuration
    for the containers that run our app, and they can also run the tests (for CI).
    A more complex project might have several Dockerfiles, although we’ve found that
    minimizing the number of images is usually a good idea.^([1](app02.xhtml#idm45714878530264))
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_a_template_project_structure_CO1-2)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'A *Makefile* provides the entrypoint for all the typical commands a developer
    (or a CI server) might want to run during their normal workflow: `make build`,
    `make test`, and so on.^([2](app02.xhtml#idm45714878525288)) This is optional.
    You could just use `docker-compose` and `pytest` directly, but if nothing else,
    it’s nice to have all the “common commands” in a list somewhere, and unlike documentation,
    a Makefile is code so it has less tendency to become out of date.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_a_template_project_structure_CO1-4)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: All the source code for our app, including the domain model, the Flask app,
    and infrastructure code, lives in a Python package inside *src*,^([3](app02.xhtml#idm45714878490136))
    which we install using `pip install -e` and the *setup.py* file. This makes imports
    easy. Currently, the structure within this module is totally flat, but for a more
    complex project, you’d expect to grow a folder hierarchy that includes *domain_model/*,
    *infrastructure/*, *services/*, and *api/*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_a_template_project_structure_CO1-6)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Tests live in their own folder. Subfolders distinguish different test types
    and allow you to run them separately. We can keep shared fixtures (*conftest.py*)
    in the main tests folder and nest more specific ones if we wish. This is also
    the place to keep *pytest.ini*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The [pytest docs](https://oreil.ly/QVb9Q) are really good on test layout and
    importability.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a few of these files and concepts in more detail.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Env Vars, 12-Factor, and Config, Inside and Outside Containers
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic problem we’re trying to solve here is that we need different config
    settings for the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Running code or tests directly from your own dev machine, perhaps talking to
    mapped ports from Docker containers
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running on the containers themselves, with “real” ports and hostnames
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different container environments (dev, staging, prod, and so on)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration through environment variables as suggested by the [12-factor manifesto](https://12factor.net/config)
    will solve this problem, but concretely, how do we implement it in our code and
    our containers?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Config.py
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever our application code needs access to some config, it’s going to get
    it from a file called *config.py*. Here are a couple of examples from our app:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '*Sample config functions (src/allocation/config.py)*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_a_template_project_structure_CO2-1)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: We use functions for getting the current config, rather than constants available
    at import time, because that allows client code to modify `os.environ` if it needs
    to.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_a_template_project_structure_CO2-2)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '*config.py* also defines some default settings, designed to work when running
    the code from the developer’s local machine.^([4](app02.xhtml#idm45714878393496))'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: An elegant Python package called [*environ-config*](https://github.com/hynek/environ-config)
    is worth looking at if you get tired of hand-rolling your own environment-based
    config functions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Don’t let this config module become a dumping ground that is full of things
    only vaguely related to config and that is then imported all over the place. Keep
    things immutable and modify them only via environment variables. If you decide
    to use a [bootstrap script](ch13.xhtml#chapter_13_dependency_injection), you can
    make it the only place (other than tests) that config is imported to.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Docker-Compose and Containers Config
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use a lightweight Docker container orchestration tool called *docker-compose*.
    It’s main configuration is via a YAML file (sigh):^([5](app02.xhtml#idm45714878387176))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '*docker-compose config file (docker-compose.yml)*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_a_template_project_structure_CO3-1)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: In the *docker-compose* file, we define the different *services* (containers)
    that we need for our app. Usually one main image contains all our code, and we
    can use it to run our API, our tests, or any other service that needs access to
    the domain model.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_a_template_project_structure_CO3-7)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: You’ll probably have other infrastructure services, including a database. In
    production you might not use containers for this; you might have a cloud provider
    instead, but *docker-compose* gives us a way of producing a similar service for
    dev or CI.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_a_template_project_structure_CO3-2)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The `environment` stanza lets you set the environment variables for your containers,
    the hostnames and ports as seen from inside the Docker cluster. If you have enough
    containers that information starts to be duplicated in these sections, you can
    use `environment_file` instead. We usually call ours *container.env*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_a_template_project_structure_CO3-3)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Inside a cluster, *docker-compose* sets up networking such that containers are
    available to each other via hostnames named after their service name.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_a_template_project_structure_CO3-4)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Pro tip: if you’re mounting volumes to share source folders between your local
    dev machine and the container, the `PYTHONDONTWRITEBYTECODE` environment variable
    tells Python to not write *.pyc* files, and that will save you from having millions
    of root-owned files sprinkled all over your local filesystem, being all annoying
    to delete and causing weird Python compiler errors besides.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_a_template_project_structure_CO3-5)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Mounting our source and test code as `volumes` means we don’t need to rebuild
    our containers every time we make a code change.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](Images/7.png)](#co_a_template_project_structure_CO3-6)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The `ports` section allows us to expose the ports from inside the containers
    to the outside world^([6](app02.xhtml#idm45714878116600))—these correspond to
    the default ports we set in *config.py*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Inside Docker, other containers are available through hostnames named after
    their service name. Outside Docker, they are available on `localhost`, at the
    port defined in the `ports` section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Installing Your Source as a Package
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All our application code (everything except tests, really) lives inside an
    *src* folder:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '*The src folder*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_a_template_project_structure_CO4-1)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Subfolders define top-level module names. You can have multiple if you like.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_a_template_project_structure_CO4-2)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: And *setup.py* is the file you need to make it pip-installable, shown next.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '*pip-installable modules in three lines (src/setup.py)*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That’s all you need. `packages=` specifies the names of subfolders that you
    want to install as top-level modules. The `name` entry is just cosmetic, but it’s
    required. For a package that’s never actually going to hit PyPI, it’ll do fine.^([7](app02.xhtml#idm45714878054648))
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dockerfiles are going to be very project-specific, but here are a few key stages
    you’ll expect to see:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '*Our Dockerfile (Dockerfile)*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_a_template_project_structure_CO5-1)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Installing system-level dependencies
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_a_template_project_structure_CO5-2)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Installing our Python dependencies (you may want to split out your dev from
    prod dependencies; we haven’t here, for simplicity)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 安装我们的Python依赖项（您可能希望将开发和生产依赖项分开；为简单起见，我们没有这样做）
- en: '[![3](Images/3.png)](#co_a_template_project_structure_CO5-3)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_a_template_project_structure_CO5-3)'
- en: Copying and installing our source
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 复制和安装我们的源代码
- en: '[![4](Images/4.png)](#co_a_template_project_structure_CO5-4)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_a_template_project_structure_CO5-4)'
- en: Optionally configuring a default startup command (you’ll probably override this
    a lot from the command line)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可选配置默认启动命令（您可能经常需要从命令行覆盖这个）
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: One thing to note is that we install things in the order of how frequently they
    are likely to change. This allows us to maximize Docker build cache reuse. I can’t
    tell you how much pain and frustration underlies this lesson. For this and many
    more Python Dockerfile improvement tips, check out [“Production-Ready Docker Packaging”](https://pythonspeed.com/docker).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件事是，我们按照它们可能发生变化的频率安装东西的顺序。这使我们能够最大程度地重用Docker构建缓存。我无法告诉你这个教训背后有多少痛苦和挫折。有关此问题以及更多Python
    Dockerfile改进提示，请查看[“可生产使用的Docker打包”](https://pythonspeed.com/docker)。
- en: Tests
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Our tests are kept alongside everything else, as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试与其他所有内容一起保存，如下所示：
- en: '*Tests folder tree*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试文件夹树*'
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Nothing particularly clever here, just some separation of different test types
    that you’re likely to want to run separately, and some files for common fixtures,
    config, and so on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有特别聪明的地方，只是一些不同测试类型的分离，您可能希望单独运行，以及一些用于常见固定装置、配置等的文件。
- en: There’s no *src* folder or *setup.py* in the test folders because we usually
    haven’t needed to make tests pip-installable, but if you have difficulties with
    import paths, you might find it helps.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试文件夹中没有*src*文件夹或*setup.py*，因为我们通常不需要使测试可通过pip安装，但如果您在导入路径方面遇到困难，您可能会发现它有所帮助。
- en: Wrap-Up
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'These are our basic building blocks:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们的基本构建模块：
- en: Source code in an *src* folder, pip-installable using *setup.py*
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*src*文件夹中的源代码，可以使用*setup.py*进行pip安装'
- en: Some Docker config for spinning up a local cluster that mirrors production as
    far as possible
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些Docker配置，用于尽可能模拟生产环境的本地集群
- en: Configuration via environment variables, centralized in a Python file called
    *config.py*, with defaults allowing things to run *outside* containers
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过环境变量进行配置，集中在一个名为*config.py*的Python文件中，其中默认值允许事情在*容器外*运行
- en: A Makefile for useful command-line, um, commands
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于有用的命令行命令的Makefile
- en: We doubt that anyone will end up with *exactly* the same solutions we did, but
    we hope you find some inspiration here.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们怀疑没有人会得到*完全*与我们相同的解决方案，但我们希望你在这里找到一些灵感。
- en: ^([1](app02.xhtml#idm45714878530264-marker)) Splitting out images for production
    and testing is sometimes a good idea, but we’ve tended to find that going further
    and trying to split out different images for different types of application code
    (e.g., Web API versus pub/sub client) usually ends up being more trouble than
    it’s worth; the cost in terms of complexity and longer rebuild/CI times is too
    high. YMMV.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](app02.xhtml#idm45714878530264-marker)) 有时将图像分离用于生产和测试是一个好主意，但我们倾向于发现进一步尝试为不同类型的应用程序代码（例如，Web
    API与发布/订阅客户端）分离不值得麻烦；在复杂性和更长的重建/CI时间方面的成本太高。你的情况可能有所不同。
- en: ^([2](app02.xhtml#idm45714878525288-marker)) A pure-Python alternative to Makefiles
    is [Invoke](http://www.pyinvoke.org), worth checking out if everyone on your team
    knows Python (or at least knows it better than Bash!).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](app02.xhtml#idm45714878525288-marker)) 一个纯Python的Makefile替代方案是[Invoke](http://www.pyinvoke.org)，值得一试，如果你的团队每个人都懂Python（或者至少比Bash更懂）。
- en: ^([3](app02.xhtml#idm45714878490136-marker)) [“Testing and Packaging”](https://hynek.me/articles/testing-packaging)
    by Hynek Schlawack provides more information on *src* folders.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](app02.xhtml#idm45714878490136-marker)) Hynek Schlawack的[“测试和打包”](https://hynek.me/articles/testing-packaging)提供了有关*src*文件夹的更多信息。
- en: ^([4](app02.xhtml#idm45714878393496-marker)) This gives us a local development
    setup that “just works” (as much as possible). You may prefer to fail hard on
    missing environment variables instead, particularly if any of the defaults would
    be insecure in production.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](app02.xhtml#idm45714878393496-marker)) 这为我们提供了一个“只要可能就能工作”的本地开发设置。你可能更喜欢在缺少环境变量时严格失败，特别是如果任何默认值在生产中可能不安全。
- en: ^([5](app02.xhtml#idm45714878387176-marker)) Harry is a bit YAML-weary. It’s
    *everywhere*, and yet he can never remember the syntax or how it’s supposed to
    indent.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](app02.xhtml#idm45714878387176-marker)) Harry对YAML有点厌倦。它*无处不在*，但他永远记不住语法或应该如何缩进。
- en: ^([6](app02.xhtml#idm45714878116600-marker)) On a CI server, you may not be
    able to expose arbitrary ports reliably, but it’s only a convenience for local
    dev. You can find ways of making these port mappings optional (e.g., with *docker-compose.override.yml*).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](app02.xhtml#idm45714878116600-marker)) 在CI服务器上，您可能无法可靠地暴露任意端口，但这只是本地开发的便利。您可以找到使这些端口映射可选的方法（例如，使用*docker-compose.override.yml*）。
- en: ^([7](app02.xhtml#idm45714878054648-marker)) For more *setup.py* tips, see [this
    article on packaging](https://oreil.ly/KMWDz) by Hynek.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](app02.xhtml#idm45714878054648-marker)) 有关更多*setup.py*提示，请参阅Hynek的[这篇关于打包的文章](https://oreil.ly/KMWDz)。

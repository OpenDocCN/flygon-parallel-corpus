["```py\ndef test_cli_app_reads_csvs_with_batches_and_orders_and_outputs_allocations(\n        make_csv\n):\n    sku1, sku2 = random_ref('s1'), random_ref('s2')\n    batch1, batch2, batch3 = random_ref('b1'), random_ref('b2'), random_ref('b3')\n    order_ref = random_ref('o')\n    make_csv('batches.csv', [\n        ['ref', 'sku', 'qty', 'eta'],\n        [batch1, sku1, 100, ''],\n        [batch2, sku2, 100, '2011-01-01'],\n        [batch3, sku2, 100, '2011-01-02'],\n    ])\n    orders_csv = make_csv('orders.csv', [\n        ['orderid', 'sku', 'qty'],\n        [order_ref, sku1, 3],\n        [order_ref, sku2, 12],\n    ])\n\n    run_cli_script(orders_csv.parent)\n\n    expected_output_csv = orders_csv.parent / 'allocations.csv'\n    with open(expected_output_csv) as f:\n        rows = list(csv.reader(f))\n    assert rows == [\n        ['orderid', 'sku', 'qty', 'batchref'],\n        [order_ref, sku1, '3', batch1],\n        [order_ref, sku2, '12', batch2],\n    ]\n```", "```py\n#!/usr/bin/env python\nimport csv\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom allocation import model\n\ndef load_batches(batches_path):\n    batches = []\n    with batches_path.open() as inf:\n        reader = csv.DictReader(inf)\n        for row in reader:\n            if row['eta']:\n                eta = datetime.strptime(row['eta'], '%Y-%m-%d').date()\n            else:\n                eta = None\n            batches.append(model.Batch(\n                ref=row['ref'],\n                sku=row['sku'],\n                qty=int(row['qty']),\n                eta=eta\n            ))\n    return batches\n\ndef main(folder):\n    batches_path = Path(folder) / 'batches.csv'\n    orders_path = Path(folder) / 'orders.csv'\n    allocations_path = Path(folder) / 'allocations.csv'\n\n    batches = load_batches(batches_path)\n\n    with orders_path.open() as inf, allocations_path.open('w') as outf:\n        reader = csv.DictReader(inf)\n        writer = csv.writer(outf)\n        writer.writerow(['orderid', 'sku', 'batchref'])\n        for row in reader:\n            orderid, sku = row['orderid'], row['sku']\n            qty = int(row['qty'])\n            line = model.OrderLine(orderid, sku, qty)\n            batchref = model.allocate(line, batches)\n            writer.writerow([line.orderid, line.sku, batchref])\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n```", "```py\ndef test_cli_app_also_reads_existing_allocations_and_can_append_to_them(\n        make_csv\n):\n    sku = random_ref('s')\n    batch1, batch2 = random_ref('b1'), random_ref('b2')\n    old_order, new_order = random_ref('o1'), random_ref('o2')\n    make_csv('batches.csv', [\n        ['ref', 'sku', 'qty', 'eta'],\n        [batch1, sku, 10, '2011-01-01'],\n        [batch2, sku, 10, '2011-01-02'],\n    ])\n    make_csv('allocations.csv', [\n        ['orderid', 'sku', 'qty', 'batchref'],\n        [old_order, sku, 10, batch1],\n    ])\n    orders_csv = make_csv('orders.csv', [\n        ['orderid', 'sku', 'qty'],\n        [new_order, sku, 7],\n    ])\n\n    run_cli_script(orders_csv.parent)\n\n    expected_output_csv = orders_csv.parent / 'allocations.csv'\n    with open(expected_output_csv) as f:\n        rows = list(csv.reader(f))\n    assert rows == [\n        ['orderid', 'sku', 'qty', 'batchref'],\n        [old_order, sku, '10', batch1],\n        [new_order, sku, '7', batch2],\n    ]\n```", "```py\nclass CsvRepository(repository.AbstractRepository):\n\n    def __init__(self, folder):\n        self._batches_path = Path(folder) / 'batches.csv'\n        self._allocations_path = Path(folder) / 'allocations.csv'\n        self._batches = {}  # type: Dict[str, model.Batch]\n        self._load()\n\n    def get(self, reference):\n        return self._batches.get(reference)\n\n    def add(self, batch):\n        self._batches[batch.reference] = batch\n\n    def _load(self):\n        with self._batches_path.open() as f:\n            reader = csv.DictReader(f)\n            for row in reader:\n                ref, sku = row['ref'], row['sku']\n                qty = int(row['qty'])\n                if row['eta']:\n                    eta = datetime.strptime(row['eta'], '%Y-%m-%d').date()\n                else:\n                    eta = None\n                self._batches[ref] = model.Batch(\n                    ref=ref, sku=sku, qty=qty, eta=eta\n                )\n        if self._allocations_path.exists() is False:\n            return\n        with self._allocations_path.open() as f:\n            reader = csv.DictReader(f)\n            for row in reader:\n                batchref, orderid, sku = row['batchref'], row['orderid'], row['sku']\n                qty = int(row['qty'])\n                line = model.OrderLine(orderid, sku, qty)\n                batch = self._batches[batchref]\n                batch._allocations.add(line)\n\n    def list(self):\n        return list(self._batches.values())\n```", "```py\nclass CsvUnitOfWork(unit_of_work.AbstractUnitOfWork):\n\n    def __init__(self, folder):\n        self.batches = CsvRepository(folder)\n\n    def commit(self):\n        with self.batches._allocations_path.open('w') as f:\n            writer = csv.writer(f)\n            writer.writerow(['orderid', 'sku', 'qty', 'batchref'])\n            for batch in self.batches.list():\n                for line in batch._allocations:\n                    writer.writerow(\n                        [line.orderid, line.sku, line.qty, batch.reference]\n                    )\n\n    def rollback(self):\n        pass\n```", "```py\ndef main(folder):\n    orders_path = Path(folder) / 'orders.csv'\n    uow = csv_uow.CsvUnitOfWork(folder)\n    with orders_path.open() as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            orderid, sku = row['orderid'], row['sku']\n            qty = int(row['qty'])\n            services.allocate(orderid, sku, qty, uow)\n```"]
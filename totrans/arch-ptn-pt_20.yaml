- en: 'Appendix C. Swapping Out the Infrastructure: Do Everything with CSVs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix is intended as a little illustration of the benefits of the Repository,
    Unit of Work, and Service Layer patterns. It’s intended to follow from [Chapter 6](ch06.xhtml#chapter_06_uow).
  prefs: []
  type: TYPE_NORMAL
- en: Just as we finish building out our Flask API and getting it ready for release,
    the business comes to us apologetically, saying they’re not ready to use our API
    and asking if we could build a thing that reads just batches and orders from a
    couple of CSVs and outputs a third CSV with allocations.
  prefs: []
  type: TYPE_NORMAL
- en: Ordinarily this is the kind of thing that might have a team cursing and spitting
    and making notes for their memoirs. But not us! Oh no, we’ve ensured that our
    infrastructure concerns are nicely decoupled from our domain model and service
    layer. Switching to CSVs will be a simple matter of writing a couple of new `Repository`
    and `UnitOfWork` classes, and then we’ll be able to reuse *all* of our logic from
    the domain layer and the service layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an E2E test to show you how the CSVs flow in and out:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A first CSV test (tests/e2e/test_csv.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Diving in and implementing without thinking about repositories and all that
    jazz, you might start with something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A first cut of our CSV reader/writer (src/bin/allocate-from-csv)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It’s not looking too bad! And we’re reusing our domain model objects and our
    domain service.
  prefs: []
  type: TYPE_NORMAL
- en: 'But it’s not going to work. Existing allocations need to also be part of our
    permanent CSV storage. We can write a second test to force us to improve things:'
  prefs: []
  type: TYPE_NORMAL
- en: '*And another one, with existing allocations (tests/e2e/test_csv.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: And we could keep hacking about and adding extra lines to that `load_batches`
    function, and some sort of way of tracking and saving new allocations—but we already
    have a model for doing that! It’s called our Repository and Unit of Work patterns.
  prefs: []
  type: TYPE_NORMAL
- en: All we need to do (“all we need to do”) is reimplement those same abstractions,
    but with CSVs underlying them instead of a database. And as you’ll see, it really
    is relatively straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Repository and Unit of Work for CSVs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s what a CSV-based repository could look like. It abstracts away all the
    logic for reading CSVs from disk, including the fact that it has to read *two
    different CSVs* (one for batches and one for allocations), and it gives us just
    the familiar `.list()` API, which provides the illusion of an in-memory collection
    of domain objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A repository that uses CSV as its storage mechanism (src/allocation/service_layer/csv_uow.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s what a UoW for CSVs would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A UoW for CSVs: commit = csv.writer (src/allocation/service_layer/csv_uow.py)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And once we have that, our CLI app for reading and writing batches and allocations
    to CSV is pared down to what it should be—a bit of code for reading order lines,
    and a bit of code that invokes our *existing* service layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Allocation with CSVs in nine lines (src/bin/allocate-from-csv)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Ta-da! *Now are y’all impressed or what*?
  prefs: []
  type: TYPE_NORMAL
- en: Much love,
  prefs: []
  type: TYPE_NORMAL
- en: Bob and Harry
  prefs: []
  type: TYPE_NORMAL

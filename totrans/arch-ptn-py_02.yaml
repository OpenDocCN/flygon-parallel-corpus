- en: Part I. Building an Architecture to Support Domain Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分。构建支持领域建模的架构
- en: Most developers have never seen a domain model, only a data model.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数开发人员从未见过领域模型，只见过数据模型。
- en: '>'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Cyrille Martraire, DDD EU 2017
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Cyrille Martraire, DDD EU 2017
- en: Most developers we talk to about architecture have a nagging sense that things
    could be better. They are often trying to rescue a system that has gone wrong
    somehow, and are trying to put some structure back into a ball of mud. They know
    that their business logic shouldn’t be spread all over the place, but they have
    no idea how to fix it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与关于架构的开发人员交谈时，他们常常有一种隐隐的感觉，觉得事情本可以更好。他们经常试图拯救一些出了问题的系统，并试图将一些结构重新放入一团混乱之中。他们知道他们的业务逻辑不应该分散在各个地方，但他们不知道如何解决。
- en: We’ve found that many developers, when asked to design a new system, will immediately
    start to build a database schema, with the object model treated as an afterthought.
    This is where it all starts to go wrong. Instead, *behavior should come first
    and drive our storage requirements.* After all, our customers don’t care about
    the data model. They care about what the system *does*; otherwise they’d just
    use a spreadsheet.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现许多开发人员在被要求设计一个新系统时，会立即开始构建数据库模式，将对象模型视为事后补充。这就是问题的根源。相反，*行为应该首先驱动我们的存储需求*。毕竟，我们的客户不关心数据模型。他们关心系统*做什么*；否则他们就会使用电子表格。
- en: The first part of the book looks at how to build a rich object model through
    TDD (in [Chapter 1](ch01.xhtml#chapter_01_domain_model)), and then we’ll show
    how to keep that model decoupled from technical concerns. We show how to build
    persistence-ignorant code and how to create stable APIs around our domain so that
    we can refactor aggressively.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第一部分介绍了如何通过TDD构建丰富的对象模型（在[第1章](ch01.xhtml#chapter_01_domain_model)中），然后我们将展示如何将该模型与技术关注点解耦。我们展示了如何构建与持久性无关的代码，以及如何围绕我们的领域创建稳定的API，以便我们可以进行积极的重构。
- en: 'To do that, we present four key design patterns:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们介绍了四个关键的设计模式：
- en: The [Repository pattern](ch02.xhtml#chapter_02_repository), an abstraction over
    the idea of persistent storage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[存储库模式](ch02.xhtml#chapter_02_repository)，是对持久性存储概念的抽象'
- en: The [Service Layer](ch04.xhtml#chapter_04_service_layer) pattern to clearly
    define where our use cases begin and end
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[服务层模式](ch04.xhtml#chapter_04_service_layer)清晰地定义了我们的用例从何处开始和结束'
- en: The [Unit of Work pattern](ch06.xhtml#chapter_06_uow) to provide atomic operations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[工作单元模式](ch06.xhtml#chapter_06_uow)提供原子操作'
- en: The [Aggregate pattern](ch07.xhtml#chapter_07_aggregate) to enforce the integrity
    of our data
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[聚合模式](ch07.xhtml#chapter_07_aggregate)以强制执行我们数据的完整性'
- en: If you’d like a picture of where we’re going, take a look at [Figure I-1](#part1_components_diagram),
    but don’t worry if none of it makes sense yet! We introduce each box in the figure,
    one by one, throughout this part of the book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道我们的目标是什么，请看一下[图I-1](#part1_components_diagram)，但如果现在还一头雾水也不要担心！我们会在本书的这一部分逐一介绍图中的每个框。
- en: '![apwp p101](Images/apwp_p101.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![apwp p101](Images/apwp_p101.png)'
- en: Figure I-1\. A component diagram for our app at the end of [Part I](#part1)
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图I-1。我们应用程序的组件图在[第I部分](#part1)结束时
- en: We also take a little time out to talk about [coupling and abstractions](ch03.xhtml#chapter_03_abstractions),
    illustrating it with a simple example that shows how and why we choose our abstractions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还抽出一点时间来谈论[耦合和抽象](ch03.xhtml#chapter_03_abstractions)，并用一个简单的例子来说明我们选择抽象的方式及原因。
- en: 'Three appendices are further explorations of the content from Part I:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 三个附录进一步探讨了第一部分的内容：
- en: '[Appendix B](app02.xhtml#appendix_project_structure) is a write-up of the infrastructure
    for our example code: how we build and run the Docker images, where we manage
    configuration info, and how we run different types of tests.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[附录B](app02.xhtml#appendix_project_structure)是我们示例代码的基础设施的描述：我们如何构建和运行Docker镜像，我们在哪里管理配置信息，以及我们如何运行不同类型的测试。'
- en: '[Appendix C](app03.xhtml#appendix_csvs) is a “proof is in the pudding” kind
    of content, showing how easy it is to swap out our entire infrastructure—the Flask
    API, the ORM, and Postgres—for a totally different I/O model involving a CLI and
    CSVs.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[附录C](app03.xhtml#appendix_csvs)是一种“见证成败”的内容，展示了如何轻松地更换我们整个基础架构——Flask API、ORM和Postgres——以完全不同的I/O模型，涉及CLI和CSV。'
- en: Finally, [Appendix D](app04.xhtml#appendix_django) may be of interest if you’re
    wondering how these patterns might look if using Django instead of Flask and SQLAlchemy.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，[附录D](app04.xhtml#appendix_django)可能会引起兴趣，如果你想知道使用Django而不是Flask和SQLAlchemy时这些模式会是什么样子。

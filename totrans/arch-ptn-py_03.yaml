- en: Chapter 1\. Domain Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。领域建模
- en: 'This chapter looks into how we can model business processes with code, in a
    way that’s highly compatible with TDD. We’ll discuss *why* domain modeling matters,
    and we’ll look at a few key patterns for modeling domains: Entity, Value Object,
    and Domain Service.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨如何用代码对业务流程进行建模，以一种与TDD高度兼容的方式。我们将讨论领域建模的重要性，并将介绍一些建模领域的关键模式：实体、值对象和领域服务。
- en: '[Figure 1-1](#maps_chapter_01_notext) is a simple visual placeholder for our
    Domain Model pattern. We’ll fill in some details in this chapter, and as we move
    on to other chapters, we’ll build things around the domain model, but you should
    always be able to find these little shapes at the core.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-1](#maps_chapter_01_notext)是我们领域模型模式的一个简单的视觉占位符。在本章中，我们将填写一些细节，随着我们继续其他章节，我们将围绕领域模型构建东西，但您应该始终能够在核心找到这些小形状。'
- en: '![apwp 0101](Images/apwp_0101.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0101](Images/apwp_0101.png)'
- en: Figure 1-1\. A placeholder illustration of our domain model
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1。我们领域模型的一个占位符插图
- en: What Is a Domain Model?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是领域模型？
- en: In the [introduction](preface02.xhtml#introduction), we used the term *business
    logic layer* to describe the central layer of a three-layered architecture. For
    the rest of the book, we’re going to use the term *domain model* instead. This
    is a term from the DDD community that does a better job of capturing our intended
    meaning (see the next sidebar for more on DDD).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[介绍](preface02.xhtml#introduction)中，我们使用了术语*业务逻辑层*来描述三层架构的中心层。在本书的其余部分，我们将使用术语*领域模型*。这是DDD社区的一个术语，更能准确地捕捉我们的意思（有关DDD的更多信息，请参见下一个侧边栏）。
- en: The *domain* is a fancy way of saying *the problem you’re trying to solve.*
    Your authors currently work for an online retailer of furniture. Depending on
    which system you’re talking about, the domain might be purchasing and procurement,
    or product design, or logistics and delivery. Most programmers spend their days
    trying to improve or automate business processes; the domain is the set of activities
    that those processes support.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*领域*是说*您正在尝试解决的问题*的一种花哨的说法。您的作者目前为一家家具在线零售商工作。根据您所谈论的系统，领域可能是采购和采购、产品设计或物流和交付。大多数程序员都在努力改进或自动化业务流程；领域是支持这些流程的一系列活动。'
- en: A *model* is a map of a process or phenomenon that captures a useful property.
    Humans are exceptionally good at producing models of things in their heads. For
    example, when someone throws a ball toward you, you’re able to predict its movement
    almost unconsciously, because you have a model of the way objects move in space.
    Your model isn’t perfect by any means. Humans have terrible intuitions about how
    objects behave at near-light speeds or in a vacuum because our model was never
    designed to cover those cases. That doesn’t mean the model is wrong, but it does
    mean that some predictions fall outside of its domain.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型*是捕捉有用属性的过程或现象的地图。人类在脑海中制作事物的模型非常擅长。例如，当有人向您扔球时，您能够几乎下意识地预测其运动，因为您对物体在空间中移动的方式有一个模型。您的模型并不完美。人类对物体在接近光速或真空中的行为有着糟糕的直觉，因为我们的模型从未设计来涵盖这些情况。这并不意味着模型是错误的，但这确实意味着一些预测超出了其领域。'
- en: The domain model is the mental map that business owners have of their businesses.
    All business people have these mental maps—they’re how humans think about complex
    processes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 领域模型是业务所有者对其业务的心智地图。所有的商业人士都有这些心智地图——这是人类思考复杂流程的方式。
- en: You can tell when they’re navigating these maps because they use business speak.
    Jargon arises naturally among people who are collaborating on complex systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们在这些地图上导航时，您可以通过他们使用商业用语来判断。术语在协作处理复杂系统的人群中自然产生。
- en: Imagine that you, our unfortunate reader, were suddenly transported light years
    away from Earth aboard an alien spaceship with your friends and family and had
    to figure out, from first principles, how to navigate home.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您，我们不幸的读者，突然被传送到光年之外的外星飞船上，与您的朋友和家人一起，不得不从头开始弄清楚如何回家。
- en: In your first few days, you might just push buttons randomly, but soon you’d
    learn which buttons did what, so that you could give one another instructions.
    “Press the red button near the flashing doohickey and then throw that big lever
    over by the radar gizmo,” you might say.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初的几天里，您可能只是随机按按钮，但很快您会学会哪些按钮做什么，这样您就可以给彼此指示。“按下闪烁的小玩意旁边的红色按钮，然后把雷达小玩意旁边的大杠杆扔过去”，您可能会说。
- en: 'Within a couple of weeks, you’d become more precise as you adopted words to
    describe the ship’s functions: “Increase oxygen levels in cargo bay three” or
    “turn on the little thrusters.” After a few months, you’d have adopted language
    for entire complex processes: “Start landing sequence” or “prepare for warp.”
    This process would happen quite naturally, without any formal effort to build
    a shared glossary.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在几周内，您会变得更加精确，因为您采用了用于描述船舶功能的词汇：“增加货舱三的氧气水平”或“打开小推进器”。几个月后，您将采用整个复杂流程的语言：“开始着陆序列”或“准备跃迁”。这个过程会很自然地发生，而不需要任何正式的努力来建立共享词汇表。
- en: So it is in the mundane world of business. The terminology used by business
    stakeholders represents a distilled understanding of the domain model, where complex
    ideas and processes are boiled down to a single word or phrase.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在日常商业世界中也是如此。商业利益相关者使用的术语代表了对领域模型的精炼理解，复杂的想法和流程被简化为一个词或短语。
- en: When we hear our business stakeholders using unfamiliar words, or using terms
    in a specific way, we should listen to understand the deeper meaning and encode
    their hard-won experience into our software.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们听到我们的业务利益相关者使用陌生的词汇，或者以特定方式使用术语时，我们应该倾听以理解更深层的含义，并将他们辛苦获得的经验编码到我们的软件中。
- en: We’re going to use a real-world domain model throughout this book, specifically
    a model from our current employment. MADE.com is a successful furniture retailer.
    We source our furniture from manufacturers all over the world and sell it across
    Europe.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用一个真实的领域模型，具体来说是我们目前的雇主的模型。MADE.com是一家成功的家具零售商。我们从世界各地的制造商那里采购家具，并在整个欧洲销售。
- en: When you buy a sofa or a coffee table, we have to figure out how best to get
    your goods from Poland or China or Vietnam and into your living room.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当您购买沙发或咖啡桌时，我们必须想出如何最好地将您的商品从波兰、中国或越南运送到您的客厅。
- en: At a high level, we have separate systems that are responsible for buying stock,
    selling stock to customers, and shipping goods to customers. A system in the middle
    needs to coordinate the process by allocating stock to a customer’s orders; see
    [Figure 1-2](#allocation_context_diagram).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，我们有独立的系统负责购买库存、向客户销售库存和向客户发货。中间的一个系统需要通过将库存分配给客户的订单来协调这个过程；参见[图1-2](#allocation_context_diagram)。
- en: '![apwp 0102](Images/apwp_0102.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0102](Images/apwp_0102.png)'
- en: Figure 1-2\. Context diagram for the allocation service
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2。分配服务的上下文图
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For the purposes of this book, we’re imagining that the business decides to
    implement an exciting new way of allocating stock. Until now, the business has
    been presenting stock and lead times based on what is physically available in
    the warehouse. If and when the warehouse runs out, a product is listed as “out
    of stock” until the next shipment arrives from the manufacturer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们想象业务决定实施一种令人兴奋的新的库存分配方式。到目前为止，业务一直根据仓库中实际可用的库存和交货时间来展示库存和交货时间。如果仓库用完了，产品就被列为“缺货”，直到下一批从制造商那里到货。
- en: 'Here’s the innovation: if we have a system that can keep track of all our shipments
    and when they’re due to arrive, we can treat the goods on those ships as real
    stock and part of our inventory, just with slightly longer lead times. Fewer goods
    will appear to be out of stock, we’ll sell more, and the business can save money
    by keeping lower inventory in the domestic warehouse.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的创新是：如果我们有一个系统可以跟踪我们所有的货物运输及其到达时间，我们就可以将这些货物视为真实库存和我们库存的一部分，只是交货时间稍长一些。更少的商品将显示为缺货，我们将销售更多商品，业务可以通过在国内仓库保持较低的库存来节省成本。
- en: But allocating orders is no longer a trivial matter of decrementing a single
    quantity in the warehouse system. We need a more complex allocation mechanism.
    Time for some domain modeling.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是分配订单不再是在仓库系统中减少单个数量的琐事。我们需要一个更复杂的分配机制。是时候进行一些领域建模了。
- en: Exploring the Domain Language
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索领域语言
- en: Understanding the domain model takes time, and patience, and Post-it notes.
    We have an initial conversation with our business experts and agree on a glossary
    and some rules for the first minimal version of the domain model. Wherever possible,
    we ask for concrete examples to illustrate each rule.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 理解领域模型需要时间、耐心和便利贴。我们与业务专家进行了初步对话，并就领域模型的第一个最小版本的术语表和一些规则达成一致。在可能的情况下，我们要求提供具体的例子来说明每条规则。
- en: We make sure to express those rules in the business jargon (the *ubiquitous
    language* in DDD terminology). We choose memorable identifiers for our objects
    so that the examples are easier to talk about.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确保用业务行话（在DDD术语中称为*普遍语言*）来表达这些规则。我们为我们的对象选择了易于讨论的可记忆的标识符，以便更容易地讨论示例。
- en: '[“Some Notes on Allocation”](#allocation_notes) shows some notes we might have
    taken while having a conversation with our domain experts about allocation.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[“分配的一些注释”](#allocation_notes)显示了我们在与领域专家讨论分配时可能做的一些注释。'
- en: Unit Testing Domain Models
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领域模型的单元测试
- en: We’re not going to show you how TDD works in this book, but we want to show
    you how we would construct a model from this business conversation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这本书中向您展示TDD的工作原理，但我们想向您展示我们如何从这次业务对话中构建模型。
- en: 'Here’s what one of our first tests might look like:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个测试可能如下所示：
- en: '*A first test for allocation (test_batches.py)*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*分配的第一个测试（test_batches.py）*'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The name of our unit test describes the behavior that we want to see from the
    system, and the names of the classes and variables that we use are taken from
    the business jargon. We could show this code to our nontechnical coworkers, and
    they would agree that this correctly describes the behavior of the system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的单元测试的名称描述了我们希望从系统中看到的行为，我们使用的类和变量的名称取自业务行话。我们可以向非技术同事展示这段代码，他们会同意这正确地描述了系统的行为。
- en: 'And here is a domain model that meets our requirements:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个满足我们要求的领域模型：
- en: '*First cut of a domain model for batches (model.py)*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*批次的领域模型的初步版本（model.py）*'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_domain_modeling_CO1-1)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_domain_modeling_CO1-1)'
- en: '`OrderLine` is an immutable dataclass with no behavior.^([2](ch01.xhtml#idm45714909924296))'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderLine`是一个没有行为的不可变数据类。^([2](ch01.xhtml#idm45714909924296))'
- en: '[![2](Images/2.png)](#co_domain_modeling_CO1-2)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_domain_modeling_CO1-2)'
- en: We’re not showing imports in most code listings, in an attempt to keep them
    clean. We’re hoping you can guess that this came via `from dataclasses import
    dataclass`; likewise, `typing.Optional` and `datetime.date`. If you want to double-check
    anything, you can see the full working code for each chapter in its branch (e.g.,
    [chapter_01_domain_model](https://github.com/python-leap/code/tree/chapter_01_domain_model)).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在大多数代码清单中不显示导入，以保持其整洁。我们希望您能猜到这是通过`from dataclasses import dataclass`导入的；同样，`typing.Optional`和`datetime.date`也是如此。如果您想要进行双重检查，可以在其分支中查看每个章节的完整工作代码（例如，[chapter_01_domain_model](https://github.com/python-leap/code/tree/chapter_01_domain_model)）。
- en: '[![3](Images/3.png)](#co_domain_modeling_CO1-4)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_domain_modeling_CO1-4)'
- en: Type hints are still a matter of controversy in the Python world. For domain
    models, they can sometimes help to clarify or document what the expected arguments
    are, and people with IDEs are often grateful for them. You may decide the price
    paid in terms of readability is too high.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示在Python世界仍然是一个有争议的问题。对于领域模型，它们有时可以帮助澄清或记录预期的参数是什么，而且使用IDE的人通常会对它们表示感激。您可能会认为在可读性方面付出的代价太高。
- en: 'Our implementation here is trivial: a `Batch` just wraps an integer `available_quantity`,
    and we decrement that value on allocation. We’ve written quite a lot of code just
    to subtract one number from another, but we think that modeling our domain precisely
    will pay off.^([3](ch01.xhtml#idm45714909749608))'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现在这里是微不足道的：`Batch`只是包装了一个整数`available_quantity`，并在分配时减少该值。我们写了相当多的代码来从另一个数字中减去一个数字，但我们认为精确建模我们的领域将会得到回报。^([3](ch01.xhtml#idm45714909749608))
- en: 'Let’s write some new failing tests:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些新的失败测试：
- en: '*Testing logic for what we can allocate (test_batches.py)*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试我们可以分配什么的逻辑（test_batches.py）*'
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There’s nothing too unexpected here. We’ve refactored our test suite so that
    we don’t keep repeating the same lines of code to create a batch and a line for
    the same SKU; and we’ve written four simple tests for a new method `can_allocate`.
    Again, notice that the names we use mirror the language of our domain experts,
    and the examples we agreed upon are directly written into code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有太多意外。我们重构了我们的测试套件，以便我们不再重复相同的代码行来为相同的SKU创建批次和行；我们为一个新方法`can_allocate`编写了四个简单的测试。再次注意，我们使用的名称与我们的领域专家的语言相呼应，并且我们商定的示例直接写入了代码。
- en: 'We can implement this straightforwardly, too, by writing the `can_allocate`
    method of `Batch`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以直接实现这一点，通过编写`Batch`的`can_allocate`方法：
- en: '*A new method in the model (model.py)*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型中的一个新方法（model.py）*'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So far, we can manage the implementation by just incrementing and decrementing
    `Batch.available_quantity`, but as we get into `deallocate()` tests, we’ll be
    forced into a more intelligent solution:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们可以通过增加和减少`Batch.available_quantity`来管理实现，但是当我们进入`deallocate()`测试时，我们将被迫采用更智能的解决方案：
- en: '*This test is going to require a smarter model (test_batches.py)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个测试将需要一个更智能的模型（test_batches.py）*'
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this test, we’re asserting that deallocating a line from a batch has no
    effect unless the batch previously allocated the line. For this to work, our `Batch`
    needs to understand which lines have been allocated. Let’s look at the implementation:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们断言从批次中取消分配一行，除非批次先前分配了该行，否则不会产生任何影响。为了使其工作，我们的`Batch`需要了解哪些行已经被分配。让我们来看看实现：
- en: '*The domain model now tracks allocations (model.py)*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*领域模型现在跟踪分配（model.py）*'
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Figure 1-3](#model_diagram) shows the model in UML.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-3](#model_diagram)显示了UML中的模型。'
- en: '![apwp 0103](Images/apwp_0103.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0103](Images/apwp_0103.png)'
- en: Figure 1-3\. Our model in UML
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-3\. 我们的UML模型
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we’re getting somewhere! A batch now keeps track of a set of allocated
    `OrderLine` objects. When we allocate, if we have enough available quantity, we
    just add to the set. Our `available_quantity` is now a calculated property: purchased
    quantity minus allocated quantity.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了进展！批次现在跟踪一组已分配的`OrderLine`对象。当我们分配时，如果我们有足够的可用数量，我们只需添加到集合中。我们的`available_quantity`现在是一个计算属性：购买数量减去分配数量。
- en: Yes, there’s plenty more we could do. It’s a little disconcerting that both
    `allocate()` and `deallocate()` can fail silently, but we have the basics.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们还可以做很多事情。令人不安的是，`allocate()`和`deallocate()`都可能悄悄失败，但我们已经掌握了基础知识。
- en: 'Incidentally, using a set for `._allocations` makes it simple for us to handle
    the last test, because items in a set are unique:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，使用`._allocations`的集合使我们能够简单地处理最后一个测试，因为集合中的项目是唯一的：
- en: '*Last batch test! (test_batches.py)*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后的批次测试！（test_batches.py）*'
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At the moment, it’s probably a valid criticism to say that the domain model
    is too trivial to bother with DDD (or even object orientation!). In real life,
    any number of business rules and edge cases crop up: customers can ask for delivery
    on specific future dates, which means we might not want to allocate them to the
    earliest batch. Some SKUs aren’t in batches, but ordered on demand directly from
    suppliers, so they have different logic. Depending on the customer’s location,
    we can allocate to only a subset of warehouses and shipments that are in their
    region—except for some SKUs we’re happy to deliver from a warehouse in a different
    region if we’re out of stock in the home region. And so on. A real business in
    the real world knows how to pile on complexity faster than we can show on the
    page!'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，可以说领域模型太琐碎，不值得费心去做DDD（甚至是面向对象！）。在现实生活中，会出现任意数量的业务规则和边缘情况：客户可以要求在特定未来日期交付，这意味着我们可能不想将它们分配给最早的批次。一些SKU不在批次中，而是直接从供应商那里按需订购，因此它们具有不同的逻辑。根据客户的位置，我们只能分配给其地区内的一部分仓库和货运，除了一些SKU，如果我们在本地区域缺货，我们可以从不同地区的仓库交付。等等。现实世界中的真实企业知道如何比我们在页面上展示的更快地增加复杂性！
- en: But taking this simple domain model as a placeholder for something more complex,
    we’re going to extend our simple domain model in the rest of the book and plug
    it into the real world of APIs and databases and spreadsheets. We’ll see how sticking
    rigidly to our principles of encapsulation and careful layering will help us to
    avoid a ball of mud.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，将这个简单的领域模型作为更复杂东西的占位符，我们将在本书的其余部分扩展我们简单的领域模型，并将其插入到API和数据库以及电子表格的真实世界中。我们将看到，严格遵守封装和谨慎分层的原则将帮助我们避免一团泥。
- en: Dataclasses Are Great for Value Objects
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类非常适合值对象
- en: 'We’ve used `line` liberally in the previous code listings, but what is a line?
    In our business language, an *order* has multiple *line* items, where each line
    has a SKU and a quantity. We can imagine that a simple YAML file containing order
    information might look like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码列表中，我们大量使用了`line`，但是什么是line？在我们的业务语言中，一个*订单*有多个*行*项目，每行都有一个SKU和数量。我们可以想象，一个包含订单信息的简单YAML文件可能如下所示：
- en: '*Order info as YAML*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*订单信息作为YAML*'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that while an order has a *reference* that uniquely identifies it, a
    *line* does not. (Even if we add the order reference to the `OrderLine` class,
    it’s not something that uniquely identifies the line itself.)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，订单具有唯一标识它的*引用*，而*线路*没有。（即使我们将订单引用添加到`OrderLine`类中，它也不是唯一标识线路本身的东西。）
- en: 'Whenever we have a business concept that has data but no identity, we often
    choose to represent it using the *Value Object* pattern. A *value object* is any
    domain object that is uniquely identified by the data it holds; we usually make
    them immutable:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们有一个具有数据但没有身份的业务概念时，我们通常选择使用*价值对象*模式来表示它。*价值对象*是任何由其持有的数据唯一标识的领域对象；我们通常使它们是不可变的：
- en: '*OrderLine is a value object*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*OrderLine是一个价值对象*'
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: One of the nice things that dataclasses (or namedtuples) give us is *value equality*,
    which is the fancy way of saying, “Two lines with the same `orderid`, `sku`, and
    `qty` are equal.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类（或命名元组）给我们带来的一个好处是*值相等*，这是说“具有相同`orderid`、`sku`和`qty`的两行是相等的”这种花哨的方式。
- en: '*More examples of value objects*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*价值对象的更多示例*'
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These value objects match our real-world intuition about how their values work.
    It doesn’t matter *which* £10 note we’re talking about, because they all have
    the same value. Likewise, two names are equal if both the first and last names
    match; and two lines are equivalent if they have the same customer order, product
    code, and quantity. We can still have complex behavior on a value object, though.
    In fact, it’s common to support operations on values; for example, mathematical
    operators:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些价值对象与我们对其值如何工作的现实世界直觉相匹配。讨论的是*哪张*10英镑钞票并不重要，因为它们都有相同的价值。同样，如果名字的名和姓都匹配，两个名字是相等的；如果客户订单、产品代码和数量相同，两行是等价的。不过，我们仍然可以在价值对象上有复杂的行为。事实上，在值上支持操作是很常见的；例如，数学运算符：
- en: '*Math with value objects*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用价值对象进行数学运算*'
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Value Objects and Entities
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 价值对象和实体
- en: 'An order line is uniquely identified by its order ID, SKU, and quantity; if
    we change one of those values, we now have a new line. That’s the definition of
    a value object: any object that is identified only by its data and doesn’t have
    a long-lived identity. What about a batch, though? That *is* identified by a reference.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 订单行通过其订单ID、SKU和数量唯一标识；如果我们更改其中一个值，现在我们有了一个新的行。这就是价值对象的定义：任何仅由其数据标识并且没有长期身份的对象。不过，批次呢？那*是*由一个引用标识的。
- en: We use the term *entity* to describe a domain object that has long-lived identity.
    On the previous page, we introduced a `Name` class as a value object. If we take
    the name Harry Percival and change one letter, we have the new `Name` object Barry
    Percival.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用术语*实体*来描述具有长期身份的领域对象。在上一页中，我们介绍了`Name`类作为一个价值对象。如果我们把哈利·珀西瓦尔的名字改变一个字母，我们就得到了新的`Name`对象巴里·珀西瓦尔。
- en: 'It should be clear that Harry Percival is not equal to Barry Percival:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 哈利·珀西瓦尔显然不等于巴里·珀西瓦尔：
- en: '*A name itself cannot change…*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*名字本身是不能改变的...*'
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'But what about Harry as a *person*? People do change their names, and their
    marital status, and even their gender, but we continue to recognize them as the
    same individual. That’s because humans, unlike names, have a persistent *identity*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是作为*人*的哈利呢？人们确实会改变他们的名字，婚姻状况，甚至性别，但我们仍然认为他们是同一个个体。这是因为人类，与名字不同，具有持久的*身份*：
- en: '*But a person can!*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*但一个人可以！*'
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Entities, unlike values, have *identity equality*. We can change their values,
    and they are still recognizably the same thing. Batches, in our example, are entities.
    We can allocate lines to a batch, or change the date that we expect it to arrive,
    and it will still be the same entity.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实体，与值不同，具有*身份相等*。我们可以改变它们的值，它们仍然可以被识别为同一件事物。在我们的例子中，批次是实体。我们可以为批次分配线路，或更改我们期望它到达的日期，它仍然是同一个实体。
- en: 'We usually make this explicit in code by implementing equality operators on
    entities:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常通过在实体上实现相等运算符来在代码中明确表示这一点：
- en: '*Implementing equality operators (model.py)*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*实现相等运算符（model.py）*'
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Python’s `__eq__` magic method defines the behavior of the class for the `==`
    operator.^([5](ch01.xhtml#idm45714912460744))
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`__eq__`魔术方法定义了类在`==`运算符下的行为。^([5](ch01.xhtml#idm45714912460744))
- en: For both entity and value objects, it’s also worth thinking through how `__hash__`
    will work. It’s the magic method Python uses to control the behavior of objects
    when you add them to sets or use them as dict keys; you can find more info [in
    the Python docs](https://oreil.ly/YUzg5).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实体和价值对象，思考`__hash__`的工作方式也很重要。这是Python用来控制对象在添加到集合或用作字典键时的行为的魔术方法；你可以在[Python文档](https://oreil.ly/YUzg5)中找到更多信息。
- en: For value objects, the hash should be based on all the value attributes, and
    we should ensure that the objects are immutable. We get this for free by specifying
    `@frozen=True` on the dataclass.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于价值对象，哈希应该基于所有值属性，并且我们应该确保对象是不可变的。通过在数据类上指定`@frozen=True`，我们可以免费获得这一点。
- en: For entities, the simplest option is to say that the hash is `None`, meaning
    that the object is not hashable and cannot, for example, be used in a set. If
    for some reason you decide you really do want to use set or dict operations with
    entities, the hash should be based on the attribute(s), such as `.reference`,
    that defines the entity’s unique identity over time. You should also try to somehow
    make *that* attribute read-only.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实体，最简单的选择是说哈希是`None`，这意味着对象是不可哈希的，不能用于集合中。如果出于某种原因，你决定确实想要使用集合或字典操作与实体，哈希应该基于定义实体在一段时间内的唯一身份的属性（如`.reference`）。你还应该尝试以某种方式使*那个*属性只读。
- en: Warning
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This is tricky territory; you shouldn’t modify `__hash__` without also modifying
    `__eq__`. If you’re not sure what you’re doing, further reading is suggested.
    [“Python Hashes and Equality”](https://oreil.ly/vxkgX) by our tech reviewer Hynek
    Schlawack is a good place to start.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个棘手的领域；你不应该修改`__hash__`而不修改`__eq__`。如果你不确定自己在做什么，建议进一步阅读。我们的技术审阅员Hynek Schlawack的[“Python
    Hashes and Equality”](https://oreil.ly/vxkgX)是一个很好的起点。
- en: 'Not Everything Has to Be an Object: A Domain Service Function'
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并非所有的东西都必须是一个对象：领域服务函数
- en: We’ve made a model to represent batches, but what we actually need to do is
    allocate order lines against a specific set of batches that represent all our
    stock.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经制作了一个表示批次的模型，但我们实际上需要做的是针对代表我们所有库存的特定一组批次分配订单行。
- en: Sometimes, it just isn’t a thing.
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有时，这只是一种事情。
- en: '>'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Eric Evans, Domain-Driven Design
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Eric Evans，领域驱动设计
- en: Evans discusses the idea of Domain Service operations that don’t have a natural
    home in an entity or value object.^([6](ch01.xhtml#idm45714912441224)) A thing
    that allocates an order line, given a set of batches, sounds a lot like a function,
    and we can take advantage of the fact that Python is a multiparadigm language
    and just make it a function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Evans讨论了领域服务操作的概念，这些操作在实体或值对象中没有自然的归属地。^([6](ch01.xhtml#idm45714912441224))
    分配订单行的东西，给定一组批次，听起来很像一个函数，我们可以利用Python是一种多范式语言的事实，只需将其变成一个函数。
- en: 'Let’s see how we might test-drive such a function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何测试驱动这样一个函数：
- en: '*Testing our domain service (test_allocate.py)*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试我们的领域服务（test_allocate.py）*'
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And our service might look like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务可能看起来像这样：
- en: '*A standalone function for our domain service (model.py)*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的领域服务的独立函数（model.py）*'
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Python’s Magic Methods Let Us Use Our Models with Idiomatic Python
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python的魔术方法让我们可以使用我们的模型与惯用的Python
- en: You may or may not like the use of `next()` in the preceding code, but we’re
    pretty sure you’ll agree that being able to use `sorted()` on our list of batches
    is nice, idiomatic Python.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会喜欢或不喜欢在前面的代码中使用`next()`，但我们非常确定你会同意在我们的批次列表上使用`sorted()`是很好的，符合Python的惯用法。
- en: 'To make it work, we implement `__gt__` on our domain model:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，我们在我们的领域模型上实现`__gt__`：
- en: '*Magic methods can express domain semantics (model.py)*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*魔术方法可以表达领域语义（model.py）*'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That’s lovely.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。
- en: Exceptions Can Express Domain Concepts Too
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常也可以表达领域概念
- en: 'We have one final concept to cover: exceptions can be used to express domain
    concepts too. In our conversations with domain experts, we’ve learned about the
    possibility that an order cannot be allocated because we are *out of stock*, and
    we can capture that by using a *domain exception*:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个最后的概念要涵盖：异常也可以用来表达领域概念。在与领域专家的对话中，我们了解到订单无法分配的可能性，因为我们*缺货*，我们可以通过使用*领域异常*来捕获这一点：
- en: '*Testing out-of-stock exception (test_allocate.py)*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试缺货异常（test_allocate.py）*'
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We won’t bore you too much with the implementation, but the main thing to note
    is that we take care in naming our exceptions in the ubiquitous language, just
    as we do our entities, value objects, and services:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会让你对实现感到厌烦，但需要注意的主要事情是，我们在通用语言中命名我们的异常，就像我们对实体、值对象和服务一样：
- en: '*Raising a domain exception (model.py)*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*引发领域异常（model.py）*'
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Figure 1-4](#maps_chapter_01_withtext) is a visual representation of where
    we’ve ended up.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-4](#maps_chapter_01_withtext)是我们最终达到的视觉表示。'
- en: '![apwp 0104](Images/apwp_0104.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0104](Images/apwp_0104.png)'
- en: Figure 1-4\. Our domain model at the end of the chapter
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-4。本章结束时的我们的领域模型
- en: That’ll probably do for now! We have a domain service that we can use for our
    first use case. But first we’ll need a database…
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可能就够了！我们有一个可以用于我们的第一个用例的域服务。但首先我们需要一个数据库...
- en: ^([1](ch01.xhtml#idm45714910064936-marker)) DDD did not originate domain modeling.
    Eric Evans refers to the 2002 book *Object Design* by Rebecca Wirfs-Brock and
    Alan McKean (Addison-Wesley Professional), which introduced responsibility-driven
    design, of which DDD is a special case dealing with the domain. But even that
    is too late, and OO enthusiasts will tell you to look further back to Ivar Jacobson
    and Grady Booch; the term has been around since the mid-1980s.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm45714910064936-marker)) DDD并非起源于领域建模。Eric Evans提到了2002年Rebecca
    Wirfs-Brock和Alan McKean的书*Object Design*（Addison-Wesley Professional），该书介绍了责任驱动设计，而DDD是处理领域的特殊情况。但即使如此，这也太晚了，OO爱好者会告诉你要更进一步地回溯到Ivar
    Jacobson和Grady Booch；这个术语自上世纪80年代中期就已经存在了。
- en: ^([2](ch01.xhtml#idm45714909924296-marker)) In previous Python versions, we
    might have used a namedtuple. You could also check out Hynek Schlawack’s excellent
    [attrs](https://pypi.org/project/attrs).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#idm45714909924296-marker)) 在以前的Python版本中，我们可能会使用一个命名元组。您还可以查看Hynek
    Schlawack的优秀的[attrs](https://pypi.org/project/attrs)。
- en: ^([3](ch01.xhtml#idm45714909749608-marker)) Or perhaps you think there’s not
    enough code? What about some sort of check that the SKU in the `OrderLine` matches
    `Batch.sku`? We saved some thoughts on validation for [Appendix E](app05.xhtml#appendix_validation).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.xhtml#idm45714909749608-marker)) 或者也许你认为代码还不够？`OrderLine`中的SKU与`Batch.sku`匹配的某种检查呢？我们在[附录
    E](app05.xhtml#appendix_validation)中保存了一些关于验证的想法。
- en: ^([4](ch01.xhtml#idm45714913069480-marker)) It is appalling. Please, please
    don’t do this. —Harry
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.xhtml#idm45714913069480-marker)) 这太糟糕了。请，拜托，不要这样做。 ——Harry
- en: ^([5](ch01.xhtml#idm45714912460744-marker)) The `__eq__` method is pronounced
    “dunder-EQ.” By some, at least.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.xhtml#idm45714912460744-marker)) `__eq__`方法的发音是“dunder-EQ”。至少有些人是这么说的。
- en: ^([6](ch01.xhtml#idm45714912441224-marker)) Domain services are not the same
    thing as the services from the [service layer](ch04.xhtml#chapter_04_service_layer),
    although they are often closely related. A domain service represents a business
    concept or process, whereas a service-layer service represents a use case for
    your application. Often the service layer will call a domain service.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.xhtml#idm45714912441224-marker)) 领域服务与[服务层](ch04.xhtml#chapter_04_service_layer)中的服务不是同一回事，尽管它们经常密切相关。领域服务代表了一个业务概念或流程，而服务层服务代表了应用程序的用例。通常，服务层将调用领域服务。

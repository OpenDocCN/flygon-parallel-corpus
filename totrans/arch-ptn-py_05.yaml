- en: 'Chapter 3\. A Brief Interlude: On Coupling and Abstractions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。简短插曲：耦合和抽象
- en: Allow us a brief digression on the subject of abstractions, dear reader. We’ve
    talked about *abstractions* quite a lot. The Repository pattern is an abstraction
    over permanent storage, for example. But what makes a good abstraction? What do
    we want from abstractions? And how do they relate to testing?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 请允许我们在抽象主题上稍作偏离，亲爱的读者。我们已经谈论了*抽象*很多。例如，存储库模式是对永久存储的抽象。但是什么样的抽象才是好的？我们从抽象中想要什么？它们与测试有什么关系？
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_03_abstractions branch [on GitHub](https://oreil.ly/k6MmV):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码在GitHub的chapter_03_abstractions分支中[链接](https://oreil.ly/k6MmV)：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A key theme in this book, hidden among the fancy patterns, is that we can use
    simple abstractions to hide messy details. When we’re writing code for fun, or
    in a kata,^([1](ch03.xhtml#idm45714903927544)) we get to play with ideas freely,
    hammering things out and refactoring aggressively. In a large-scale system, though,
    we become constrained by the decisions made elsewhere in the system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的一个关键主题，隐藏在花哨的模式中，是我们可以使用简单的抽象来隐藏混乱的细节。当我们写代码时，可以自由地玩耍，或者在一个kata中，我们可以自由地玩耍，大幅度地重构。然而，在大规模系统中，我们受到系统其他地方做出的决定的限制。
- en: 'When we’re unable to change component A for fear of breaking component B, we
    say that the components have become *coupled*. Locally, coupling is a good thing:
    it’s a sign that our code is working together, each component supporting the others,
    all of them fitting in place like the gears of a watch. In jargon, we say this
    works when there is high *cohesion* between the coupled elements.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们因为担心破坏组件B而无法更改组件A时，我们说这些组件已经*耦合*。在本地，耦合是一件好事：这表明我们的代码正在一起工作，每个组件都在支持其他组件，所有这些组件都像手表的齿轮一样完美地配合在一起。在行话中，我们说当耦合元素之间存在高*内聚*时，这是有效的。
- en: 'Globally, coupling is a nuisance: it increases the risk and the cost of changing
    our code, sometimes to the point where we feel unable to make any changes at all.
    This is the problem with the Ball of Mud pattern: as the application grows, if
    we’re unable to prevent coupling between elements that have no cohesion, that
    coupling increases superlinearly until we are no longer able to effectively change
    our systems.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 总体上，耦合是一种麻烦事：它增加了更改代码的风险和成本，有时甚至到了我们感到无法进行任何更改的地步。这就是“泥球”模式的问题：随着应用程序的增长，如果我们无法阻止没有内聚力的元素之间的耦合，那么耦合会超线性地增加，直到我们无法有效地更改我们的系统。
- en: We can reduce the degree of coupling within a system ([Figure 3-1](#coupling_illustration1))
    by abstracting away the details ([Figure 3-2](#coupling_illustration2)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将细节抽象化（[图3-1](#coupling_illustration1)）来减少系统内的耦合程度。
- en: '![apwp 0301](Images/apwp_0301.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0301](Images/apwp_0301.png)'
- en: Figure 3-1\. Lots of coupling
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-1。耦合很多
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![apwp 0302](Images/apwp_0302.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0302](Images/apwp_0302.png)'
- en: Figure 3-2\. Less coupling
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-2。耦合减少
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In both diagrams, we have a pair of subsystems, with one dependent on the other.
    In [Figure 3-1](#coupling_illustration1), there is a high degree of coupling between
    the two; the number of arrows indicates lots of kinds of dependencies between
    the two. If we need to change system B, there’s a good chance that the change
    will ripple through to system A.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个图中，我们有一对子系统，其中一个依赖于另一个。在[图3-1](#coupling_illustration1)中，两者之间存在高度耦合；箭头的数量表示两者之间有很多种依赖关系。如果我们需要更改系统B，很可能这种更改会传播到系统A。
- en: In [Figure 3-2](#coupling_illustration2), though, we have reduced the degree
    of coupling by inserting a new, simpler abstraction. Because it is simpler, system
    A has fewer kinds of dependencies on the abstraction. The abstraction serves to
    protect us from change by hiding away the complex details of whatever system B
    does—we can change the arrows on the right without changing the ones on the left.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在[图3-2](#coupling_illustration2)中，我们通过插入一个新的、更简单的抽象来减少耦合程度。因为它更简单，系统A对抽象的依赖种类更少。抽象用于保护我们免受变化的影响，它隐藏了系统B的复杂细节——我们可以在不更改左侧箭头的情况下更改右侧的箭头。
- en: Abstracting State Aids Testability
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象状态辅助测试
- en: 'Let’s see an example. Imagine we want to write code for synchronizing two file
    directories, which we’ll call the *source* and the *destination*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。想象一下，我们想要编写代码来同步两个文件目录，我们将其称为*源*和*目标*：
- en: If a file exists in the source but not in the destination, copy the file over.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果源中存在文件，但目标中不存在文件，则复制文件。
- en: If a file exists in the source, but it has a different name than in the destination,
    rename the destination file to match.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果源文件存在，但与目标文件名不同，则将目标文件重命名为匹配的文件。
- en: If a file exists in the destination but not in the source, remove it.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果目标中存在文件，但源中不存在文件，则删除它。
- en: 'Our first and third requirements are simple enough: we can just compare two
    lists of paths. Our second is trickier, though. To detect renames, we’ll have
    to inspect the content of files. For this, we can use a hashing function like
    MD5 or SHA-1\. The code to generate a SHA-1 hash from a file is simple enough:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个和第三个要求都很简单：我们只需比较两个路径列表。但是我们的第二个要求就比较棘手了。为了检测重命名，我们将不得不检查文件的内容。为此，我们可以使用MD5或SHA-1等哈希函数。从文件生成SHA-1哈希的代码非常简单：
- en: '*Hashing a file (sync.py)*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*对文件进行哈希（sync.py）*'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we need to write the bit that makes decisions about what to do—the business
    logic, if you will.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写决定要做什么的部分——商业逻辑，如果你愿意的话。
- en: 'When we have to tackle a problem from first principles, we usually try to write
    a simple implementation and then refactor toward better design. We’ll use this
    approach throughout the book, because it’s how we write code in the real world:
    start with a solution to the smallest part of the problem, and then iteratively
    make the solution richer and better designed.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们必须从第一原则解决问题时，通常我们会尝试编写一个简单的实现，然后朝着更好的设计进行重构。我们将在整本书中使用这种方法，因为这是我们在现实世界中编写代码的方式：从问题的最小部分开始解决方案，然后迭代地使解决方案更加丰富和更好设计。
- en: 'Our first hackish approach looks something like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个hackish方法看起来是这样的：
- en: '*Basic sync algorithm (sync.py)*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*基本同步算法（sync.py）*'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Fantastic! We have some code and it *looks* OK, but before we run it on our
    hard drive, maybe we should test it. How do we go about testing this sort of thing?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们有一些代码，它*看起来*不错，但在我们在硬盘上运行它之前，也许我们应该测试一下。我们如何测试这种类型的东西？
- en: '*Some end-to-end tests (test_sync.py)*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*一些端到端测试（test_sync.py）*'
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Wowsers, that’s a lot of setup for two simple cases! The problem is that our
    domain logic, “figure out the difference between two directories,” is tightly
    coupled to the I/O code. We can’t run our difference algorithm without calling
    the `pathlib`, `shutil`, and `hashlib` modules.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 哇哦，为了两个简单的情况需要做很多设置！问题在于我们的领域逻辑，“找出两个目录之间的差异”，与I/O代码紧密耦合。我们无法在不调用`pathlib`、`shutil`和`hashlib`模块的情况下运行我们的差异算法。
- en: 'And the trouble is, even with our current requirements, we haven’t written
    enough tests: the current implementation has several bugs (the `shutil.move()`
    is wrong, for example). Getting decent coverage and revealing these bugs means
    writing more tests, but if they’re all as unwieldy as the preceding ones, that’s
    going to get real painful real quickly.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，即使在当前的要求下，我们还没有编写足够的测试：当前的实现存在一些错误（例如`shutil.move()`是错误的）。获得良好的覆盖率并揭示这些错误意味着编写更多的测试，但如果它们都像前面的测试一样难以管理，那将会变得非常痛苦。
- en: On top of that, our code isn’t very extensible. Imagine trying to implement
    a `--dry-run` flag that gets our code to just print out what it’s going to do,
    rather than actually do it. Or what if we wanted to sync to a remote server, or
    to cloud storage?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们的代码并不是很可扩展。想象一下，试图实现一个`--dry-run`标志，让我们的代码只是打印出它将要做的事情，而不是实际去做。或者，如果我们想要同步到远程服务器或云存储呢？
- en: Our high-level code is coupled to low-level details, and it’s making life hard.
    As the scenarios we consider get more complex, our tests will get more unwieldy.
    We can definitely refactor these tests (some of the cleanup could go into pytest
    fixtures, for example) but as long as we’re doing filesystem operations, they’re
    going to stay slow and be hard to read and write.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的高级代码与低级细节耦合在一起，这让生活变得困难。随着我们考虑的场景变得更加复杂，我们的测试将变得更加难以管理。我们肯定可以重构这些测试（例如，一些清理工作可以放入pytest
    fixtures中），但只要我们进行文件系统操作，它们就会保持缓慢，并且难以阅读和编写。
- en: Choosing the Right Abstraction(s)
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的抽象
- en: What could we do to rewrite our code to make it more testable?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做些什么来重写我们的代码，使其更具可测试性？
- en: 'First, we need to think about what our code needs from the filesystem. Reading
    through the code, we can see that three distinct things are happening. We can
    think of these as three distinct *responsibilities* that the code has:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要考虑我们的代码需要文件系统提供什么。通过阅读代码，我们可以看到三个不同的事情正在发生。我们可以将这些视为代码具有的三个不同*责任*：
- en: We interrogate the filesystem by using `os.walk` and determine hashes for a
    series of paths. This is similar in both the source and the destination cases.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过使用`os.walk`来询问文件系统，并为一系列路径确定哈希值。这在源和目标情况下都是相似的。
- en: We decide whether a file is new, renamed, or redundant.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们决定文件是新的、重命名的还是多余的。
- en: We copy, move, or delete files to match the source.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们复制、移动或删除文件以匹配源。
- en: Remember that we want to find *simplifying abstractions* for each of these responsibilities.
    That will let us hide the messy details so we can focus on the interesting logic.^([2](ch03.xhtml#idm45714903333384))
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们希望为这些责任中的每一个找到*简化的抽象*。这将让我们隐藏混乱的细节，以便我们可以专注于有趣的逻辑。^([2](ch03.xhtml#idm45714903333384))
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, we’re refactoring some gnarly code into a more testable structure
    by identifying the separate tasks that need to be done and giving each task to
    a clearly defined actor, along similar lines to [the `duckduckgo` example](preface02.xhtml#ddg_example).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过识别需要完成的各个任务并将每个任务分配给一个明确定义的执行者，按照类似于[“duckduckgo”示例](preface02.xhtml#ddg_example)的方式，将一些混乱的代码重构为更具可测试性的结构。
- en: 'For steps 1 and 2, we’ve already intuitively started using an abstraction,
    a dictionary of hashes to paths. You may already have been thinking, “Why not
    build up a dictionary for the destination folder as well as the source, and then
    we just compare two dicts?” That seems like a nice way to abstract the current
    state of the filesystem:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于步骤1和步骤2，我们已经直观地开始使用一个抽象，即哈希到路径的字典。您可能已经在想，“为什么不为目标文件夹构建一个字典，然后我们只需比较两个字典？”这似乎是一种很好的抽象文件系统当前状态的方式：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What about moving from step 2 to step 3? How can we abstract out the actual
    move/copy/delete filesystem interaction?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何从第2步移动到第3步呢？我们如何将实际的移动/复制/删除文件系统交互抽象出来？
- en: 'We’ll apply a trick here that we’ll employ on a grand scale later in the book.
    We’re going to separate *what* we want to do from *how* to do it. We’re going
    to make our program output a list of commands that look like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里应用一个技巧，我们将在本书的后面大规模地使用。我们将*想要做什么*与*如何做*分开。我们将使我们的程序输出一个看起来像这样的命令列表：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we could write tests that just use two filesystem dicts as inputs, and we
    would expect lists of tuples of strings representing actions as outputs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写测试，只使用两个文件系统字典作为输入，并且我们期望输出表示操作的字符串元组列表。
- en: Instead of saying, “Given this actual filesystem, when I run my function, check
    what actions have happened,” we say, “Given this *abstraction* of a filesystem,
    what *abstraction* of filesystem actions will happen?”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是说，“给定这个实际的文件系统，当我运行我的函数时，检查发生了什么操作”，而是说，“给定这个*文件系统的抽象*，会发生什么*文件系统操作的抽象*？”
- en: '*Simplified inputs and outputs in our tests (test_sync.py)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的测试中简化了输入和输出（test_sync.py）*'
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Implementing Our Chosen Abstractions
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现我们选择的抽象
- en: That’s all very well, but how do we *actually* write those new tests, and how
    do we change our implementation to make it all work?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好，但我们*实际上*如何编写这些新测试，以及如何改变我们的实现使其正常工作？
- en: Our goal is to isolate the clever part of our system, and to be able to test
    it thoroughly without needing to set up a real filesystem. We’ll create a “core”
    of code that has no dependencies on external state and then see how it responds
    when we give it input from the outside world (this kind of approach was characterized
    by Gary Bernhardt as [Functional Core, Imperative Shell](https://oreil.ly/wnad4),
    or FCIS).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是隔离系统的聪明部分，并且能够彻底测试它，而不需要设置真实的文件系统。我们将创建一个“核心”代码，它不依赖外部状态，然后看看当我们从外部世界输入时它如何响应（这种方法被Gary
    Bernhardt称为[Functional Core, Imperative Shell](https://oreil.ly/wnad4)，或FCIS）。
- en: Let’s start off by splitting the code to separate the stateful parts from the
    logic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将代码分离出有状态的部分和逻辑开始。
- en: 'And our top-level function will contain almost no logic at all; it’s just an
    imperative series of steps: gather inputs, call our logic, apply outputs:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的顶层函数几乎不包含任何逻辑；它只是一系列命令式的步骤：收集输入，调用我们的逻辑，应用输出：
- en: '*Split our code into three (sync.py)*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*将我们的代码分成三部分（sync.py）*'
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO1-1)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO1-1)'
- en: Here’s the first function we factor out, `read_paths_and_hashes()`, which isolates
    the I/O part of our application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们分解的第一个函数，`read_paths_and_hashes()`，它隔离了我们应用程序的I/O部分。
- en: '[![2](Images/2.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO1-3)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO1-3)'
- en: Here is where carve out the functional core, the business logic.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们切出功能核心，业务逻辑的地方。
- en: 'The code to build up the dictionary of paths and hashes is now trivially easy
    to write:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建路径和哈希字典的代码现在非常容易编写：
- en: '*A function that just does I/O (sync.py)*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*只执行I/O的函数（sync.py）*'
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `determine_actions()` function will be the core of our business logic,
    which says, “Given these two sets of hashes and filenames, what should we copy/move/delete?”.
    It takes simple data structures and returns simple data structures:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`determine_actions()`函数将是我们业务逻辑的核心，它说：“给定这两组哈希和文件名，我们应该复制/移动/删除什么？”。它接受简单的数据结构并返回简单的数据结构：'
- en: '*A function that just does business logic (sync.py)*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*只执行业务逻辑的函数（sync.py）*'
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our tests now act directly on the `determine_actions()` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试现在直接作用于`determine_actions()`函数：
- en: '*Nicer-looking tests (test_sync.py)*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*更好看的测试（test_sync.py）*'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Because we’ve disentangled the logic of our program—the code for identifying
    changes—from the low-level details of I/O, we can easily test the core of our
    code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经将程序的逻辑——识别更改的代码——与I/O的低级细节分离开来，我们可以轻松测试我们代码的核心部分。
- en: With this approach, we’ve switched from testing our main entrypoint function,
    `sync()`, to testing a lower-level function, `determine_actions()`. You might
    decide that’s fine because `sync()` is now so simple. Or you might decide to keep
    some integration/acceptance tests to test that `sync()`. But there’s another option,
    which is to modify the `sync()` function so it can be unit tested *and* end-to-end
    tested; it’s an approach Bob calls *edge-to-edge testing*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，我们已经从测试我们的主入口函数`sync()`，转而测试更低级的函数`determine_actions()`。您可能会认为这没问题，因为`sync()`现在非常简单。或者您可能决定保留一些集成/验收测试来测试`sync()`。但还有另一种选择，那就是修改`sync()`函数，使其既可以进行单元测试*又*可以进行端到端测试；这是Bob称之为*边缘到边缘测试*的方法。
- en: Testing Edge to Edge with Fakes and Dependency Injection
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用伪造和依赖注入进行边缘到边缘测试
- en: When we start writing a new system, we often focus on the core logic first,
    driving it with direct unit tests. At some point, though, we want to test bigger
    chunks of the system together.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始编写新系统时，我们经常首先关注核心逻辑，通过直接的单元测试驱动它。不过，某个时候，我们希望一起测试系统的更大块。
- en: 'We *could* return to our end-to-end tests, but those are still as tricky to
    write and maintain as before. Instead, we often write tests that invoke a whole
    system together but fake the I/O, sort of *edge to edge*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们*可以*回到端到端测试，但这些仍然像以前一样难以编写和维护。相反，我们经常编写调用整个系统但伪造I/O的测试，有点*边缘到边缘*：'
- en: '*Explicit dependencies (sync.py)*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*显式依赖项（sync.py）*'
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](Images/1.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO2-1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO2-1)'
- en: Our top-level function now exposes two new dependencies, a `reader` and a `filesystem`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的顶层函数现在公开了两个新的依赖项，一个`reader`和一个`filesystem`。
- en: '[![2](Images/2.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO2-2)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO2-2)'
- en: We invoke the `reader` to produce our files dict.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`reader`来生成我们的文件字典。
- en: '[![3](Images/3.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO2-3)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO2-3)'
- en: We invoke the `filesystem` to apply the changes we detect.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`filesystem`来应用我们检测到的更改。
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Although we’re using dependency injection, there is no need to define an abstract
    base class or any kind of explicit interface. In this book, we often show ABCs
    because we hope they help you understand what the abstraction is, but they’re
    not necessary. Python’s dynamic nature means we can always rely on duck typing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们正在使用依赖注入，但没有必要定义抽象基类或任何明确的接口。在本书中，我们经常展示ABCs，因为我们希望它们能帮助您理解抽象是什么，但它们并不是必需的。Python的动态特性意味着我们总是可以依赖鸭子类型。
- en: '*Tests using DI*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用DI的测试*'
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](Images/1.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO3-1)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO3-1)'
- en: Bob *loves* using lists to build simple test doubles, even though his coworkers
    get mad. It means we can write tests like `assert *foo* not in database`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Bob *非常*喜欢使用列表来构建简单的测试替身，尽管他的同事们会生气。这意味着我们可以编写像`assert *foo* not in database`这样的测试。
- en: '[![2](Images/2.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO3-2)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_a_brief_interlude__on_coupling__span_class__keep_together__and_abstractions__span__CO3-2)'
- en: Each method in our `FakeFileSystem` just appends something to the list so we
    can inspect it later. This is an example of a spy object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`FakeFileSystem`中的每个方法都只是将一些内容附加到列表中，以便我们以后可以检查它。这是间谍对象的一个例子。
- en: The advantage of this approach is that our tests act on the exact same function
    that’s used by our production code. The disadvantage is that we have to make our
    stateful components explicit and pass them around. David Heinemeier Hansson, the
    creator of Ruby on Rails, famously described this as “test-induced design damage.”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势在于我们的测试作用于与我们的生产代码使用的完全相同的函数。缺点是我们必须明确地表达我们的有状态组件并传递它们。Ruby on Rails的创始人David
    Heinemeier Hansson曾经著名地将这描述为“测试诱导的设计损害”。
- en: In either case, we can now work on fixing all the bugs in our implementation;
    enumerating tests for all the edge cases is now much easier.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，我们现在都可以着手修复实现中的所有错误；为所有边缘情况列举测试现在变得更容易了。
- en: Why Not Just Patch It Out?
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不只是补丁？
- en: At this point you may be scratching your head and thinking, “Why don’t you just
    use `mock.patch` and save yourself the effort?"”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能会挠头想，“为什么你不只是使用`mock.patch`，省点力气呢？”
- en: We avoid using mocks in this book and in our production code too. We’re not
    going to enter into a Holy War, but our instinct is that mocking frameworks, particularly
    monkeypatching, are a code smell.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书和我们的生产代码中都避免使用模拟。我们不会卷入圣战，但我们的直觉是，模拟框架，特别是monkeypatching，是一种代码异味。
- en: Instead, we like to clearly identify the responsibilities in our codebase, and
    to separate those responsibilities into small, focused objects that are easy to
    replace with a test double.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们喜欢清楚地确定代码库中的责任，并将这些责任分离成小而专注的对象，这些对象易于用测试替身替换。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can see an example in [Chapter 8](ch08.xhtml#chapter_08_events_and_message_bus),
    where we `mock.patch()` out an email-sending module, but eventually we replace
    that with an explicit bit of dependency injection in [Chapter 13](ch13.xhtml#chapter_13_dependency_injection).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[第8章](ch08.xhtml#chapter_08_events_and_message_bus)中看到一个例子，我们在那里使用`mock.patch()`来替换一个发送电子邮件的模块，但最终我们在[第13章](ch13.xhtml#chapter_13_dependency_injection)中用显式的依赖注入替换了它。
- en: 'We have three closely related reasons for our preference:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对我们的偏好有三个密切相关的原因：
- en: Patching out the dependency you’re using makes it possible to unit test the
    code, but it does nothing to improve the design. Using `mock.patch` won’t let
    your code work with a `--dry-run` flag, nor will it help you run against an FTP
    server. For that, you’ll need to introduce abstractions.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除你正在使用的依赖关系，可以对代码进行单元测试，但这对改进设计没有任何帮助。使用`mock.patch`不会让你的代码与`--dry-run`标志一起工作，也不会帮助你针对FTP服务器运行。为此，你需要引入抽象。
- en: 'Tests that use mocks *tend* to be more coupled to the implementation details
    of the codebase. That’s because mock tests verify the interactions between things:
    did we call `shutil.copy` with the right arguments? This coupling between code
    and test *tends* to make tests more brittle, in our experience.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模拟测试的测试*倾向于*更多地与代码库的实现细节耦合。这是因为模拟测试验证了事物之间的交互：我们是否用正确的参数调用了`shutil.copy`？根据我们的经验，代码和测试之间的这种耦合*倾向于*使测试更加脆弱。
- en: Overuse of mocks leads to complicated test suites that fail to explain the code.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度使用模拟会导致复杂的测试套件，无法解释代码。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Designing for testability really means designing for extensibility. We trade
    off a little more complexity for a cleaner design that admits novel use cases.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为可测试性而设计实际上意味着为可扩展性而设计。我们为了更清晰的设计而进行了一些复杂性的折衷，这样可以容纳新的用例。
- en: We view TDD as a design practice first and a testing practice second. The tests
    act as a record of our design choices and serve to explain the system to us when
    we return to the code after a long absence.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将TDD视为一种设计实践，其次是一种测试实践。测试作为我们设计选择的记录，并在我们长时间离开代码后为我们解释系统的作用。
- en: Tests that use too many mocks get overwhelmed with setup code that hides the
    story we care about.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用太多模拟的测试会被隐藏在设置代码中，这些设置代码隐藏了我们关心的故事。
- en: Steve Freeman has a great example of overmocked tests in his talk [“Test-Driven
    Development”](https://oreil.ly/jAmtr). You should also check out this PyCon talk,
    [“Mocking and Patching Pitfalls”](https://oreil.ly/s3e05), by our esteemed tech
    reviewer, Ed Jung, which also addresses mocking and its alternatives. And while
    we’re recommending talks, don’t miss Brandon Rhodes talking about [“Hoisting Your
    I/O”](https://oreil.ly/oiXJM), which really nicely covers the issues we’re talking
    about, using another simple example.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Steve Freeman在他的演讲[“测试驱动开发”](https://oreil.ly/jAmtr)中有一个很好的过度模拟测试的例子。你还应该看看这个PyCon演讲，[“Mocking
    and Patching Pitfalls”](https://oreil.ly/s3e05)，由我们尊敬的技术审阅人员Ed Jung进行，其中也涉及了模拟和其替代方案。还有，我们推荐的演讲，不要错过Brandon
    Rhodes关于[“提升你的I/O”](https://oreil.ly/oiXJM)的讲解，他用另一个简单的例子很好地涵盖了我们正在讨论的问题。
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'In this chapter, we’ve spent a lot of time replacing end-to-end tests with
    unit tests. That doesn’t mean we think you should never use E2E tests! In this
    book we’re showing techniques to get you to a decent test pyramid with as many
    unit tests as possible, and with the minimum number of E2E tests you need to feel
    confident. Read on to [“Recap: Rules of Thumb for Different Types of Test”](ch05.xhtml#types_of_test_rules_of_thumb)
    for more details.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们花了很多时间用单元测试替换端到端测试。这并不意味着我们认为你永远不应该使用端到端测试！在本书中，我们展示了一些技术，让你尽可能地获得一个体面的测试金字塔，并且尽可能少地需要端到端测试来获得信心。继续阅读[“总结：不同类型测试的经验法则”](ch05.xhtml#types_of_test_rules_of_thumb)以获取更多细节。
- en: Wrap-Up
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We’ll see this idea come up again and again in the book: we can make our systems
    easier to test and maintain by simplifying the interface between our business
    logic and messy I/O. Finding the right abstraction is tricky, but here are a few
    heuristics and questions to ask yourself:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中一再看到这个想法：通过简化业务逻辑和混乱的I/O之间的接口，我们可以使我们的系统更容易测试和维护。找到合适的抽象是棘手的，但以下是一些启发和问题，你可以问问自己：
- en: Can I choose a familiar Python data structure to represent the state of the
    messy system and then try to imagine a single function that can return that state?
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以选择一个熟悉的Python数据结构来表示混乱系统的状态，然后尝试想象一个可以返回该状态的单个函数吗？
- en: Where can I draw a line between my systems, where can I carve out a [seam](https://oreil.ly/zNUGG)
    to stick that abstraction in?
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我在哪里可以在我的系统中划出一条线，在哪里可以开辟一个[接缝](https://oreil.ly/zNUGG)来放置这个抽象？
- en: What is a sensible way of dividing things into components with different responsibilities?
    What implicit concepts can I make explicit?
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将事物划分为具有不同责任的组件的合理方式是什么？我可以将隐含的概念变得明确吗？
- en: What are the dependencies, and what is the core business logic?
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些依赖关系，什么是核心业务逻辑？
- en: Practice makes less imperfect! And now back to our regular programming…
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 练习使不完美减少！现在回到我们的常规编程…
- en: ^([1](ch03.xhtml#idm45714903927544-marker)) A code kata is a small, contained
    programming challenge often used to practice TDD. See [“Kata—The Only Way to Learn
    TDD”](https://oreil.ly/vhjju) by Peter Provost.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.xhtml#idm45714903927544-marker)) 代码卡塔是一个小的、独立的编程挑战，通常用于练习TDD。请参阅Peter
    Provost的《Kata—The Only Way to Learn TDD》。
- en: ^([2](ch03.xhtml#idm45714903333384-marker)) If you’re used to thinking in terms
    of interfaces, that’s what we’re trying to define here.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch03.xhtml#idm45714903333384-marker)) 如果你习惯以接口的方式思考，那么这就是我们在这里尝试定义的内容。
- en: ^([3](ch03.xhtml#idm45714902198776-marker)) Which is not to say that we think
    the London school people are wrong. Some insanely smart people work that way.
    It’s just not what we’re used to.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch03.xhtml#idm45714902198776-marker)) 这并不是说我们认为伦敦学派的人是错的。一些非常聪明的人就是这样工作的。只是我们不习惯这种方式。

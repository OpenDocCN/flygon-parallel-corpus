- en: 'Chapter 4\. Our First Use Case: Flask API and Service Layer'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。我们的第一个用例：Flask API和服务层
- en: Back to our allocations project! [Figure 4-1](#maps_service_layer_before) shows
    the point we reached at the end of [Chapter 2](ch02.xhtml#chapter_02_repository),
    which covered the Repository pattern.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的分配项目！[图4-1](#maps_service_layer_before)显示了我们在[第2章](ch02.xhtml#chapter_02_repository)结束时达到的点，该章节涵盖了存储库模式。
- en: '![apwp 0401](Images/apwp_0401.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0401](Images/apwp_0401.png)'
- en: 'Figure 4-1\. Before: we drive our app by talking to repositories and the domain
    model'
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-1。之前：我们通过与存储库和领域模型交谈来驱动我们的应用程序
- en: In this chapter, we discuss the differences between orchestration logic, business
    logic, and interfacing code, and we introduce the *Service Layer* pattern to take
    care of orchestrating our workflows and defining the use cases of our system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论编排逻辑、业务逻辑和接口代码之间的区别，并介绍*服务层*模式来处理编排我们的工作流程并定义我们系统的用例。
- en: 'We’ll also discuss testing: by combining the Service Layer with our repository
    abstraction over the database, we’re able to write fast tests, not just of our
    domain model but of the entire workflow for a use case.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论测试：通过将服务层与我们对数据库的存储库抽象结合起来，我们能够编写快速测试，不仅测试我们的领域模型，还测试整个用例的工作流程。
- en: '[Figure 4-2](#maps_service_layer_after) shows what we’re aiming for: we’re
    going to add a Flask API that will talk to the service layer, which will serve
    as the entrypoint to our domain model. Because our service layer depends on the
    `AbstractRepository`, we can unit test it by using `FakeRepository` but run our
    production code using `SqlAlchemyRepository`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[图4-2](#maps_service_layer_after)显示我们的目标：我们将添加一个Flask API，它将与服务层交互，服务层将作为我们领域模型的入口。因为我们的服务层依赖于`AbstractRepository`，我们可以使用`FakeRepository`对其进行单元测试，但在生产代码中使用`SqlAlchemyRepository`。'
- en: '![apwp 0402](Images/apwp_0402.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0402](Images/apwp_0402.png)'
- en: Figure 4-2\. The service layer will become the main way into our app
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-2。服务层将成为我们应用程序的主要入口
- en: In our diagrams, we are using the convention that new components are highlighted
    with bold text/lines (and yellow/orange color, if you’re reading a digital version).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的图表中，我们使用的约定是用粗体文本/线条（如果您正在阅读数字版本，则为黄色/橙色）突出显示新组件。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_04_service_layer branch [on GitHub](https://oreil.ly/TBRuy):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于GitHub上的chapter_04_service_layer分支中（https://oreil.ly/TBRuy）：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Connecting Our Application to the Real World
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的应用程序连接到现实世界
- en: Like any good agile team, we’re hustling to try to get an MVP out and in front
    of the users to start gathering feedback. We have the core of our domain model
    and the domain service we need to allocate orders, and we have the repository
    interface for permanent storage.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何一个优秀的敏捷团队一样，我们正在努力尝试推出一个MVP并让用户开始收集反馈意见。我们已经拥有了我们的领域模型的核心和我们需要分配订单的领域服务，以及永久存储的存储库接口。
- en: 'Let’s plug all the moving parts together as quickly as we can and then refactor
    toward a cleaner architecture. Here’s our plan:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尽快将所有的部分组合在一起，然后重构以实现更清晰的架构。这是我们的计划：
- en: Use Flask to put an API endpoint in front of our `allocate` domain service.
    Wire up the database session and our repository. Test it with an end-to-end test
    and some quick-and-dirty SQL to prepare test data.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Flask在我们的`allocate`领域服务前面放置一个API端点。连接数据库会话和我们的存储库。使用端到端测试和一些快速而肮脏的SQL来准备测试数据进行测试。
- en: Refactor out a service layer that can serve as an abstraction to capture the
    use case and that will sit between Flask and our domain model. Build some service-layer
    tests and show how they can use `FakeRepository`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构出一个可以作为抽象来捕捉用例的服务层，并将其放置在Flask和我们的领域模型之间。构建一些服务层测试，并展示它们如何使用`FakeRepository`。
- en: Experiment with different types of parameters for our service layer functions;
    show that using primitive data types allows the service layer’s clients (our tests
    and our Flask API) to be decoupled from the model layer.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用不同类型的参数来调用我们的服务层函数；显示使用原始数据类型允许服务层的客户端（我们的测试和我们的Flask API）与模型层解耦。
- en: A First End-to-End Test
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个端到端测试
- en: No one is interested in getting into a long terminology debate about what counts
    as an end-to-end (E2E) test versus a functional test versus an acceptance test
    versus an integration test versus a unit test. Different projects need different
    combinations of tests, and we’ve seen perfectly successful projects just split
    things into “fast tests” and “slow tests.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人对什么算作端到端（E2E）测试与功能测试、验收测试、集成测试、单元测试之间的术语辩论感兴趣。不同的项目需要不同的测试组合，我们已经看到完全成功的项目将事情分成“快速测试”和“慢速测试”。
- en: For now, we want to write one or maybe two tests that are going to exercise
    a “real” API endpoint (using HTTP) and talk to a real database. Let’s call them
    *end-to-end tests* because it’s one of the most self-explanatory names.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们希望编写一个或两个测试，这些测试将运行一个“真实”的API端点（使用HTTP）并与真实数据库交互。让我们称它们为*端到端测试*，因为这是最直观的名称之一。
- en: 'The following shows a first cut:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第一次尝试：
- en: '*A first API test (test_api.py)*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一个API测试（test_api.py）*'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO1-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO1-1)'
- en: '`random_sku()`, `random_batchref()`, and so on are little helper functions
    that generate randomized characters by using the `uuid` module. Because we’re
    running against an actual database now, this is one way to prevent various tests
    and runs from interfering with each other.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`random_sku()`、`random_batchref()`等都是使用`uuid`模块生成随机字符的小助手函数。因为我们现在正在运行实际的数据库，这是防止各种测试和运行相互干扰的一种方法。'
- en: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO1-2)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO1-2)'
- en: '`add_stock` is a helper fixture that just hides away the details of manually
    inserting rows into the database using SQL. We’ll show a nicer way of doing this
    later in the chapter.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_stock`是一个辅助装置，只是隐藏了使用SQL手动插入行的细节。我们将在本章后面展示更好的方法。'
- en: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO1-3)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO1-3)'
- en: '*config.py* is a module in which we keep configuration information.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*config.py*是一个模块，我们在其中保存配置信息。'
- en: Everyone solves these problems in different ways, but you’re going to need some
    way of spinning up Flask, possibly in a container, and of talking to a Postgres
    database. If you want to see how we did it, check out [Appendix B](app02.xhtml#appendix_project_structure).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人以不同的方式解决这些问题，但您需要一种方法来启动Flask，可能是在容器中，并与Postgres数据库进行通信。如果您想了解我们是如何做到的，请查看[附录B](app02.xhtml#appendix_project_structure)。
- en: The Straightforward Implementation
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接实现
- en: 'Implementing things in the most obvious way, you might get something like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以最明显的方式实现，您可能会得到这样的东西：
- en: '*First cut of Flask app (flask_app.py)*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*Flask应用程序的第一次尝试（flask_app.py）*'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So far, so good. No need for too much more of your “architecture astronaut”
    nonsense, Bob and Harry, you may be thinking.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。你可能会认为，“不需要太多你们的‘架构宇航员’废话，鲍勃和哈里。”
- en: 'But hang on a minute—there’s no commit. We’re not actually saving our allocation
    to the database. Now we need a second test, either one that will inspect the database
    state after (not very black-boxy), or maybe one that checks that we can’t allocate
    a second line if a first should have already depleted the batch:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但等一下——没有提交。我们实际上没有将我们的分配保存到数据库中。现在我们需要第二个测试，要么检查数据库状态之后（不太黑盒），要么检查我们是否无法分配第二行，如果第一行应该已经耗尽了批次：
- en: '*Test allocations are persisted (test_api.py)*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试分配被持久化（test_api.py）*'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Not quite so lovely, but that will force us to add the commit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不是那么可爱，但这将迫使我们添加提交。
- en: Error Conditions That Require Database Checks
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要数据库检查的错误条件
- en: If we keep going like this, though, things are going to get uglier and uglier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，如果我们继续这样做，事情会变得越来越丑陋。
- en: Suppose we want to add a bit of error handling. What if the domain raises an
    error, for a SKU that’s out of stock? Or what about a SKU that doesn’t even exist?
    That’s not something the domain even knows about, nor should it. It’s more of
    a sanity check that we should implement at the database layer, before we even
    invoke the domain service.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要添加一些错误处理。如果领域引发了一个错误，对于一个缺货的SKU呢？或者甚至不存在的SKU呢？这不是领域甚至知道的事情，也不应该是。这更像是我们应该在调用领域服务之前在数据库层实现的一个理智检查。
- en: 'Now we’re looking at two more end-to-end tests:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在看另外两个端到端测试：
- en: '*Yet more tests at the E2E layer (test_api.py)*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*在E2E层进行更多的测试（test_api.py）*'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO2-1)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO2-1)'
- en: In the first test, we’re trying to allocate more units than we have in stock.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个测试中，我们试图分配比我们库存中有的单位更多。
- en: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO2-2)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO2-2)'
- en: In the second, the SKU just doesn’t exist (because we never called `add_stock`),
    so it’s invalid as far as our app is concerned.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个测试中，SKU不存在（因为我们从未调用`add_stock`），因此在我们的应用程序看来是无效的。
- en: 'And sure, we could implement it in the Flask app too:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以在Flask应用程序中实现它：
- en: '*Flask app starting to get crufty (flask_app.py)*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*Flask应用程序开始变得混乱（flask_app.py）*'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But our Flask app is starting to look a bit unwieldy. And our number of E2E
    tests is starting to get out of control, and soon we’ll end up with an inverted
    test pyramid (or “ice-cream cone model,” as Bob likes to call it).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们的Flask应用程序开始变得有些笨重。我们的E2E测试数量开始失控，很快我们将以倒置的测试金字塔（或者鲍勃喜欢称之为“冰淇淋锥模型”）结束。
- en: Introducing a Service Layer, and Using FakeRepository to Unit Test It
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入服务层，并使用FakeRepository进行单元测试
- en: If we look at what our Flask app is doing, there’s quite a lot of what we might
    call *orchestration*—fetching stuff out of our repository, validating our input
    against database state, handling errors, and committing in the happy path. Most
    of these things don’t have anything to do with having a web API endpoint (you’d
    need them if you were building a CLI, for example; see [Appendix C](app03.xhtml#appendix_csvs)),
    and they’re not really things that need to be tested by end-to-end tests.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看看我们的Flask应用程序在做什么，我们会发现有很多我们可能称之为*编排*的东西——从我们的存储库中获取东西，根据数据库状态验证我们的输入，处理错误，并在正常情况下进行提交。这些大部分事情与拥有Web
    API端点无关（例如，如果您正在构建CLI，您会需要它们；请参阅[附录C](app03.xhtml#appendix_csvs)），它们不是真正需要通过端到端测试来测试的东西。
- en: It often makes sense to split out a service layer, sometimes called an *orchestration
    layer* or a *use-case layer*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时将服务层拆分出来是有意义的，有时被称为*编排层*或*用例层*。
- en: Do you remember the `FakeRepository` that we prepared in [Chapter 3](ch03.xhtml#chapter_03_abstractions)?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您还记得我们在[第3章](ch03.xhtml#chapter_03_abstractions)中准备的`FakeRepository`吗？
- en: '*Our fake repository, an in-memory collection of batches (test_services.py)*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的假存储库，一个内存中的批次集合（test_services.py）*'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s where it will come in useful; it lets us test our service layer with
    nice, fast unit tests:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它将会派上用场的地方；它让我们可以使用快速的单元测试来测试我们的服务层：
- en: '*Unit testing with fakes at the service layer (test_services.py)*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*在服务层使用伪造进行单元测试（test_services.py）*'
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO3-1)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO3-1)'
- en: '`FakeRepository` holds the `Batch` objects that will be used by our test.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`FakeRepository`保存了我们测试中将使用的`Batch`对象。'
- en: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO3-2)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO3-2)'
- en: Our services module (*services.py*) will define an `allocate()` service-layer
    function. It will sit between our `allocate_endpoint()` function in the API layer
    and the `allocate()` domain service function from our domain model.^([1](ch04.xhtml#idm45714900481752))
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务模块（*services.py*）将定义一个`allocate()`服务层函数。它将位于API层中的`allocate_endpoint()`函数和领域模型中的`allocate()`领域服务函数之间。^([1](ch04.xhtml#idm45714900481752))
- en: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO3-3)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO3-3)'
- en: We also need a `FakeSession` to fake out the database session, as shown in the
    following code snippet.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个`FakeSession`来伪造数据库会话，如下面的代码片段所示。
- en: '*A fake database session (test_services.py)*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个假的数据库会话（test_services.py）*'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This fake session is only a temporary solution. We’ll get rid of it and make
    things even nicer soon, in [Chapter 6](ch06.xhtml#chapter_06_uow). But in the
    meantime the fake `.commit()` lets us migrate a third test from the E2E layer:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个假的会话只是一个临时解决方案。我们将摆脱它，并很快让事情变得更好，在[第6章](ch06.xhtml#chapter_06_uow)。但与此同时，假的`.commit()`让我们从E2E层迁移了第三个测试：
- en: '*A second test at the service layer (test_services.py)*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务层的第二个测试（test_services.py）*'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A Typical Service Function
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 典型的服务函数
- en: 'We’ll write a service function that looks something like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个类似于以下内容的服务函数：
- en: '*Basic allocation service (services.py)*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*基本分配服务（services.py）*'
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Typical service-layer functions have similar steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的服务层函数有类似的步骤：
- en: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-1)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-1)'
- en: We fetch some objects from the repository.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从存储库中提取一些对象。
- en: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-2)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-2)'
- en: We make some checks or assertions about the request against the current state
    of the world.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对请求针对当前世界的状态进行一些检查或断言。
- en: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-3)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-3)'
- en: We call a domain service.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用一个领域服务。
- en: '[![4](Images/4.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-4)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO4-4)'
- en: If all is well, we save/update any state we’ve changed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们保存/更新我们已经改变的状态。
- en: That last step is a little unsatisfactory at the moment, as our service layer
    is tightly coupled to our database layer. We’ll improve that in [Chapter 6](ch06.xhtml#chapter_06_uow)
    with the Unit of Work pattern.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，最后一步有点不尽如人意，因为我们的服务层与数据库层紧密耦合。我们将在[第6章](ch06.xhtml#chapter_06_uow)中通过工作单元模式改进这一点。
- en: 'But the essentials of the service layer are there, and our Flask app now looks
    a lot cleaner:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但服务层的基本内容都在那里，我们的Flask应用现在看起来更加清晰：
- en: '*Flask app delegating to service layer (flask_app.py)*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*Flask应用委托给服务层（flask_app.py）*'
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO5-1)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO5-1)'
- en: We instantiate a database session and some repository objects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化一个数据库会话和一些存储库对象。
- en: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO5-3)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO5-3)'
- en: We extract the user’s commands from the web request and pass them to a domain
    service.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Web请求中提取用户的命令，并将其传递给领域服务。
- en: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO5-7)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO5-7)'
- en: We return some JSON responses with the appropriate status codes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们返回一些带有适当状态代码的JSON响应。
- en: 'The responsibilities of the Flask app are just standard web stuff: per-request
    session management, parsing information out of POST parameters, response status
    codes, and JSON. All the orchestration logic is in the use case/service layer,
    and the domain logic stays in the domain.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Flask应用的职责只是标准的网络内容：每个请求的会话管理，解析POST参数中的信息，响应状态码和JSON。所有的编排逻辑都在用例/服务层中，领域逻辑保留在领域中。
- en: 'Finally, we can confidently strip down our E2E tests to just two, one for the
    happy path and one for the unhappy path:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以自信地将我们的E2E测试简化为只有两个，一个是快乐路径，一个是不快乐路径：
- en: '*E2E tests only happy and unhappy paths (test_api.py)*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*只有快乐和不快乐路径的E2E测试（test_api.py）*'
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We’ve successfully split our tests into two broad categories: tests about web
    stuff, which we implement end to end; and tests about orchestration stuff, which
    we can test against the service layer in memory.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地将我们的测试分成了两个广泛的类别：关于网络内容的测试，我们实现端到端；关于编排内容的测试，我们可以针对内存中的服务层进行测试。
- en: Why Is Everything Called a Service?
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么一切都叫服务？
- en: Some of you are probably scratching your heads at this point trying to figure
    out exactly what the difference is between a domain service and a service layer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你们中的一些人可能正在思考领域服务和服务层之间的确切区别是什么。
- en: We’re sorry—we didn’t choose the names, or we’d have much cooler and friendlier
    ways to talk about this stuff.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 很抱歉——我们没有选择这些名称，否则我们会有更酷更友好的方式来谈论这些事情。
- en: 'We’re using two things called a *service* in this chapter. The first is an
    *application service* (our service layer). Its job is to handle requests from
    the outside world and to *orchestrate* an operation. What we mean is that the
    service layer *drives* the application by following a bunch of simple steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了两个称为*service*的东西。第一个是*应用服务*（我们的服务层）。它的工作是处理来自外部世界的请求，并*编排*一个操作。我们的意思是服务层通过遵循一系列简单的步骤*驱动*应用程序：
- en: Get some data from the database
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库获取一些数据
- en: Update the domain model
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新领域模型
- en: Persist any changes
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化任何更改
- en: This is the kind of boring work that has to happen for every operation in your
    system, and keeping it separate from business logic helps to keep things tidy.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是系统中每个操作都必须进行的无聊工作，将其与业务逻辑分开有助于保持事物的整洁。
- en: The second type of service is a *domain service*. This is the name for a piece
    of logic that belongs in the domain model but doesn’t sit naturally inside a stateful
    entity or value object. For example, if you were building a shopping cart application,
    you might choose to build taxation rules as a domain service. Calculating tax
    is a separate job from updating the cart, and it’s an important part of the model,
    but it doesn’t seem right to have a persisted entity for the job. Instead a stateless
    TaxCalculator class or a `calculate_tax` function can do the job.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型的服务是*领域服务*。这是指属于领域模型但不自然地位于有状态实体或值对象内部的逻辑部分的名称。例如，如果您正在构建一个购物车应用程序，您可能会选择将税收规则构建为领域服务。计算税收是与更新购物车分开的工作，它是模型的重要部分，但似乎不应该为该工作创建一个持久化实体。而是一个无状态的TaxCalculator类或`calculate_tax`函数可以完成这项工作。
- en: Putting Things in Folders to See Where It All Belongs
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将事物放入文件夹中以查看它们的归属
- en: As our application gets bigger, we’ll need to keep tidying our directory structure.
    The layout of our project gives us useful hints about what kinds of object we’ll
    find in each file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序变得更大，我们需要不断整理我们的目录结构。我们项目的布局为我们提供了关于每个文件中可能包含的对象类型的有用提示。
- en: 'Here’s one way we could organize things:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以组织事物的一种方式：
- en: '*Some subfolders*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*一些子文件夹*'
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-1)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-1)'
- en: Let’s have a folder for our domain model. Currently that’s just one file, but
    for a more complex application, you might have one file per class; you might have
    helper parent classes for `Entity`, `ValueObject`, and `Aggregate`, and you might
    add an *exceptions.py* for domain-layer exceptions and, as you’ll see in [Part II](part02.xhtml#part2),
    *commands.py* and *events.py*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的领域模型创建一个文件夹。目前只有一个文件，但对于更复杂的应用程序，您可能会为每个类创建一个文件；您可能会为`Entity`、`ValueObject`和`Aggregate`创建帮助父类，并且您可能会添加一个*exceptions.py*用于领域层异常，以及如您将在[第二部分](part02.xhtml#part2)中看到的*commands.py*和*events.py*。
- en: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-2)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-2)'
- en: We’ll distinguish the service layer. Currently that’s just one file called *services.py*
    for our service-layer functions. You could add service-layer exceptions here,
    and as you’ll see in [Chapter 5](ch05.xhtml#chapter_05_high_gear_low_gear), we’ll
    add *unit_of_work.py*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将区分服务层。目前只有一个名为*services.py*的文件用于我们的服务层函数。您可以在这里添加服务层异常，并且正如您将在[第5章](ch05.xhtml#chapter_05_high_gear_low_gear)中看到的那样，我们将添加*unit_of_work.py*。
- en: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-3)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-3)'
- en: '*Adapters* is a nod to the ports and adapters terminology. This will fill up
    with any other abstractions around external I/O (e.g., a *redis_client.py*). Strictly
    speaking, you would call these *secondary* adapters or *driven* adapters, or sometimes
    *inward-facing* adapters.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*适配器*是对端口和适配器术语的一种称呼。这将填充任何其他关于外部I/O的抽象（例如*redis_client.py*）。严格来说，您可以将这些称为*secondary*适配器或*driven*适配器，有时也称为*inward-facing*适配器。'
- en: '[![4](Images/4.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-4)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_our_first_use_case___span_class__keep_together__flask_api_and_service_layer__span__CO6-4)'
- en: Entrypoints are the places we drive our application from. In the official ports
    and adapters terminology, these are adapters too, and are referred to as *primary*,
    *driving*, or *outward-facing* adapters.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 入口点是我们驱动应用程序的地方。在官方端口和适配器术语中，这些也是适配器，并被称为*primary*、*driving*或*outward-facing*适配器。
- en: What about ports? As you may remember, they are the abstract interfaces that
    the adapters implement. We tend to keep them in the same file as the adapters
    that implement them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 端口呢？您可能还记得，它们是适配器实现的抽象接口。我们倾向于将它们与实现它们的适配器放在同一个文件中。
- en: Wrap-Up
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Adding the service layer has really bought us quite a lot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 添加服务层确实为我们带来了很多好处：
- en: 'Our Flask API endpoints become very thin and easy to write: their only responsibility
    is doing “web stuff,” such as parsing JSON and producing the right HTTP codes
    for happy or unhappy cases.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的Flask API端点变得非常轻量且易于编写：它们唯一的责任就是做“网络事务”，比如解析JSON并为happy或unhappy情况生成正确的HTTP代码。
- en: We’ve defined a clear API for our domain, a set of use cases or entrypoints
    that can be used by any adapter without needing to know anything about our domain
    model classes—whether that’s an API, a CLI (see [Appendix C](app03.xhtml#appendix_csvs)),
    or the tests! They’re an adapter for our domain too.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为我们的领域定义了一个清晰的API，一组用例或入口点，可以被任何适配器使用，而无需了解我们的领域模型类的任何信息 - 无论是API、CLI（参见[附录C](app03.xhtml#appendix_csvs)），还是测试！它们也是我们领域的适配器。
- en: We can write tests in “high gear” by using the service layer, leaving us free
    to refactor the domain model in any way we see fit. As long as we can still deliver
    the same use cases, we can experiment with new designs without needing to rewrite
    a load of tests.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用服务层，我们可以以“高速”编写测试，从而使我们可以自由地以任何我们认为合适的方式重构领域模型。只要我们仍然可以提供相同的用例，我们就可以尝试新的设计，而无需重写大量的测试。
- en: And our test pyramid is looking good—the bulk of our tests are fast unit tests,
    with just the bare minimum of E2E and integration tests.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的测试金字塔看起来不错 - 我们大部分的测试都是快速的单元测试，只有最少量的E2E和集成测试。
- en: The DIP in Action
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DIP的实际应用
- en: '[Figure 4-3](#service_layer_diagram_abstract_dependencies) shows the dependencies
    of our service layer: the domain model and `AbstractRepository` (the port, in
    ports and adapters terminology).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-3显示了我们服务层的依赖关系：领域模型和`AbstractRepository`（在端口和适配器术语中称为端口）。
- en: When we run the tests, [Figure 4-4](#service_layer_diagram_test_dependencies)
    shows how we implement the abstract dependencies by using `FakeRepository` (the
    adapter).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行测试时，[图4-4](#service_layer_diagram_test_dependencies)显示了我们如何使用`FakeRepository`（适配器）来实现抽象依赖。
- en: And when we actually run our app, we swap in the “real” dependency shown in
    [Figure 4-5](#service_layer_diagram_runtime_dependencies).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们实际运行我们的应用程序时，我们会在[图4-5](#service_layer_diagram_runtime_dependencies)中显示的“真实”依赖项中进行交换。
- en: '![apwp 0403](Images/apwp_0403.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0403](Images/apwp_0403.png)'
- en: Figure 4-3\. Abstract dependencies of the service layer
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-3\. 服务层的抽象依赖
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![apwp 0404](Images/apwp_0404.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0404](Images/apwp_0404.png)'
- en: Figure 4-4\. Tests provide an implementation of the abstract dependency
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-4\. 测试提供了抽象依赖的实现
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![apwp 0405](Images/apwp_0405.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0405](Images/apwp_0405.png)'
- en: Figure 4-5\. Dependencies at runtime
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-5\. 运行时的依赖关系
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Wonderful.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。
- en: Let’s pause for [Table 4-1](#chapter_04_service_layer_tradeoffs), in which we
    consider the pros and cons of having a service layer at all.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂停一下，看看[表4-1](#chapter_04_service_layer_tradeoffs)，在其中我们考虑是否要有一个服务层的利弊。
- en: 'Table 4-1\. Service layer: the trade-offs'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 表4-1\. 服务层：权衡
- en: '| Pros | Cons |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 缺点 |'
- en: '| --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: We have a single place to capture all the use cases for our application.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个捕获应用程序所有用例的单一位置。
- en: We’ve placed our clever domain logic behind an API, which leaves us free to
    refactor.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将聪明的领域逻辑放在了一个API后面，这使我们可以自由地进行重构。
- en: We have cleanly separated “stuff that talks HTTP” from “stuff that talks allocation.”
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经清晰地将“与HTTP通信的东西”与“与分配通信的东西”分开。
- en: When combined with the Repository pattern and `FakeRepository`, we have a nice
    way of writing tests at a higher level than the domain layer; we can test more
    of our workflow without needing to use integration tests (read on to [Chapter 5](ch05.xhtml#chapter_05_high_gear_low_gear)
    for more elaboration on this).
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与存储库模式和`FakeRepository`结合使用时，我们有了一种很好的方法来以比领域层更高的级别编写测试；我们可以在不需要使用集成测试的情况下测试我们的工作流程（详见[第5章](ch05.xhtml#chapter_05_high_gear_low_gear)以获取更多关于此的阐述）。
- en: '|'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: If your app is *purely* a web app, your controllers/view functions can be the
    single place to capture all the use cases.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序*纯粹*是一个Web应用程序，你的控制器/视图函数可以是捕获所有用例的唯一位置。
- en: It’s yet another layer of abstraction.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是另一种抽象层。
- en: Putting too much logic into the service layer can lead to the *Anemic Domain*
    anti-pattern. It’s better to introduce this layer after you spot orchestration
    logic creeping into your controllers.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将太多的逻辑放入服务层可能会导致*贫血领域*反模式。最好在发现编排逻辑渗入控制器后引入这一层。
- en: You can get a lot of the benefits that come from having rich domain models by
    simply pushing logic out of your controllers and down to the model layer, without
    needing to add an extra layer in between (aka “fat models, thin controllers”).
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过简单地将逻辑从控制器推到模型层，你可以获得丰富领域模型带来的许多好处，而无需在中间添加额外的层（即“胖模型，瘦控制器”）。
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'But there are still some bits of awkwardness to tidy up:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 但仍然有一些需要整理的不便之处：
- en: The service layer is still tightly coupled to the domain, because its API is
    expressed in terms of `OrderLine` objects. In [Chapter 5](ch05.xhtml#chapter_05_high_gear_low_gear),
    we’ll fix that and talk about the way that the service layer enables more productive
    TDD.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务层仍然与领域紧密耦合，因为其API是以`OrderLine`对象表示的。在[第5章](ch05.xhtml#chapter_05_high_gear_low_gear)中，我们将解决这个问题，并讨论服务层如何实现更高效的TDD。
- en: The service layer is tightly coupled to a `session` object. In [Chapter 6](ch06.xhtml#chapter_06_uow),
    we’ll introduce one more pattern that works closely with the Repository and Service
    Layer patterns, the Unit of Work pattern, and everything will be absolutely lovely.
    You’ll see!
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务层与`session`对象紧密耦合。在[第6章](ch06.xhtml#chapter_06_uow)中，我们将介绍另一种与存储库和服务层模式紧密配合的模式，即工作单元模式，一切都会非常美好。你会看到的！
- en: ^([1](ch04.xhtml#idm45714900481752-marker)) Service-layer services and domain
    services do have confusingly similar names. We tackle this topic later in [“Why
    Is Everything Called a Service?”](#why_is_everything_a_service).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.xhtml#idm45714900481752-marker)) 服务层服务和领域服务的名称确实非常相似。我们稍后会解决这个问题，详见[“为什么一切都被称为服务？”](#why_is_everything_a_service)。

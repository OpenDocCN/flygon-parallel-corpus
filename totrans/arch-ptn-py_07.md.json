["```py\n$ grep -c test_ test_*.py\ntests/unit/test_allocate.py:4\ntests/unit/test_batches.py:8\ntests/unit/test_services.py:3\n\ntests/integration/test_orm.py:6\ntests/integration/test_repository.py:2\n\ntests/e2e/test_api.py:2\n```", "```py\n# domain-layer test:\ndef test_prefers_current_stock_batches_to_shipments():\n    in_stock_batch = Batch(\"in-stock-batch\", \"RETRO-CLOCK\", 100, eta=None)\n    shipment_batch = Batch(\"shipment-batch\", \"RETRO-CLOCK\", 100, eta=tomorrow)\n    line = OrderLine(\"oref\", \"RETRO-CLOCK\", 10)\n\n    allocate(line, [in_stock_batch, shipment_batch])\n\n    assert in_stock_batch.available_quantity == 90\n    assert shipment_batch.available_quantity == 100\n\n# service-layer test:\ndef test_prefers_warehouse_batches_to_shipments():\n    in_stock_batch = Batch(\"in-stock-batch\", \"RETRO-CLOCK\", 100, eta=None)\n    shipment_batch = Batch(\"shipment-batch\", \"RETRO-CLOCK\", 100, eta=tomorrow)\n    repo = FakeRepository([in_stock_batch, shipment_batch])\n    session = FakeSession()\n\n    line = OrderLine('oref', \"RETRO-CLOCK\", 10)\n\n    services.allocate(line, repo, session)\n\n    assert in_stock_batch.available_quantity == 90\n    assert shipment_batch.available_quantity == 100\n```", "```py\n[ditaa, apwp_0501]\n| Low feedback                                                   High feedback |\n| Low barrier to change                                 High barrier to change |\n| High system coverage                                        Focused coverage |\n|                                                                              |\n| <---------                                                       ----------> |\n|                                                                              |\n| API Tests                  Service-Layer Tests                  Domain Tests |\n```", "```py\ndef allocate(line: OrderLine, repo: AbstractRepository, session) -> str:\n```", "```py\ndef allocate(\n        orderid: str, sku: str, qty: int, repo: AbstractRepository, session\n) -> str:\n```", "```py\ndef test_returns_allocation():\n    batch = model.Batch(\"batch1\", \"COMPLICATED-LAMP\", 100, eta=None)\n    repo = FakeRepository([batch])\n\n    result = services.allocate(\"o1\", \"COMPLICATED-LAMP\", 10, repo, FakeSession())\n    assert result == \"batch1\"\n```", "```py\nclass FakeRepository(set):\n\n    @staticmethod\n    def for_batch(ref, sku, qty, eta=None):\n        return FakeRepository([\n            model.Batch(ref, sku, qty, eta),\n        ])\n\n    ...\n\ndef test_returns_allocation():\n    repo = FakeRepository.for_batch(\"batch1\", \"COMPLICATED-LAMP\", 100, eta=None)\n    result = services.allocate(\"o1\", \"COMPLICATED-LAMP\", 10, repo, FakeSession())\n    assert result == \"batch1\"\n```", "```py\ndef test_add_batch():\n    repo, session = FakeRepository([]), FakeSession()\n    services.add_batch(\"b1\", \"CRUNCHY-ARMCHAIR\", 100, None, repo, session)\n    assert repo.get(\"b1\") is not None\n    assert session.committed\n```", "```py\ndef add_batch(\n        ref: str, sku: str, qty: int, eta: Optional[date],\n        repo: AbstractRepository, session,\n):\n    repo.add(model.Batch(ref, sku, qty, eta))\n    session.commit()\n\ndef allocate(\n        orderid: str, sku: str, qty: int, repo: AbstractRepository, session\n) -> str:\n    ...\n```", "```py\ndef test_allocate_returns_allocation():\n    repo, session = FakeRepository([]), FakeSession()\n    services.add_batch(\"batch1\", \"COMPLICATED-LAMP\", 100, None, repo, session)\n    result = services.allocate(\"o1\", \"COMPLICATED-LAMP\", 10, repo, session)\n    assert result == \"batch1\"\n\ndef test_allocate_errors_for_invalid_sku():\n    repo, session = FakeRepository([]), FakeSession()\n    services.add_batch(\"b1\", \"AREALSKU\", 100, None, repo, session)\n\n    with pytest.raises(services.InvalidSku, match=\"Invalid sku NONEXISTENTSKU\"):\n        services.allocate(\"o1\", \"NONEXISTENTSKU\", 10, repo, FakeSession())\n```", "```py\n@app.route(\"/add_batch\", methods=['POST'])\ndef add_batch():\n    session = get_session()\n    repo = repository.SqlAlchemyRepository(session)\n    eta = request.json['eta']\n    if eta is not None:\n        eta = datetime.fromisoformat(eta).date()\n    services.add_batch(\n        request.json['ref'], request.json['sku'], request.json['qty'], eta,\n        repo, session\n    )\n    return 'OK', 201\n```", "```py\ndef post_to_add_batch(ref, sku, qty, eta):\n    url = config.get_api_url()\n    r = requests.post(\n        f'{url}/add_batch',\n        json={'ref': ref, 'sku': sku, 'qty': qty, 'eta': eta}\n    )\n    assert r.status_code == 201\n\n@pytest.mark.usefixtures('postgres_db')\n@pytest.mark.usefixtures('restart_api')\ndef test_happy_path_returns_201_and_allocated_batch():\n    sku, othersku = random_sku(), random_sku('other')\n    earlybatch = random_batchref(1)\n    laterbatch = random_batchref(2)\n    otherbatch = random_batchref(3)\n    post_to_add_batch(laterbatch, sku, 100, '2011-01-02')\n    post_to_add_batch(earlybatch, sku, 100, '2011-01-01')\n    post_to_add_batch(otherbatch, othersku, 100, None)\n    data = {'orderid': random_orderid(), 'sku': sku, 'qty': 3}\n    url = config.get_api_url()\n    r = requests.post(f'{url}/allocate', json=data)\n    assert r.status_code == 201\n    assert r.json()['batchref'] == earlybatch\n```"]
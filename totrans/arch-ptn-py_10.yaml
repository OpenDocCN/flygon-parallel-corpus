- en: Part II. Event-Driven Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分。事件驱动架构
- en: I’m sorry that I long ago coined the term “objects” for this topic because it
    gets many people to focus on the lesser idea.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 很抱歉我很久以前为这个主题创造了“对象”这个术语，因为它让很多人关注了次要的想法。
- en: '>'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: The big idea is “messaging."…The key in making great and growable systems is
    much more to design how its modules communicate rather than what their internal
    properties and behaviors should be.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 重要的想法是“消息传递”……设计出伟大且可扩展的系统的关键更多地在于设计其模块之间的通信方式，而不是它们的内部属性和行为应该是什么。
- en: '>'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Alan Kay
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 艾伦·凯
- en: It’s all very well being able to write *one* domain model to manage a single
    bit of business process, but what happens when we need to write *many* models?
    In the real world, our applications sit within an organization and need to exchange
    information with other parts of the system. You may remember our context diagram
    shown in [Figure II-1](#allocation_context_diagram_again).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 能够编写*一个*领域模型来管理一个业务流程的一小部分是非常好的，但当我们需要编写*许多*模型时会发生什么？在现实世界中，我们的应用程序位于一个组织中，并且需要与系统的其他部分交换信息。您可能还记得我们在[图II-1](#allocation_context_diagram_again)中显示的上下文图。
- en: 'Faced with this requirement, many teams reach for microservices integrated
    via HTTP APIs. But if they’re not careful, they’ll end up producing the most chaotic
    mess of all: the distributed big ball of mud.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 面对这个要求，许多团队会选择通过HTTP API集成的微服务。但如果他们不小心，最终会产生最混乱的分布式大泥球。
- en: In Part II, we’ll show how the techniques from [Part I](part01.xhtml#part1)
    can be extended to distributed systems. We’ll zoom out to look at how we can compose
    a system from many small components that interact through asynchronous message
    passing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分中，我们将展示如何将第一部分的技术扩展到分布式系统。我们将放大看看如何通过异步消息传递来组合一个系统的许多小组件之间的交互。
- en: We’ll see how our Service Layer and Unit of Work patterns allow us to reconfigure
    our app to run as an asynchronous message processor, and how event-driven systems
    help us to decouple aggregates and applications from one another.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到我们的服务层和工作单元模式如何允许我们重新配置我们的应用程序以作为异步消息处理器运行，以及事件驱动系统如何帮助我们将聚合和应用程序相互解耦。
- en: '![apwp 0102](Images/apwp_0102.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0102](Images/apwp_0102.png)'
- en: Figure II-1\. But exactly how will all these systems talk to each other?
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图II-1。但所有这些系统究竟如何相互通信呢？
- en: 'We’ll look at the following patterns and techniques:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究以下模式和技术：
- en: Domain Events
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 领域事件
- en: Trigger workflows that cross consistency boundaries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 触发跨一致性边界的工作流。
- en: Message Bus
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线
- en: Provide a unified way of invoking use cases from any endpoint.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个统一的方式从任何端点调用用例。
- en: CQRS
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CQRS
- en: Separating reads and writes avoids awkward compromises in an event-driven architecture
    and enables performance and scalability improvements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 分离读和写避免了事件驱动架构中的尴尬妥协，并实现了性能和可扩展性的改进。
- en: Plus, we’ll add a dependency injection framework. This has nothing to do with
    event-driven architecture per se, but it tidies up an awful lot of loose ends.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将添加一个依赖注入框架。这与事件驱动架构本身无关，但它整理了许多松散的尾巴。

- en: Chapter 8\. Events and the Message Bus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。事件和消息总线
- en: So far we’ve spent a lot of time and energy on a simple problem that we could
    easily have solved with Django. You might be asking if the increased testability
    and expressiveness are *really* worth all the effort.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经花了很多时间和精力解决一个我们本可以很容易用Django解决的简单问题。你可能会问，增加的可测试性和表现力是否*真的*值得所有的努力。
- en: 'In practice, though, we find that it’s not the obvious features that make a
    mess of our codebases: it’s the goop around the edge. It’s reporting, and permissions,
    and workflows that touch a zillion objects.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在实践中，我们发现搞乱我们代码库的并不是明显的功能，而是边缘的混乱。它是报告、权限和涉及无数对象的工作流。
- en: 'Our example will be a typical notification requirement: when we can’t allocate
    an order because we’re out of stock, we should alert the buying team. They’ll
    go and fix the problem by buying more stock, and all will be well.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的例子将是一个典型的通知要求：当我们因为库存不足而无法分配订单时，我们应该通知采购团队。他们会去解决问题，购买更多的库存，一切都会好起来。
- en: For a first version, our product owner says we can just send the alert by email.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个版本，我们的产品所有者说我们可以通过电子邮件发送警报。
- en: Let’s see how our architecture holds up when we need to plug in some of the
    mundane stuff that makes up so much of our systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们需要插入一些构成我们系统很大一部分的平凡事物时，我们的架构是如何保持的。
- en: We’ll start by doing the simplest, most expeditious thing, and talk about why
    it’s exactly this kind of decision that leads us to the Big Ball of Mud.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先做最简单、最迅速的事情，并讨论为什么正是这种决定导致了我们的大泥球。
- en: Then we’ll show how to use the *Domain Events* pattern to separate side effects
    from our use cases, and how to use a simple *Message Bus* pattern for triggering
    behavior based on those events. We’ll show a few options for creating those events
    and how to pass them to the message bus, and finally we’ll show how the Unit of
    Work pattern can be modified to connect the two together elegantly, as previewed
    in [Figure 8-1](#message_bus_diagram).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将展示如何使用*领域事件*模式将副作用与我们的用例分离，并如何使用简单的*消息总线*模式来触发基于这些事件的行为。我们将展示一些创建这些事件的选项以及如何将它们传递给消息总线，最后我们将展示如何修改工作单元模式以优雅地将这两者连接在一起，正如[图8-1](#message_bus_diagram)中预览的那样。
- en: '![apwp 0801](Images/apwp_0801.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0801](Images/apwp_0801.png)'
- en: Figure 8-1\. Events flowing through the system
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-1。事件在系统中流动
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_08_events_and_message_bus branch
    [on GitHub](https://oreil.ly/M-JuL):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码在GitHub的chapter_08_events_and_message_bus分支中[（https://oreil.ly/M-JuL）](https://oreil.ly/M-JuL)：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Avoiding Making a Mess
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免搞乱
- en: So. Email alerts when we run out of stock. When we have new requirements like
    ones that *really* have nothing to do with the core domain, it’s all too easy
    to start dumping these things into our web controllers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以。当我们库存不足时发送电子邮件提醒。当我们有新的要求，比如*真的*与核心领域无关的要求时，很容易开始将这些东西倒入我们的网络控制器中。
- en: First, Let’s Avoid Making a Mess of Our Web Controllers
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先，让我们避免把我们的网络控制器搞乱
- en: 'As a one-off hack, this *might* be OK:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一次性的黑客，这*可能*还可以：
- en: '*Just whack it in the endpoint—what could go wrong? (src/allocation/entrypoints/flask_app.py)*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*只是把它放在端点上——会有什么问题吗？(src/allocation/entrypoints/flask_app.py)*'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: …but it’s easy to see how we can quickly end up in a mess by patching things
    up like this. Sending email isn’t the job of our HTTP layer, and we’d like to
    be able to unit test this new feature.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '...但很容易看出，我们很快就会因为这样修补东西而陷入混乱。发送电子邮件不是我们的HTTP层的工作，我们希望能够对这个新功能进行单元测试。'
- en: And Let’s Not Make a Mess of Our Model Either
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有，让我们不要搞乱我们的模型
- en: 'Assuming we don’t want to put this code into our web controllers, because we
    want them to be as thin as possible, we may look at putting it right at the source,
    in the model:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们不想把这段代码放到我们的网络控制器中，因为我们希望它们尽可能薄，我们可以考虑把它放在源头，即模型中：
- en: '*Email-sending code in our model isn’t lovely either (src/allocation/domain/model.py)*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们模型中的发送电子邮件代码也不够好(src/allocation/domain/model.py)*'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But that’s even worse! We don’t want our model to have any dependencies on infrastructure
    concerns like `email.send_mail`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但这甚至更糟！我们不希望我们的模型对`email.send_mail`这样的基础设施问题有任何依赖。
- en: This email-sending thing is unwelcome *goop* messing up the nice clean flow
    of our system. What we’d like is to keep our domain model focused on the rule
    “You can’t allocate more stuff than is actually available.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个发送电子邮件的东西是不受欢迎的*混乱*，破坏了我们系统的干净流程。我们希望的是保持我们的领域模型专注于规则“你不能分配比实际可用的东西更多”。
- en: The domain model’s job is to know that we’re out of stock, but the responsibility
    of sending an alert belongs elsewhere. We should be able to turn this feature
    on or off, or to switch to SMS notifications instead, without needing to change
    the rules of our domain model.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 领域模型的工作是知道我们的库存不足，但发送警报的责任属于其他地方。我们应该能够打开或关闭此功能，或者切换到短信通知，而无需更改我们领域模型的规则。
- en: Or the Service Layer!
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 或者服务层！
- en: 'The requirement “Try to allocate some stock, and send an email if it fails”
    is an example of workflow orchestration: it’s a set of steps that the system has
    to follow to achieve a goal.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要求“尝试分配一些库存，并在失败时发送电子邮件”是工作流编排的一个例子：这是系统必须遵循的一组步骤，以实现一个目标。
- en: 'We’ve written a service layer to manage orchestration for us, but even here
    the feature feels out of place:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一个服务层来为我们管理编排，但即使在这里，这个功能也感觉不合适：
- en: '*And in the service layer, it’s out of place (src/allocation/service_layer/services.py)*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*而在服务层，它是不合适的(src/allocation/service_layer/services.py)*'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Catching an exception and reraising it? It could be worse, but it’s definitely
    making us unhappy. Why is it so hard to find a suitable home for this code?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获异常并重新引发它？这可能更糟，但肯定会让我们不开心。为什么这么难找到一个合适的家来放置这段代码呢？
- en: Single Responsibility Principle
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一责任原则
- en: Really, this is a violation of the *single responsibility principle* (SRP).^([1](ch08.xhtml#idm45714890821688))
    Our use case is allocation. Our endpoint, service function, and domain methods
    are all called `allocate`, not `allocate_and_send_mail_if_out_of_stock`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是*单一责任原则*（SRP）的违反。^([1](ch08.xhtml#idm45714890821688))我们的用例是分配。我们的端点、服务函数和领域方法都称为`allocate`，而不是`allocate_and_send_mail_if_out_of_stock`。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'Rule of thumb: if you can’t describe what your function does without using
    words like “then” or “and,” you might be violating the SRP.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 经验法则：如果你不能在不使用“然后”或“和”这样的词语描述你的函数做什么，你可能会违反SRP。
- en: One formulation of the SRP is that each class should have only a single reason
    to change. When we switch from email to SMS, we shouldn’t have to update our `allocate()`
    function, because that’s clearly a separate responsibility.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SRP的一个表述是每个类只应该有一个改变的原因。当我们从电子邮件切换到短信时，我们不应该更新我们的`allocate()`函数，因为这显然是一个单独的责任。
- en: To solve the problem, we’re going to split the orchestration into separate steps
    so that the different concerns don’t get tangled up.^([2](ch08.xhtml#idm45714890815656))
    The domain model’s job is to know that we’re out of stock, but the responsibility
    of sending an alert belongs elsewhere. We should be able to turn this feature
    on or off, or to switch to SMS notifications instead, without needing to change
    the rules of our domain model.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将把编排分成单独的步骤，这样不同的关注点就不会纠缠在一起。^([2](ch08.xhtml#idm45714890815656))领域模型的工作是知道我们的库存不足，但发送警报的责任属于其他地方。我们应该能够随时打开或关闭此功能，或者切换到短信通知，而无需更改我们领域模型的规则。
- en: We’d also like to keep the service layer free of implementation details. We
    want to apply the dependency inversion principle to notifications so that our
    service layer depends on an abstraction, in the same way as we avoid depending
    on the database by using a unit of work.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也希望保持服务层不受实现细节的影响。我们希望将依赖倒置原则应用于通知，使我们的服务层依赖于一个抽象，就像我们通过使用工作单元来避免依赖于数据库一样。
- en: All Aboard the Message Bus!
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全体乘客上车！
- en: The patterns we’re going to introduce here are *Domain Events* and the *Message
    Bus*. We can implement them in a few ways, so we’ll show a couple before settling
    on the one we like most.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要介绍的模式是*领域事件*和*消息总线*。我们可以以几种方式实现它们，所以我们将展示一些方式，然后选择我们最喜欢的方式。
- en: The Model Records Events
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型记录事件
- en: First, rather than being concerned about emails, our model will be in charge
    of recording *events*—facts about things that have happened. We’ll use a message
    bus to respond to events and invoke a new operation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的模型不再关心电子邮件，而是负责记录*事件*——关于已发生事情的事实。我们将使用消息总线来响应事件并调用新的操作。
- en: Events Are Simple Dataclasses
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件是简单的数据类
- en: An *event* is a kind of *value object*. Events don’t have any behavior, because
    they’re pure data structures. We always name events in the language of the domain,
    and we think of them as part of our domain model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*事件*是一种*值对象*。事件没有任何行为，因为它们是纯数据结构。我们总是用领域的语言命名事件，并将其视为我们领域模型的一部分。'
- en: 'We could store them in *model.py*, but we may as well keep them in their own
    file (this might be a good time to consider refactoring out a directory called
    *domain* so that we have *domain/model.py* and *domain/events.py*):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将它们存储在*model.py*中，但我们可能会将它们保留在它们自己的文件中（现在可能是考虑重构出一个名为*domain*的目录的好时机，这样我们就有*domain/model.py*和*domain/events.py*）：
- en: '*Event classes (src/allocation/domain/events.py)*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*事件类（src/allocation/domain/events.py）*'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO1-1)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO1-1)'
- en: Once we have a number of events, we’ll find it useful to have a parent class
    that can store common attributes. It’s also useful for type hints in our message
    bus, as you’ll see shortly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了一些事件，我们会发现有一个可以存储共同属性的父类很有用。它对于我们消息总线中的类型提示也很有用，您很快就会看到。
- en: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO1-2)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO1-2)'
- en: '`dataclasses` are great for domain events too.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataclasses`对于领域事件也很好。'
- en: The Model Raises Events
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型引发事件
- en: When our domain model records a fact that happened, we say it *raises* an event.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的领域模型记录发生的事实时，我们说它*引发*了一个事件。
- en: 'Here’s what it will look like from the outside; if we ask `Product` to allocate
    but it can’t, it should *raise* an event:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从外部看，它将是这样的；如果我们要求`Product`分配但无法分配，它应该*引发*一个事件：
- en: '*Test our aggregate to raise events (tests/unit/test_product.py)*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试我们的聚合以引发事件（tests/unit/test_product.py）*'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO2-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO2-1)'
- en: Our aggregate will expose a new attribute called `.events` that will contain
    a list of facts about what has happened, in the form of `Event` objects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的聚合将公开一个名为`.events`的新属性，其中包含关于发生了什么事情的事实列表，以`Event`对象的形式。
- en: 'Here’s what the model looks like on the inside:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 模型在内部的样子如下：
- en: '*The model raises a domain event (src/allocation/domain/model.py)*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*模型引发领域事件（src/allocation/domain/model.py）*'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO3-1)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO3-1)'
- en: Here’s our new `.events` attribute in use.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们新的`.events`属性的用法。
- en: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO3-2)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO3-2)'
- en: Rather than invoking some email-sending code directly, we record those events
    at the place they occur, using only the language of the domain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是直接调用一些发送电子邮件的代码，而是在事件发生的地方记录这些事件，只使用领域的语言。
- en: '[![3](Images/3.png)](#co_events_and_the_message_bus_CO3-3)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_events_and_the_message_bus_CO3-3)'
- en: We’re also going to stop raising an exception for the out-of-stock case. The
    event will do the job the exception was doing.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将停止为缺货情况引发异常。事件将执行异常的工作。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’re actually addressing a code smell we had until now, which is that we were
    [using exceptions for control flow](https://oreil.ly/IQB51). In general, if you’re
    implementing domain events, don’t raise exceptions to describe the same domain
    concept. As you’ll see later when we handle events in the Unit of Work pattern,
    it’s confusing to have to reason about events and exceptions together.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们正在解决到目前为止我们一直存在的代码异味，即我们一直在[使用异常进行控制流](https://oreil.ly/IQB51)。一般来说，如果你正在实现领域事件，不要引发异常来描述相同的领域概念。正如你将在稍后处理工作单元模式中处理事件时所看到的，必须同时考虑事件和异常是令人困惑的。
- en: The Message Bus Maps Events to Handlers
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息总线将事件映射到处理程序
- en: 'A message bus basically says, “When I see this event, I should invoke the following
    handler function.” In other words, it’s a simple publish-subscribe system. Handlers
    are *subscribed* to receive events, which we publish to the bus. It sounds harder
    than it is, and we usually implement it with a dict:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线基本上是说：“当我看到这个事件时，我应该调用以下处理程序函数。”换句话说，这是一个简单的发布-订阅系统。处理程序*订阅*接收事件，我们将其发布到总线上。听起来比实际困难，我们通常用字典来实现它：
- en: '*Simple message bus (src/allocation/service_layer/messagebus.py)*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单消息总线（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the message bus as implemented doesn’t give us concurrency because
    only one handler will run at a time. Our objective isn’t to support parallel threads
    but to separate tasks conceptually, and to keep each UoW as small as possible.
    This helps us to understand the codebase because the “recipe” for how to run each
    use case is written in a single place. See the following sidebar.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，实现的消息总线并不会给我们并发性，因为一次只有一个处理程序会运行。我们的目标不是支持并行线程，而是在概念上分离任务，并尽可能使每个UoW尽可能小。这有助于我们理解代码库，因为每个用例的运行“配方”都写在一个地方。请参阅以下侧边栏。
- en: 'Option 1: The Service Layer Takes Events from the Model and Puts Them on the
    Message Bus'
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项1：服务层从模型中获取事件并将其放在消息总线上
- en: Our domain model raises events, and our message bus will call the right handlers
    whenever an event happens. Now all we need is to connect the two. We need something
    to catch events from the model and pass them to the message bus—the *publishing*
    step.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的领域模型会触发事件，我们的消息总线会在事件发生时调用正确的处理程序。现在我们需要的是连接这两者。我们需要某种方式来捕捉模型中的事件并将它们传递给消息总线——*发布*步骤。
- en: 'The simplest way to do this is by adding some code into our service layer:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是在我们的服务层中添加一些代码：
- en: '*The service layer with an explicit message bus (src/allocation/service_layer/services.py)*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*具有显式消息总线的服务层（src/allocation/service_layer/services.py）*'
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO4-1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO4-1)'
- en: We keep the `try/finally` from our ugly earlier implementation (we haven’t gotten
    rid of *all* exceptions yet, just `OutOfStock`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保留了我们丑陋的早期实现中的`try/finally`（我们还没有摆脱*所有*异常，只是`OutOfStock`）。
- en: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO4-3)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO4-3)'
- en: But now, instead of depending directly on an email infrastructure, the service
    layer is just in charge of passing events from the model up to the message bus.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，服务层不再直接依赖于电子邮件基础设施，而是负责将模型中的事件传递到消息总线。
- en: That already avoids some of the ugliness that we had in our naive implementation,
    and we have several systems that work like this one, in which the service layer
    explicitly collects events from aggregates and passes them to the message bus.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经避免了我们在天真的实现中遇到的一些丑陋，我们有几个系统都是这样工作的，其中服务层明确地从聚合中收集事件并将其传递给消息总线。
- en: 'Option 2: The Service Layer Raises Its Own Events'
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项2：服务层引发自己的事件
- en: 'Another variant on this that we’ve used is to have the service layer in charge
    of creating and raising events directly, rather than having them raised by the
    domain model:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的另一种变体是让服务层负责直接创建和触发事件，而不是由领域模型触发：
- en: '*Service layer calls messagebus.handle directly (src/allocation/service_layer/services.py)*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务层直接调用messagebus.handle（src/allocation/service_layer/services.py）*'
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO5-1)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO5-1)'
- en: 'As before, we commit even if we fail to allocate because the code is simpler
    this way and it’s easier to reason about: we always commit unless something goes
    wrong. Committing when we haven’t changed anything is safe and keeps the code
    uncluttered.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，即使我们无法分配，我们也会提交，因为这样代码更简单，更容易理解：除非出现问题，我们总是提交。在我们没有做任何更改时提交是安全的，并且保持代码整洁。
- en: Again, we have applications in production that implement the pattern in this
    way. What works for you will depend on the particular trade-offs you face, but
    we’d like to show you what we think is the most elegant solution, in which we
    put the unit of work in charge of collecting and raising events.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们的生产应用程序以这种方式实现了该模式。对你来说，适合你的方式将取决于你面临的特定权衡，但我们想向你展示我们认为最优雅的解决方案，即让工作单元负责收集和引发事件。
- en: 'Option 3: The UoW Publishes Events to the Message Bus'
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项3：UoW将事件发布到消息总线
- en: 'The UoW already has a `try/finally`, and it knows about all the aggregates
    currently in play because it provides access to the repository. So it’s a good
    place to spot events and pass them to the message bus:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: UoW已经有了`try/finally`，并且它知道当前正在使用的所有聚合，因为它提供对存储库的访问。因此，这是一个很好的地方来发现事件并将它们传递给消息总线：
- en: '*The UoW meets the message bus (src/allocation/service_layer/unit_of_work.py)*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*UoW遇到消息总线（src/allocation/service_layer/unit_of_work.py）*'
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO6-1)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO6-1)'
- en: We’ll change our commit method to require a private `._commit()` method from
    subclasses.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改我们的提交方法，要求子类需要一个私有的`._commit()`方法。
- en: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO6-2)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO6-2)'
- en: After committing, we run through all the objects that our repository has seen
    and pass their events to the message bus.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，我们遍历存储库所见的所有对象，并将它们的事件传递给消息总线。
- en: '[![3](Images/3.png)](#co_events_and_the_message_bus_CO6-4)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_events_and_the_message_bus_CO6-4)'
- en: That relies on the repository keeping track of aggregates that have been loaded
    using a new attribute, `.seen`, as you’ll see in the next listing.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这依赖于存储库跟踪已使用新属性`.seen`加载的聚合，正如您将在下一个清单中看到的那样。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Are you wondering what happens if one of the handlers fails? We’ll discuss error
    handling in detail in [Chapter 10](ch10.xhtml#chapter_10_commands).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否想知道如果其中一个处理程序失败会发生什么？我们将在[第10章](ch10.xhtml#chapter_10_commands)中详细讨论错误处理。
- en: '*Repository tracks aggregates that pass through it (src/allocation/adapters/repository.py)*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*存储库跟踪通过它的聚合（src/allocation/adapters/repository.py）*'
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO7-1)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_events_and_the_message_bus_CO7-1)'
- en: For the UoW to be able to publish new events, it needs to be able to ask the
    repository for which `Product` objects have been used during this session. We
    use a `set` called `.seen` to store them. That means our implementations need
    to call `super().__init__()`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使UoW能够发布新事件，它需要能够询问存储库在此会话期间使用了哪些`Product`对象。我们使用一个名为`.seen`的`set`来存储它们。这意味着我们的实现需要调用`super().__init__()`。
- en: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO7-2)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_events_and_the_message_bus_CO7-2)'
- en: The parent `add()` method adds things to `.seen`, and now requires subclasses
    to implement `._add()`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 父`add()`方法将事物添加到`.seen`，现在需要子类实现`._add()`。
- en: '[![3](Images/3.png)](#co_events_and_the_message_bus_CO7-3)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_events_and_the_message_bus_CO7-3)'
- en: Similarly, `.get()` delegates to a `._get()` function, to be implemented by
    subclasses, in order to capture objects seen.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`.get()`委托给一个`._get()`函数，由子类实现，以捕获已看到的对象。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The use of `*._underscorey()*` methods and subclassing is definitely not the
    only way you could implement these patterns. Have a go at the [Exercise for the
    Reader](#get_rid_of_commit) in this chapter and experiment with some alternatives.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`*._underscorey()*`方法和子类化绝对不是您可以实现这些模式的唯一方式。在本章中尝试一下[读者练习](#get_rid_of_commit)，并尝试一些替代方法。
- en: 'After the UoW and repository collaborate in this way to automatically keep
    track of live objects and process their events, the service layer can be totally
    free of event-handling concerns:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方式下，UoW和存储库协作，自动跟踪实时对象并处理它们的事件后，服务层可以完全摆脱事件处理方面的问题：
- en: '*Service layer is clean again (src/allocation/service_layer/services.py)*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务层再次清洁（src/allocation/service_layer/services.py）*'
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We do also have to remember to change the fakes in the service layer and make
    them call `super()` in the right places, and to implement underscorey methods,
    but the changes are minimal:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须记住在服务层更改伪造品并在正确的位置调用`super()`，并实现下划线方法，但更改是最小的：
- en: '*Service-layer fakes need tweaking (tests/unit/test_services.py)*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*需要调整服务层伪造（tests/unit/test_services.py）*'
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You might be starting to worry that maintaining these fakes is going to be a
    maintenance burden. There’s no doubt that it is work, but in our experience it’s
    not a lot of work. Once your project is up and running, the interface for your
    repository and UoW abstractions really don’t change much. And if you’re using
    ABCs, they’ll help remind you when things get out of sync.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能开始担心维护这些伪造品将成为一项维护负担。毫无疑问，这是一项工作，但根据我们的经验，这并不是很多工作。一旦您的项目启动并运行，存储库和UoW抽象的接口实际上并不会有太大变化。如果您使用ABCs，它们将在事情变得不同步时提醒您。
- en: Wrap-Up
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Domain events give us a way to handle workflows in our system. We often find,
    listening to our domain experts, that they express requirements in a causal or
    temporal way—for example, “When we try to allocate stock but there’s none available,
    then we should send an email to the buying team.”
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 领域事件为我们提供了一种处理系统中工作流程的方式。我们经常发现，听取我们的领域专家的意见，他们以因果或时间方式表达需求，例如，“当我们尝试分配库存但没有可用时，我们应该向采购团队发送电子邮件。”
- en: The magic words “When X, then Y” often tell us about an event that we can make
    concrete in our system. Treating events as first-class things in our model helps
    us make our code more testable and observable, and it helps isolate concerns.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: “当X时，然后Y”这几个神奇的词经常告诉我们关于我们可以在系统中具体化的事件。在我们的模型中将事件作为第一类事物对我们有助于使我们的代码更具可测试性和可观察性，并有助于隔离关注点。
- en: And [Table 8-1](#chapter_08_events_and_message_bus_tradeoffs) shows the trade-offs
    as we see them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 和[表8-1](#chapter_08_events_and_message_bus_tradeoffs)显示了我们认为的权衡。
- en: 'Table 8-1\. Domain events: the trade-offs'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 表8-1. 领域事件：权衡
- en: '| Pros | Cons |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 缺点 |'
- en: '| --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: A message bus gives us a nice way to separate responsibilities when we have
    to take multiple actions in response to a request.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们必须对请求做出多个动作的响应时，消息总线为我们提供了一种很好的分离责任的方式。
- en: Event handlers are nicely decoupled from the “core” application logic, making
    it easy to change their implementation later.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理程序与“核心”应用程序逻辑很好地解耦，这样以后更改它们的实现就变得很容易。
- en: Domain events are a great way to model the real world, and we can use them as
    part of our business language when modeling with stakeholders.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域事件是模拟现实世界的一种好方法，我们可以在与利益相关者建模时将其作为我们的业务语言的一部分使用。
- en: '|'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The message bus is an additional thing to wrap your head around; the implementation
    in which the unit of work raises events for us is *neat* but also magic. It’s
    not obvious when we call `commit` that we’re also going to go and send email to
    people.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息总线是一个额外的需要理解的东西；我们的实现中，工作单元为我们引发事件是*巧妙*但也是神奇的。当我们调用`commit`时，我们并不明显地知道我们还将去发送电子邮件给人们。
- en: What’s more, that hidden event-handling code executes *synchronously*, meaning
    your service-layer function doesn’t finish until all the handlers for any events
    are finished. That could cause unexpected performance problems in your web endpoints
    (adding asynchronous processing is possible but makes things even *more* confusing).
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更重要的是，隐藏的事件处理代码执行*同步*，这意味着直到所有事件的处理程序完成为止，您的服务层函数才能完成。这可能会在您的Web端点中引起意外的性能问题（添加异步处理是可能的，但会使事情变得更加混乱）。
- en: More generally, event-driven workflows can be confusing because after things
    are split across a chain of multiple handlers, there is no single place in the
    system where you can understand how a request will be fulfilled.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更一般地说，基于事件驱动的工作流可能会令人困惑，因为在事物被分割到多个处理程序链之后，系统中就没有一个单一的地方可以理解请求将如何被满足。
- en: You also open yourself up to the possibility of circular dependencies between
    your event handlers, and infinite loops.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还会面临事件处理程序之间的循环依赖和无限循环的可能性。
- en: '|'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Events are useful for more than just sending email, though. In [Chapter 7](ch07.xhtml#chapter_07_aggregate)
    we spent a lot of time convincing you that you should define aggregates, or boundaries
    where we guarantee consistency. People often ask, “What should I do if I need
    to change multiple aggregates as part of a request?” Now we have the tools we
    need to answer that question.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 事件不仅仅用于发送电子邮件。在[第7章](ch07.xhtml#chapter_07_aggregate)中，我们花了很多时间说服你应该定义聚合，或者我们保证一致性的边界。人们经常问，“如果我需要在一个请求的过程中更改多个聚合，我该怎么办？”现在我们有了回答这个问题所需的工具。
- en: If we have two things that can be transactionally isolated (e.g., an order and
    a product), then we can make them *eventually consistent* by using events. When
    an order is canceled, we should find the products that were allocated to it and
    remove the allocations.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有两个可以在事务上隔离的事物（例如，订单和产品），那么我们可以通过使用事件使它们*最终一致*。当订单被取消时，我们应该找到为其分配的产品并移除这些分配。
- en: In [Chapter 9](ch09.xhtml#chapter_09_all_messagebus), we’ll look at this idea
    in more detail as we build a more complex workflow with our new message bus.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.xhtml#chapter_09_all_messagebus)中，我们将更详细地研究这个想法，因为我们将使用我们的新消息总线构建一个更复杂的工作流。
- en: ^([1](ch08.xhtml#idm45714890821688-marker)) This principle is the *S* in [SOLID](https://oreil.ly/AIdSD).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.xhtml#idm45714890821688-marker))这个原则是[SOLID](https://oreil.ly/AIdSD)中的*S*。
- en: ^([2](ch08.xhtml#idm45714890815656-marker)) Our tech reviewer Ed Jung likes
    to say that the move from imperative to event-based flow control changes what
    used to be *orchestration* into *choreography*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch08.xhtml#idm45714890815656-marker))我们的技术审阅员Ed Jung喜欢说，从命令式到基于事件的流程控制的转变将以前的*编排*变成了*编舞*。

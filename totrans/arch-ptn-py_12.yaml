- en: Chapter 9\. Going to Town on the Message Bus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。深入研究消息总线
- en: In this chapter, we’ll start to make events more fundamental to the internal
    structure of our application. We’ll move from the current state in [Figure 9-1](#maps_chapter_08_before),
    where events are an optional side effect…
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始使事件对我们应用程序的内部结构更加重要。我们将从[图9-1](#maps_chapter_08_before)中的当前状态开始，其中事件是一个可选的副作用…
- en: '![apwp 0901](Images/apwp_0901.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0901](Images/apwp_0901.png)'
- en: 'Figure 9-1\. Before: the message bus is an optional add-on'
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-1。之前：消息总线是一个可选的附加组件
- en: …to the situation in [Figure 9-2](#map_chapter_08_after), where everything goes
    via the message bus, and our app has been transformed fundamentally into a message
    processor.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: …到[图9-2](#map_chapter_08_after)中的情况，所有内容都通过消息总线进行，我们的应用程序已经从根本上转变为消息处理器。
- en: '![apwp 0902](Images/apwp_0902.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0902](Images/apwp_0902.png)'
- en: Figure 9-2\. The message bus is now the main entrypoint to the service layer
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-2。消息总线现在是服务层的主要入口点
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_09_all_messagebus branch [on GitHub](https://oreil.ly/oKNkn):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码在GitHub的chapter_09_all_messagebus分支中[查看](https://oreil.ly/oKNkn)：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A New Requirement Leads Us to a New Architecture
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个新需求引领我们走向新的架构
- en: Rich Hickey talks about *situated software,* meaning software that runs for
    extended periods of time, managing a real-world process. Examples include warehouse-management
    systems, logistics schedulers, and payroll systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Rich Hickey谈到了*定位软件*，指的是长时间运行，管理真实世界流程的软件。例子包括仓库管理系统、物流调度器和工资系统。
- en: 'This software is tricky to write because unexpected things happen all the time
    in the real world of physical objects and unreliable humans. For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件很难编写，因为在现实世界的物理对象和不可靠的人类中经常发生意外。例如：
- en: During a stock-take, we discover that three `SPRINGY-MATTRESS`es have been water
    damaged by a leaky roof.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在盘点期间，我们发现三个`SPRINGY-MATTRESS`被漏水的屋顶水损坏了。
- en: A consignment of `RELIABLE-FORK`s is missing the required documentation and
    is held in customs for several weeks. Three `RELIABLE-FORK`s subsequently fail
    safety testing and are destroyed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一批`RELIABLE-FORK`缺少所需的文件，并被海关扣押了几周。随后有三个`RELIABLE-FORK`未能通过安全测试并被销毁。
- en: A global shortage of sequins means we’re unable to manufacture our next batch
    of `SPARKLY-BOOKCASE`.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球缎带短缺意味着我们无法制造下一批`SPARKLY-BOOKCASE`。
- en: In these types of situations, we learn about the need to change batch quantities
    when they’re already in the system. Perhaps someone made a mistake on the number
    in the manifest, or perhaps some sofas fell off a truck. Following a conversation
    with the business,^([1](ch09.xhtml#idm45714888912728)) we model the situation
    as in [Figure 9-3](#batch_changed_events_flow_diagram).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，我们了解到当批次已经在系统中时需要更改批次数量。也许有人在清单中弄错了数字，或者也许有些沙发从卡车上掉下来。在与业务的对话后，^([1](ch09.xhtml#idm45714888912728))我们将情况建模为[图9-3](#batch_changed_events_flow_diagram)中的情况。
- en: '![apwp 0903](Images/apwp_0903.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0903](Images/apwp_0903.png)'
- en: Figure 9-3\. Batch quantity changed means deallocate and reallocate
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-3。批次数量更改意味着取消分配和重新分配
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'An event we’ll call `BatchQuantityChanged` should lead us to change the quantity
    on the batch, yes, but also to apply a *business rule*: if the new quantity drops
    to less than the total already allocated, we need to *deallocate* those orders
    from that batch. Then each one will require a new allocation, which we can capture
    as an event called `AllocationRequired`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将称之为`BatchQuantityChanged`的事件应该导致我们改变批次的数量，是的，但也要应用*业务规则*：如果新数量降到已分配的总数以下，我们需要从该批次*取消分配*这些订单。然后每个订单将需要新的分配，我们可以将其捕获为`AllocationRequired`事件。
- en: Perhaps you’re already anticipating that our internal message bus and events
    can help implement this requirement. We could define a service called `change_batch_quantity`
    that knows how to adjust batch quantities and also how to *deallocate* any excess
    order lines, and then each deallocation can emit an `AllocationRequired` event
    that can be forwarded to the existing `allocate` service, in separate transactions.
    Once again, our message bus helps us to enforce the single responsibility principle,
    and it allows us to make choices about transactions and data integrity.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经预料到我们的内部消息总线和事件可以帮助实现这一要求。我们可以定义一个名为`change_batch_quantity`的服务，它知道如何调整批次数量，还知道如何*取消分配*任何多余的订单行，然后每个取消分配可以发出一个`AllocationRequired`事件，可以在单独的事务中转发给现有的`allocate`服务。再一次，我们的消息总线帮助我们执行单一责任原则，并且它允许我们对事务和数据完整性做出选择。
- en: 'Imagining an Architecture Change: Everything Will Be an Event Handler'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 想象一种架构变化：一切都将成为事件处理程序
- en: 'But before we jump in, think about where we’re headed. There are two kinds
    of flows through our system:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们着手之前，想想我们要走向何方。我们的系统有两种流程：
- en: API calls that are handled by a service-layer function
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由服务层函数处理的API调用
- en: Internal events (which might be raised as a side effect of a service-layer function)
    and their handlers (which in turn call service-layer functions)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部事件（可能作为服务层函数的副作用引发）及其处理程序（反过来调用服务层函数）
- en: 'Wouldn’t it be easier if everything was an event handler? If we rethink our
    API calls as capturing events, the service-layer functions can be event handlers
    too, and we no longer need to make a distinction between internal and external
    event handlers:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都是事件处理程序，会不会更容易？如果我们重新思考我们的API调用作为捕获事件，服务层函数也可以成为事件处理程序，我们不再需要区分内部和外部事件处理程序：
- en: '`services.allocate()` could be the handler for an `AllocationRequired` event
    and could emit `Allocated` events as its output.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services.allocate()`可能是`AllocationRequired`事件的处理程序，并且可以发出`Allocated`事件作为其输出。'
- en: '`services.add_batch()` could be the handler for a `BatchCreated` event.^([2](ch09.xhtml#idm45714888887096))'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services.add_batch()`可能是`BatchCreated`事件的处理程序。^([2](ch09.xhtml#idm45714888887096))'
- en: 'Our new requirement will fit the same pattern:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新需求将符合相同的模式：
- en: An event called `BatchQuantityChanged` can invoke a handler called `change_batch_quantity()`.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`BatchQuantityChanged`的事件可以调用名为`change_batch_quantity()`的处理程序。
- en: And the new `AllocationRequired` events that it may raise can be passed on to
    `services.allocate()` too, so there is no conceptual difference between a brand-new
    allocation coming from the API and a reallocation that’s internally triggered
    by a deallocation.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能引发的新`AllocationRequired`事件也可以传递给`services.allocate()`，因此从API中产生的全新分配和内部由取消分配触发的重新分配之间没有概念上的区别。
- en: 'All sound like a bit much? Let’s work toward it all gradually. We’ll follow
    the [Preparatory Refactoring](https://oreil.ly/W3RZM) workflow, aka “Make the
    change easy; then make the easy change”:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来有点多？让我们逐渐朝着这个方向努力。我们将遵循[预备重构](https://oreil.ly/W3RZM)工作流程，又称“使变化变得容易；然后进行容易的变化”：
- en: We refactor our service layer into event handlers. We can get used to the idea
    of events being the way we describe inputs to the system. In particular, the existing
    `services.allocate()` function will become the handler for an event called `AllocationRequired`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将我们的服务层重构为事件处理程序。我们可以习惯于事件是描述系统输入的方式。特别是，现有的`services.allocate()`函数将成为名为`AllocationRequired`的事件的处理程序。
- en: We build an end-to-end test that puts `BatchQuantityChanged` events into the
    system and looks for `Allocated` events coming out.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们构建了一个端到端测试，将`BatchQuantityChanged`事件放入系统，并查找输出的`Allocated`事件。
- en: 'Our implementation will conceptually be very simple: a new handler for `BatchQuantityChanged`
    events, whose implementation will emit `AllocationRequired` events, which in turn
    will be handled by the exact same handler for allocations that the API uses.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的实现在概念上将非常简单：`BatchQuantityChanged`事件的新处理程序，其实现将发出`AllocationRequired`事件，然后将由API使用的分配的确切相同的处理程序处理。
- en: Along the way, we’ll make a small tweak to the message bus and UoW, moving the
    responsibility for putting new events on the message bus into the message bus
    itself.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们将对消息总线和UoW进行小的调整，将将新事件放入消息总线的责任移到消息总线本身。
- en: Refactoring Service Functions to Message Handlers
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将服务函数重构为消息处理程序
- en: 'We start by defining the two events that capture our current API inputs—`AllocationRequired`
    and `BatchCreated`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了两个事件，捕捉我们当前的API输入——`AllocationRequired`和`BatchCreated`：
- en: '*BatchCreated and AllocationRequired events (src/allocation/domain/events.py)*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*BatchCreated和AllocationRequired事件（src/allocation/domain/events.py）*'
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then we rename *services.py* to *handlers.py*; we add the existing message
    handler for `send_out_of_stock_notification`; and most importantly, we change
    all the handlers so that they have the same inputs, an event and a UoW:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将*services.py*重命名为*handlers.py*；我们添加了`send_out_of_stock_notification`的现有消息处理程序；最重要的是，我们更改了所有处理程序，使它们具有相同的输入，即事件和UoW：
- en: '*Handlers and services are the same thing (src/allocation/service_layer/handlers.py)*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理程序和服务是相同的东西（src/allocation/service_layer/handlers.py）*'
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The change might be clearer as a diff:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变化可能更清晰地显示为一个差异：
- en: '*Changing from services to handlers (src/allocation/service_layer/handlers.py)*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*从服务更改为处理程序（src/allocation/service_layer/handlers.py）*'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Along the way, we’ve made our service-layer’s API more structured and more consistent.
    It was a scattering of primitives, and now it uses well-defined objects (see the
    following sidebar).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们使我们的服务层API更加结构化和一致。它曾经是一堆原语，现在使用了定义明确的对象（见下面的侧边栏）。
- en: The Message Bus Now Collects Events from the UoW
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息总线现在从UoW收集事件
- en: 'Our event handlers now need a UoW. In addition, as our message bus becomes
    more central to our application, it makes sense to put it explicitly in charge
    of collecting and processing new events. There was a bit of a circular dependency
    between the UoW and message bus until now, so this will make it one-way:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的事件处理程序现在需要一个UoW。此外，随着我们的消息总线变得更加核心于我们的应用程序，明智的做法是明确地负责收集和处理新事件。到目前为止，UoW和消息总线之间存在一种循环依赖，因此这将使其成为单向：
- en: '*Handle takes a UoW and manages a queue (src/allocation/service_layer/messagebus.py)*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理接受UoW并管理队列（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO1-1)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO1-1)'
- en: The message bus now gets passed the UoW each time it starts up.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每次启动时，消息总线现在都会传递UoW。
- en: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO1-2)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO1-2)'
- en: When we begin handling our first event, we start a queue.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始处理我们的第一个事件时，我们启动一个队列。
- en: '[![3](Images/3.png)](#co_going_to_town_on_the_message_bus_CO1-3)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_going_to_town_on_the_message_bus_CO1-3)'
- en: We pop events from the front of the queue and invoke their handlers (the `HANDLERS`
    dict hasn’t changed; it still maps event types to handler functions).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从队列的前面弹出事件并调用它们的处理程序（`HANDLERS`字典没有改变；它仍将事件类型映射到处理程序函数）。
- en: '[![4](Images/4.png)](#co_going_to_town_on_the_message_bus_CO1-5)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_going_to_town_on_the_message_bus_CO1-5)'
- en: The message bus passes the UoW down to each handler.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线将UoW传递给每个处理程序。
- en: '[![5](Images/5.png)](#co_going_to_town_on_the_message_bus_CO1-6)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_going_to_town_on_the_message_bus_CO1-6)'
- en: After each handler finishes, we collect any new events that have been generated
    and add them to the queue.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个处理程序完成后，我们收集生成的任何新事件，并将它们添加到队列中。
- en: 'In *unit_of_work.py*, `publish_events()` becomes a less active method, `collect_new_events()`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在*unit_of_work.py*中，`publish_events()`变成了一个不太活跃的方法，`collect_new_events()`：
- en: '*UoW no longer puts events directly on the bus (src/allocation/service_layer/unit_of_work.py)*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*UoW不再直接将事件放入总线（src/allocation/service_layer/unit_of_work.py）*'
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO2-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO2-1)'
- en: The `unit_of_work` module now no longer depends on `messagebus`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`unit_of_work`模块现在不再依赖于`messagebus`。'
- en: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO2-2)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO2-2)'
- en: We no longer `publish_events` automatically on commit. The message bus is keeping
    track of the event queue instead.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再自动在提交时`publish_events`。消息总线现在跟踪事件队列。
- en: '[![3](Images/3.png)](#co_going_to_town_on_the_message_bus_CO2-3)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_going_to_town_on_the_message_bus_CO2-3)'
- en: And the UoW no longer actively puts events on the message bus; it just makes
    them available.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 而UoW不再主动将事件放在消息总线上；它只是使它们可用。
- en: Our Tests Are All Written in Terms of Events Too
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的测试也都是以事件为基础编写的
- en: 'Our tests now operate by creating events and putting them on the message bus,
    rather than invoking service-layer functions directly:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试现在通过创建事件并将它们放在消息总线上来操作，而不是直接调用服务层函数：
- en: '*Handler tests use events (tests/unit/test_handlers.py)*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理程序测试使用事件（tests/unit/test_handlers.py）*'
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A Temporary Ugly Hack: The Message Bus Has to Return Results'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 临时丑陋的黑客：消息总线必须返回结果
- en: 'Our API and our service layer currently want to know the allocated batch reference
    when they invoke our `allocate()` handler. This means we need to put in a temporary
    hack on our message bus to let it return events:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的API和服务层目前希望在调用我们的`allocate()`处理程序时知道分配的批次参考。这意味着我们需要在我们的消息总线上进行临时修改，让它返回事件：
- en: '*Message bus returns results (src/allocation/service_layer/messagebus.py)*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*消息总线返回结果（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It’s because we’re mixing the read and write responsibilities in our system.
    We’ll come back to fix this wart in [Chapter 12](ch12.xhtml#chapter_12_cqrs).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们在系统中混合了读取和写入责任。我们将在[第12章](ch12.xhtml#chapter_12_cqrs)中回来修复这个瑕疵。
- en: Modifying Our API to Work with Events
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改我们的API以与事件配合使用
- en: '*Flask changing to message bus as a diff (src/allocation/entrypoints/flask_app.py)*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*Flask将消息总线更改为差异（src/allocation/entrypoints/flask_app.py）*'
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO3-1)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO3-1)'
- en: Instead of calling the service layer with a bunch of primitives extracted from
    the request JSON…
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用从请求JSON中提取的一堆基元调用服务层…
- en: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO3-2)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO3-2)'
- en: We instantiate an event.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化一个事件。
- en: '[![3](Images/3.png)](#co_going_to_town_on_the_message_bus_CO3-3)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_going_to_town_on_the_message_bus_CO3-3)'
- en: Then we pass it to the message bus.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将其传递给消息总线。
- en: 'And we should be back to a fully functional application, but one that’s now
    fully event-driven:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该回到一个完全功能的应用程序，但现在是完全事件驱动的：
- en: What used to be service-layer functions are now event handlers.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曾经是服务层函数现在是事件处理程序。
- en: That makes them the same as the functions we invoke for handling internal events
    raised by our domain model.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使它们与我们的领域模型引发的内部事件处理的函数相同。
- en: We use events as our data structure for capturing inputs to the system, as well
    as for handing off of internal work packages.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用事件作为捕获系统输入的数据结构，以及内部工作包的交接。
- en: The entire app is now best described as a message processor, or an event processor
    if you prefer. We’ll talk about the distinction in the [next chapter](ch10.xhtml#chapter_10_commands).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个应用现在最好被描述为消息处理器，或者如果您愿意的话，是事件处理器。我们将在[下一章](ch10.xhtml#chapter_10_commands)中讨论区别。
- en: Implementing Our New Requirement
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施我们的新需求
- en: 'We’re done with our refactoring phase. Let’s see if we really have “made the
    change easy.” Let’s implement our new requirement, shown in [Figure 9-4](#reallocation_sequence_diagram):
    we’ll receive as our inputs some new `BatchQuantityChanged` events and pass them
    to a handler, which in turn might emit some `AllocationRequired` events, and those
    in turn will go back to our existing handler for reallocation.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了重构阶段。让我们看看我们是否真的“使变化变得容易”。让我们实施我们的新需求，如[图9-4](#reallocation_sequence_diagram)所示：我们将接收一些新的`BatchQuantityChanged`事件作为我们的输入，并将它们传递给一个处理程序，然后该处理程序可能会发出一些`AllocationRequired`事件，然后这些事件将返回到我们现有的重新分配处理程序。
- en: '![apwp 0904](Images/apwp_0904.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 0904](Images/apwp_0904.png)'
- en: Figure 9-4\. Sequence diagram for reallocation flow
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-4。重新分配流程的序列图
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Warning
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'When you split things out like this across two units of work, you now have
    two database transactions, so you are opening yourself up to integrity issues:
    something could happen that means the first transaction completes but the second
    one does not. You’ll need to think about whether this is acceptable, and whether
    you need to notice when it happens and do something about it. See [“Footguns”](afterword01.xhtml#footguns)
    for more discussion.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将这些事情分开到两个工作单元时，您现在有两个数据库事务，因此您会面临完整性问题：可能会发生某些事情，导致第一个事务完成，但第二个事务没有完成。您需要考虑这是否可以接受，以及是否需要注意它何时发生并采取措施。有关更多讨论，请参见[“Footguns”](afterword01.xhtml#footguns)。
- en: Our New Event
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的新事件
- en: 'The event that tells us a batch quantity has changed is simple; it just needs
    a batch reference and a new quantity:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们批次数量已更改的事件很简单；它只需要批次参考和新数量：
- en: '*New event (src/allocation/domain/events.py)*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*新事件（src/allocation/domain/events.py）*'
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Test-Driving a New Handler
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过测试驱动新的处理程序
- en: 'Following the lessons learned in [Chapter 4](ch04.xhtml#chapter_04_service_layer),
    we can operate in “high gear” and write our unit tests at the highest possible
    level of abstraction, in terms of events. Here’s what they might look like:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循[第4章](ch04.xhtml#chapter_04_service_layer)中学到的教训，我们可以以“高速”运行，并以事件为基础的最高抽象级别编写我们的单元测试。它们可能看起来像这样：
- en: '*Handler tests for change_batch_quantity (tests/unit/test_handlers.py)*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理程序测试用于change_batch_quantity（tests/unit/test_handlers.py）*'
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO4-1)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_going_to_town_on_the_message_bus_CO4-1)'
- en: The simple case would be trivially easy to implement; we just modify a quantity.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 简单情况将非常容易实现；我们只需修改数量。
- en: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO4-3)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_going_to_town_on_the_message_bus_CO4-3)'
- en: But if we try to change the quantity to less than has been allocated, we’ll
    need to deallocate at least one order, and we expect to reallocate it to a new
    batch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们尝试将数量更改为少于已分配的数量，我们将需要至少取消分配一个订单，并且我们期望重新分配到一个新批次。
- en: Implementation
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: 'Our new handler is very simple:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新处理程序非常简单：
- en: '*Handler delegates to model layer (src/allocation/service_layer/handlers.py)*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理程序委托给模型层（src/allocation/service_layer/handlers.py）*'
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We realize we’ll need a new query type on our repository:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们意识到我们将需要在我们的存储库上有一个新的查询类型：
- en: '*A new query type on our repository (src/allocation/adapters/repository.py)*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的存储库上有一个新的查询类型（src/allocation/adapters/repository.py）*'
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And on our `FakeRepository` too:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 还有我们的`FakeRepository`：
- en: '*Updating the fake repo too (tests/unit/test_handlers.py)*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*也更新了虚假存储库（tests/unit/test_handlers.py）*'
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’re adding a query to our repository to make this use case easier to implement.
    So long as our query is returning a single aggregate, we’re not bending any rules.
    If you find yourself writing complex queries on your repositories, you might want
    to consider a different design. Methods like `get_most_popular_products` or `find_products_by_order_id`
    in particular would definitely trigger our spidey sense. [Chapter 11](ch11.xhtml#chapter_11_external_events)
    and the [epilogue](afterword01.xhtml#epilogue_1_how_to_get_there_from_here) have
    some tips on managing complex queries.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在向我们的存储库添加一个查询，以使这个用例更容易实现。只要我们的查询返回单个聚合，我们就不会违反任何规则。如果你发现自己在存储库上编写复杂的查询，你可能需要考虑不同的设计。特别是像`get_most_popular_products`或`find_products_by_order_id`这样的方法肯定会触发我们的警觉。[第11章](ch11.xhtml#chapter_11_external_events)和[结语](afterword01.xhtml#epilogue_1_how_to_get_there_from_here)中有一些关于管理复杂查询的提示。
- en: A New Method on the Domain Model
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 领域模型上的新方法
- en: 'We add the new method to the model, which does the quantity change and deallocation(s)
    inline and publishes a new event. We also modify the existing allocate function
    to publish an event:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向模型添加了新的方法，该方法在内部进行数量更改和取消分配，并发布新事件。我们还修改了现有的分配函数以发布事件：
- en: '*Our model evolves to capture the new requirement (src/allocation/domain/model.py)*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的模型发展以满足新的需求（src/allocation/domain/model.py）*'
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We wire up our new handler:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接了我们的新处理程序：
- en: '*The message bus grows (src/allocation/service_layer/messagebus.py)*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*消息总线增长（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And our new requirement is fully implemented.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我们的新需求已经完全实现了。
- en: 'Optionally: Unit Testing Event Handlers in Isolation with a Fake Message Bus'
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可选：使用虚假消息总线孤立地对事件处理程序进行单元测试
- en: Our main test for the reallocation workflow is *edge-to-edge* (see the example
    code in [“Test-Driving a New Handler”](#test-driving-ch9)). It uses the real message
    bus, and it tests the whole flow, where the `BatchQuantityChanged` event handler
    triggers deallocation, and emits new `AllocationRequired` events, which in turn
    are handled by their own handlers. One test covers a chain of multiple events
    and handlers.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对重新分配工作流的主要测试是*边缘到边缘*（参见[“测试驱动新处理程序”](#test-driving-ch9)中的示例代码）。它使用真实的消息总线，并测试整个流程，其中`BatchQuantityChanged`事件处理程序触发取消分配，并发出新的`AllocationRequired`事件，然后由它们自己的处理程序处理。一个测试覆盖了一系列多个事件和处理程序。
- en: Depending on the complexity of your chain of events, you may decide that you
    want to test some handlers in isolation from one another. You can do this using
    a “fake” message bus.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的事件链的复杂性，您可能会决定要对一些处理程序进行孤立测试。您可以使用“虚假”消息总线来实现这一点。
- en: 'In our case, we actually intervene by modifying the `publish_events()` method
    on `FakeUnitOfWork` and decoupling it from the real message bus, instead making
    it record what events it sees:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们实际上通过修改`FakeUnitOfWork`上的`publish_events()`方法来进行干预，并将其与真实消息总线解耦，而是让它记录它看到的事件：
- en: '*Fake message bus implemented in UoW (tests/unit/test_handlers.py)*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*在UoW中实现的虚假消息总线（tests/unit/test_handlers.py）*'
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now when we invoke `messagebus.handle()` using the `FakeUnitOfWorkWithFakeMessageBus`,
    it runs only the handler for that event. So we can write a more isolated unit
    test: instead of checking all the side effects, we just check that `BatchQuantityChanged`
    leads to `AllocationRequired` if the quantity drops below the total already allocated:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们使用`FakeUnitOfWorkWithFakeMessageBus`调用`messagebus.handle()`时，它只运行该事件的处理程序。因此，我们可以编写更加孤立的单元测试：不再检查所有的副作用，而是只检查`BatchQuantityChanged`是否导致已分配的总量下降到以下`AllocationRequired`：
- en: '*Testing reallocation in isolation (tests/unit/test_handlers.py)*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*在孤立环境中测试重新分配（tests/unit/test_handlers.py）*'
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Whether you want to do this or not depends on the complexity of your chain of
    events. We say, start out with edge-to-edge testing, and resort to this only if
    necessary.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 是否要这样做取决于您的事件链的复杂性。我们建议，首先进行边缘到边缘的测试，只有在必要时才使用这种方法。
- en: Wrap-Up
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Let’s look back at what we’ve achieved, and think about why we did it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们取得了什么成就，并思考为什么我们这样做。
- en: What Have We Achieved?
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们取得了什么成就？
- en: Events are simple dataclasses that define the data structures for inputs and
    internal messages within our system. This is quite powerful from a DDD standpoint,
    since events often translate really well into business language (look up *event
    storming* if you haven’t already).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是简单的数据类，定义了我们系统中的输入和内部消息的数据结构。从DDD的角度来看，这是非常强大的，因为事件通常在业务语言中表达得非常好（如果你还没有了解*事件风暴*，请查阅）。
- en: Handlers are the way we react to events. They can call down to our model or
    call out to external services. We can define multiple handlers for a single event
    if we want to. Handlers can also raise other events. This allows us to be very
    granular about what a handler does and really stick to the SRP.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序是我们对事件做出反应的方式。它们可以调用我们的模型或调用外部服务。如果需要，我们可以为单个事件定义多个处理程序。处理程序还可以触发其他事件。这使我们可以非常细粒度地控制处理程序的操作，并真正遵守SRP。
- en: Why Have We Achieved?
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们取得了什么成就？
- en: Our ongoing objective with these architectural patterns is to try to have the
    complexity of our application grow more slowly than its size. When we go all in
    on the message bus, as always we pay a price in terms of architectural complexity
    (see [Table 9-1](#chapter_09_all_messagebus_tradeoffs)), but we buy ourselves
    a pattern that can handle almost arbitrarily complex requirements without needing
    any further conceptual or architectural change to the way we do things.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这些架构模式的持续目标是尝试使我们应用程序的复杂性增长速度比其大小慢。当我们全力投入消息总线时，我们总是在架构复杂性方面付出代价（参见[表9-1](#chapter_09_all_messagebus_tradeoffs)），但我们为自己购买了一种可以处理几乎任意复杂需求的模式，而无需对我们做事情的方式进行任何进一步的概念或架构变化。
- en: Here we’ve added quite a complicated use case (change quantity, deallocate,
    start new transaction, reallocate, publish external notification), but architecturally,
    there’s been no cost in terms of complexity. We’ve added new events, new handlers,
    and a new external adapter (for email), all of which are existing categories of
    *things* in our architecture that we understand and know how to reason about,
    and that are easy to explain to newcomers. Our moving parts each have one job,
    they’re connected to each other in well-defined ways, and there are no unexpected
    side effects.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们增加了一个相当复杂的用例（更改数量，取消分配，启动新事务，重新分配，发布外部通知），但在架构上，复杂性没有成本。我们增加了新的事件，新的处理程序和一个新的外部适配器（用于电子邮件），所有这些都是我们架构中现有的*事物*类别，我们知道如何理解和推理，并且很容易向新手解释。我们的各个部分各自有一个工作，它们以明确定义的方式相互连接，没有意外的副作用。
- en: 'Table 9-1\. Whole app is a message bus: the trade-offs'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 表9-1\. 整个应用程序是一个消息总线：权衡
- en: '| Pros | Cons |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 缺点 |'
- en: '| --- | --- |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Handlers and services are the same thing, so that’s simpler.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序和服务是相同的，所以这更简单。
- en: We have a nice data structure for inputs to the system.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个很好的数据结构，用于系统的输入。
- en: '|'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: A message bus is still a slightly unpredictable way of doing things from a web
    point of view. You don’t know in advance when things are going to end.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息总线从Web的角度来看仍然是一种稍微不可预测的方式。您事先不知道什么时候会结束。
- en: There will be duplication of fields and structure between model objects and
    events, which will have a maintenance cost. Adding a field to one usually means
    adding a field to at least one of the others.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '模型对象和事件之间将存在字段和结构的重复，这将产生维护成本。向一个对象添加字段通常意味着至少向另一个对象添加字段。 '
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Now, you may be wondering, where are those `BatchQuantityChanged` events going
    to come from? The answer is revealed in a couple chapters’ time. But first, let’s
    talk about [events versus commands](ch10.xhtml#chapter_10_commands).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能会想知道，那些`BatchQuantityChanged`事件将从哪里产生？答案将在几章后揭晓。但首先，让我们谈谈[事件与命令](ch10.xhtml#chapter_10_commands)。
- en: ^([1](ch09.xhtml#idm45714888912728-marker)) Event-based modeling is so popular
    that a practice called *event storming* has been developed for facilitating event-based
    requirements gathering and domain model elaboration.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.xhtml#idm45714888912728-marker)) 基于事件的建模如此受欢迎，以至于出现了一种称为*事件风暴*的实践，用于促进基于事件的需求收集和领域模型阐述。
- en: ^([2](ch09.xhtml#idm45714888887096-marker)) If you’ve done a bit of reading
    about event-driven architectures, you may be thinking, “Some of these events sound
    more like commands!” Bear with us! We’re trying to introduce one concept at a
    time. In the [next chapter](ch10.xhtml#chapter_10_commands), we’ll introduce the
    distinction between commands and events.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch09.xhtml#idm45714888887096-marker)) 如果您对事件驱动架构有所了解，您可能会想，“其中一些事件听起来更像命令！”
    请耐心等待！我们试图一次引入一个概念。在[下一章](ch10.xhtml#chapter_10_commands)中，我们将介绍命令和事件之间的区别。
- en: ^([3](ch09.xhtml#idm45714886833944-marker)) The “simple” implementation in this
    chapter essentially uses the *messagebus.py* module itself to implement the Singleton
    Pattern.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch09.xhtml#idm45714886833944-marker)) 本章中的“简单”实现基本上使用*messagebus.py*模块本身来实现单例模式。

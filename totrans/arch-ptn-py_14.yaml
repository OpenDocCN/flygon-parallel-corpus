- en: 'Chapter 11\. Event-Driven Architecture: Using Events to Integrate Microservices'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。事件驱动架构：使用事件集成微服务
- en: In the preceding chapter, we never actually spoke about *how* we would receive
    the “batch quantity changed” events, or indeed, how we might notify the outside
    world about reallocations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们实际上从未讨论过我们将如何接收“批量数量更改”事件，或者如何通知外部世界有关重新分配的情况。
- en: We have a microservice with a web API, but what about other ways of talking
    to other systems? How will we know if, say, a shipment is delayed or the quantity
    is amended? How will we tell the warehouse system that an order has been allocated
    and needs to be sent to a customer?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个带有Web API的微服务，但是如何与其他系统进行通信呢？如果，比如说，发货延迟或数量被修改，我们将如何知道？我们将如何告诉仓库系统已经分配了订单并需要发送给客户？
- en: In this chapter, we’d like to show how the events metaphor can be extended to
    encompass the way that we handle incoming and outgoing messages from the system.
    Internally, the core of our application is now a message processor. Let’s follow
    through on that so it becomes a message processor *externally* as well. As shown
    in [Figure 11-1](#message_processor_diagram), our application will receive events
    from external sources via an external message bus (we’ll use Redis pub/sub queues
    as an example) and publish its outputs, in the form of events, back there as well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们想展示事件隐喻如何扩展到涵盖我们处理系统中的传入和传出消息的方式。在内部，我们应用的核心现在是一个消息处理器。让我们跟进，使其在*外部*也成为一个消息处理器。如[图11-1](#message_processor_diagram)所示，我们的应用将通过外部消息总线（我们将使用Redis
    pub/sub队列作为示例）从外部来源接收事件，并将其输出以事件的形式发布回去。
- en: '![apwp 1101](Images/apwp_1101.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 1101](Images/apwp_1101.png)'
- en: Figure 11-1\. Our application is a message processor
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-1。我们的应用是一个消息处理器
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'The code for this chapter is in the chapter_11_external_events branch [on GitHub](https://oreil.ly/UiwRS):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码在GitHub的chapter_11_external_events分支中。[GitHub链接](https://oreil.ly/UiwRS)
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Distributed Ball of Mud, and Thinking in Nouns
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式泥球和名词思维
- en: Before we get into that, let’s talk about the alternatives. We regularly talk
    to engineers who are trying to build out a microservices architecture. Often they
    are migrating from an existing application, and their first instinct is to split
    their system into *nouns*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论之前，让我们谈谈其他选择。我们经常与试图构建微服务架构的工程师交谈。通常，他们正在从现有应用程序迁移，并且他们的第一反应是将系统拆分为*名词*。
- en: What nouns have we introduced so far in our system? Well, we have batches of
    stock, orders, products, and customers. So a naive attempt at breaking up the
    system might have looked like [Figure 11-2](#batches_context_diagram) (notice
    that we’ve named our system after a noun, *Batches*, instead of *Allocation*).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在系统中引入了哪些名词？嗯，我们有库存批次、订单、产品和客户。因此，对系统进行天真的尝试可能看起来像[图11-2](#batches_context_diagram)（请注意，我们将系统命名为一个名词，*Batches*，而不是*Allocation*）。
- en: '![apwp 1102](Images/apwp_1102.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 1102](Images/apwp_1102.png)'
- en: Figure 11-2\. Context diagram with noun-based services
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-2。基于名词的服务的上下文图
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each “thing” in our system has an associated service, which exposes an HTTP
    API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们系统中的每个“东西”都有一个关联的服务，它公开了一个HTTP API。
- en: 'Let’s work through an example happy-path flow in [Figure 11-3](#command_flow_diagram_1):
    our users visit a website and can choose from products that are in stock. When
    they add an item to their basket, we will reserve some stock for them. When an
    order is complete, we confirm the reservation, which causes us to send dispatch
    instructions to the warehouse. Let’s also say, if this is the customer’s third
    order, we want to update the customer record to flag them as a VIP.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过[图11-3](#command_flow_diagram_1)中的一个示例顺畅流程来工作：我们的用户访问网站，可以从库存中选择产品。当他们将商品添加到购物篮时，我们将为他们保留一些库存。当订单完成时，我们确认预订，这会导致我们向仓库发送发货指示。我们还可以说，如果这是客户的第三个订单，我们希望更新客户记录以将其标记为VIP。
- en: '![apwp 1103](Images/apwp_1103.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 1103](Images/apwp_1103.png)'
- en: Figure 11-3\. Command flow 1
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-3。命令流程1
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can think of each of these steps as a command in our system: `ReserveStock`,
    `ConfirmReservation`, `DispatchGoods`, `MakeCustomerVIP`, and so forth.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些步骤中的每一个都视为我们系统中的一个命令：`ReserveStock`、`ConfirmReservation`、`DispatchGoods`、`MakeCustomerVIP`等等。
- en: This style of architecture, where we create a microservice per database table
    and treat our HTTP APIs as CRUD interfaces to anemic models, is the most common
    initial way for people to approach service-oriented design.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构风格，即我们为每个数据库表创建一个微服务，并将我们的HTTP API视为贫血模型的CRUD接口，是人们最常见的初始服务设计方法。
- en: This works *fine* for systems that are very simple, but it can quickly degrade
    into a distributed ball of mud.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于非常简单的系统来说是*很好*的，但很快就会变成一个分布式的泥球。
- en: To see why, let’s consider another case. Sometimes, when stock arrives at the
    warehouse, we discover that items have been water damaged during transit. We can’t
    sell water-damaged sofas, so we have to throw them away and request more stock
    from our partners. We also need to update our stock model, and that might mean
    we need to reallocate a customer’s order.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解原因，让我们考虑另一种情况。有时，当库存到达仓库时，我们发现货物在运输过程中受潮。我们无法出售受潮的沙发，因此我们不得不将它们丢弃并向合作伙伴请求更多库存。我们还需要更新我们的库存模型，这可能意味着我们需要重新分配客户的订单。
- en: Where does this logic go?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑应该放在哪里？
- en: Well, the Warehouse system knows that the stock has been damaged, so maybe it
    should own this process, as shown in [Figure 11-4](#command_flow_diagram_2).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，仓库系统知道库存已经受损，所以也许它应该拥有这个过程，就像[图11-4](#command_flow_diagram_2)中所示的那样。
- en: '![apwp 1104](Images/apwp_1104.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 1104](Images/apwp_1104.png)'
- en: Figure 11-4\. Command flow 2
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-4。命令流程2
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sort of works too, but now our dependency graph is a mess. To allocate
    stock, the Orders service drives the Batches system, which drives Warehouse; but
    in order to handle problems at the warehouse, our Warehouse system drives Batches,
    which drives Orders.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法也可以，但现在我们的依赖图是一团糟。为了分配库存，订单服务驱动批次系统，批次系统驱动仓库；但为了处理仓库的问题，我们的仓库系统驱动批次，批次驱动订单。
- en: Multiply this by all the other workflows we need to provide, and you can see
    how services quickly get tangled up.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将这种情况乘以我们需要提供的所有其他工作流程，你就会看到服务很快会变得混乱。
- en: Error Handling in Distributed Systems
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式系统中的错误处理
- en: “Things break” is a universal law of software engineering. What happens in our
    system when one of our requests fails? Let’s say that a network error happens
    right after we take a user’s order for three `MISBEGOTTEN-RUG`, as shown in [Figure 11-5](#command_flow_diagram_with_error).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “事情会出错”是软件工程的普遍规律。当我们的请求失败时，我们的系统会发生什么？假设我们在为三个`MISBEGOTTEN-RUG`下订单后发生网络错误，如[图11-5](#command_flow_diagram_with_error)所示。
- en: 'We have two options here: we can place the order anyway and leave it unallocated,
    or we can refuse to take the order because the allocation can’t be guaranteed.
    The failure state of our batches service has bubbled up and is affecting the reliability
    of our order service.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个选择：我们可以无论如何下订单并将其保留未分配，或者我们可以拒绝接受订单，因为无法保证分配。我们的批次服务的失败状态已经上升，并影响了我们订单服务的可靠性。
- en: 'When two things have to be changed together, we say that they are *coupled*.
    We can think of this failure cascade as a kind of *temporal coupling*: every part
    of the system has to work at the same time for any part of it to work. As the
    system gets bigger, there is an exponentially increasing probability that some
    part is degraded.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当两件事必须一起改变时，我们说它们是*耦合*的。我们可以将这种失败级联看作一种*时间耦合*：系统的每个部分都必须同时工作才能使系统的任何部分工作。随着系统变得越来越大，某个部分受损的可能性呈指数增长。
- en: '![apwp 1105](Images/apwp_1105.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 1105](Images/apwp_1105.png)'
- en: Figure 11-5\. Command flow with error
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-5. 带错误的命令流
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The Alternative: Temporal Decoupling Using Asynchronous Messaging'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一种选择：使用异步消息进行时间解耦
- en: How do we get appropriate coupling? We’ve already seen part of the answer, which
    is that we should think in terms of verbs, not nouns. Our domain model is about
    modeling a business process. It’s not a static data model about a thing; it’s
    a model of a verb.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何获得适当的耦合？我们已经看到了部分答案，即我们应该从动词的角度思考，而不是名词。我们的领域模型是关于建模业务流程的。它不是关于一个静态事物的静态数据模型；它是一个动词的模型。
- en: So instead of thinking about a system for orders and a system for batches, we
    think about a system for *ordering* and a system for *allocating*, and so on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不是考虑订单系统和批次系统，而是考虑*下订单*系统和*分配*系统，等等。
- en: When we separate things this way, it’s a little easier to see which system should
    be responsible for what. When thinking about *ordering*, really we want to make
    sure that when we place an order, the order is placed. Everything else can happen
    *later*, so long as it happens.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以这种方式分离事物时，更容易看清哪个系统应该负责什么。在考虑*顺序*时，我们真的希望确保当我们下订单时，订单已经下了。其他事情可以*稍后*发生，只要它发生了。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If this sounds familiar, it should! Segregating responsibilities is the same
    process we went through when designing our aggregates and commands.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来很熟悉，那就对了！分离责任是我们设计聚合和命令时经历的相同过程。
- en: Like aggregates, microservices should be *consistency boundaries*. Between two
    services, we can accept eventual consistency, and that means we don’t need to
    rely on synchronous calls. Each service accepts commands from the outside world
    and raises events to record the result. Other services can listen to those events
    to trigger the next steps in the workflow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 像聚合一样，微服务应该是*一致性边界*。在两个服务之间，我们可以接受最终一致性，这意味着我们不需要依赖同步调用。每个服务都接受来自外部世界的命令，并引发事件来记录结果。其他服务可以监听这些事件来触发工作流程的下一步。
- en: To avoid the Distributed Ball of Mud anti-pattern, instead of temporally coupled
    HTTP API calls, we want to use asynchronous messaging to integrate our systems.
    We want our `BatchQuantityChanged` messages to come in as external messages from
    upstream systems, and we want our system to publish `Allocated` events for downstream
    systems to listen to.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免分布式泥球反模式，我们不想使用临时耦合的HTTP API调用，而是想要使用异步消息传递来集成我们的系统。我们希望我们的`BatchQuantityChanged`消息作为来自上游系统的外部消息传入，并且我们希望我们的系统发布`Allocated`事件供下游系统监听。
- en: 'Why is this better? First, because things can fail independently, it’s easier
    to handle degraded behavior: we can still take orders if the allocation system
    is having a bad day.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这样做更好？首先，因为事情可以独立失败，处理降级行为更容易：如果分配系统出现问题，我们仍然可以接受订单。
- en: Second, we’re reducing the strength of coupling between our systems. If we need
    to change the order of operations or to introduce new steps in the process, we
    can do that locally.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们正在减少系统之间的耦合强度。如果我们需要改变操作顺序或者在流程中引入新步骤，我们可以在本地进行。
- en: Using a Redis Pub/Sub Channel for Integration
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redis Pub/Sub频道进行集成
- en: Let’s see how it will all work concretely. We’ll need some way of getting events
    out of one system and into another, like our message bus, but for services. This
    piece of infrastructure is often called a *message broker*. The role of a message
    broker is to take messages from publishers and deliver them to subscribers.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它将如何具体运作。我们需要某种方式将一个系统的事件传递到另一个系统，就像我们的消息总线一样，但是针对服务。这种基础设施通常被称为*消息代理*。消息代理的作用是接收发布者的消息并将其传递给订阅者。
- en: At MADE.com, we use [Event Store](https://eventstore.org); Kafka or RabbitMQ
    are valid alternatives. A lightweight solution based on Redis [pub/sub channels](https://redis.io/topics/pubsub)
    can also work just fine, and because Redis is much more generally familiar to
    people, we thought we’d use it for this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在MADE.com，我们使用[Event Store](https://eventstore.org)；Kafka或RabbitMQ也是有效的替代方案。基于Redis
    [pub/sub频道](https://redis.io/topics/pubsub)的轻量级解决方案也可以很好地工作，因为Redis对大多数人来说更加熟悉，所以我们决定在本书中使用它。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’re glossing over the complexity involved in choosing the right messaging
    platform. Concerns like message ordering, failure handling, and idempotency all
    need to be thought through. For a few pointers, see [“Footguns”](afterword01.xhtml#footguns).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忽略了选择正确的消息平台涉及的复杂性。像消息排序、故障处理和幂等性等问题都需要仔细考虑。有关一些建议，请参见[“Footguns”](afterword01.xhtml#footguns)。
- en: 'Our new flow will look like [Figure 11-6](#reallocation_sequence_diagram_with_redis):
    Redis provides the `BatchQuantityChanged` event that kicks off the whole process,
    and our `Allocated` event is published back out to Redis again at the end.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新流程将如下所示[图11-6](#reallocation_sequence_diagram_with_redis)：Redis提供了`BatchQuantityChanged`事件，它启动了整个流程，并且我们的`Allocated`事件最终再次发布到Redis。
- en: '![apwp 1106](Images/apwp_1106.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![apwp 1106](Images/apwp_1106.png)'
- en: Figure 11-6\. Sequence diagram for reallocation flow
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-6。重新分配流程的序列图
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Test-Driving It All Using an End-to-End Test
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用端到端测试来测试驱动所有内容
- en: 'Here’s how we might start with an end-to-end test. We can use our existing
    API to create batches, and then we’ll test both inbound and outbound messages:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可能如何开始端到端测试。我们可以使用我们现有的API创建批次，然后我们将测试入站和出站消息：
- en: '*An end-to-end test for our pub/sub model (tests/e2e/test_external_events.py)*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的发布/订阅模型的端到端测试（tests/e2e/test_external_events.py）*'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-1)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-1)'
- en: 'You can read the story of what’s going on in this test from the comments: we
    want to send an event into the system that causes an order line to be reallocated,
    and we see that reallocation come out as an event in Redis too.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从注释中阅读此测试中正在进行的操作的故事：我们希望向系统发送一个事件，导致订单行被重新分配，并且我们也看到该重新分配作为一个事件出现在Redis中。
- en: '[![2](Images/2.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-2)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-2)'
- en: '`api_client` is a little helper that we refactored out to share between our
    two test types; it wraps our calls to `requests.post`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`api_client`是一个小助手，我们对其进行了重构，以便在两种测试类型之间共享；它包装了我们对`requests.post`的调用。'
- en: '[![3](Images/3.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-4)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-4)'
- en: '`redis_client` is another little test helper, the details of which don’t really
    matter; its job is to be able to send and receive messages from various Redis
    channels. We’ll use a channel called `change_batch_quantity` to send in our request
    to change the quantity for a batch, and we’ll listen to another channel called
    `line_allocated` to look out for the expected reallocation.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`redis_client`是另一个小测试助手，其详细信息并不重要；它的工作是能够从各种Redis频道发送和接收消息。我们将使用一个名为`change_batch_quantity`的频道来发送我们的更改批次数量的请求，并且我们将监听另一个名为`line_allocated`的频道，以寻找预期的重新分配。'
- en: '[![4](Images/4.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-8)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO1-8)'
- en: Because of the asynchronous nature of the system under test, we need to use
    the `tenacity` library again to add a retry loop—first, because it may take some
    time for our new `line_allocated` message to arrive, but also because it won’t
    be the only message on that channel.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于系统测试的异步性质，我们需要再次使用`tenacity`库添加重试循环 - 首先，因为我们的新的`line_allocated`消息可能需要一些时间才能到达，但也因为它不会是该频道上唯一的消息。
- en: Redis Is Another Thin Adapter Around Our Message Bus
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Redis是我们消息总线周围的另一个薄适配器
- en: 'Our Redis pub/sub listener (we call it an *event consumer*) is very much like
    Flask: it translates from the outside world to our events:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Redis发布/订阅监听器（我们称其为*事件消费者*）非常类似于Flask：它将外部世界转换为我们的事件：
- en: '*Simple Redis message listener (src/allocation/entrypoints/redis_eventconsumer.py)*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单的Redis消息监听器（src/allocation/entrypoints/redis_eventconsumer.py）*'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO2-1)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO2-1)'
- en: '`main()` subscribes us to the `change_batch_quantity` channel on load.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`在加载时订阅了`change_batch_quantity`频道。'
- en: '[![2](Images/2.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO2-2)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO2-2)'
- en: Our main job as an entrypoint to the system is to deserialize JSON, convert
    it to a `Command`, and pass it to the service layer—much as the Flask adapter
    does.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们作为系统的入口点的主要工作是反序列化JSON，将其转换为`Command`，并将其传递到服务层 - 就像Flask适配器一样。
- en: 'We also build a new downstream adapter to do the opposite job—converting domain
    events to public events:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还构建了一个新的下游适配器来执行相反的工作 - 将领域事件转换为公共事件：
- en: '*Simple Redis message publisher (src/allocation/adapters/redis_eventpublisher.py)*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单的Redis消息发布者（src/allocation/adapters/redis_eventpublisher.py）*'
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](Images/1.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO3-1)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_event_driven_architecture__using_events_to_integrate_microservices_CO3-1)'
- en: We take a hardcoded channel here, but you could also store a mapping between
    event classes/names and the appropriate channel, allowing one or more message
    types to go to different channels.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里采用了一个硬编码的频道，但您也可以存储事件类/名称与适当频道之间的映射，从而允许一个或多个消息类型发送到不同的频道。
- en: Our New Outgoing Event
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的新出站事件
- en: 'Here’s what the `Allocated` event will look like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Allocated`事件将如下所示：'
- en: '*New event (src/allocation/domain/events.py)*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*新事件（src/allocation/domain/events.py）*'
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It captures everything we need to know about an allocation: the details of
    the order line, and which batch it was allocated to.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它捕获了我们需要了解的有关分配的一切内容：订单行的详细信息，以及它被分配到哪个批次。
- en: 'We add it into our model’s `allocate()` method (having added a test first,
    naturally):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其添加到我们模型的`allocate()`方法中（自然地先添加了一个测试）：
- en: '*Product.allocate() emits new event to record what happened (src/allocation/domain/model.py)*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 产品分配()发出新事件来记录发生了什么（src/allocation/domain/model.py）
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The handler for `ChangeBatchQuantity` already exists, so all we need to add
    is a handler that publishes the outgoing event:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChangeBatchQuantity`的处理程序已经存在，所以我们需要添加的是一个处理程序，用于发布出站事件：'
- en: '*The message bus grows (src/allocation/service_layer/messagebus.py)*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*消息总线增长（src/allocation/service_layer/messagebus.py）*'
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Publishing the event uses our helper function from the Redis wrapper:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 发布事件使用我们从Redis包装器中的辅助函数：
- en: '*Publish to Redis (src/allocation/service_layer/handlers.py)*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*发布到Redis（src/allocation/service_layer/handlers.py）*'
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Internal Versus External Events
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部与外部事件
- en: It’s a good idea to keep the distinction between internal and external events
    clear. Some events may come from the outside, and some events may get upgraded
    and published externally, but not all of them will. This is particularly important
    if you get into [event sourcing](https://oreil.ly/FXVil) (very much a topic for
    another book, though).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 清楚地保持内部和外部事件之间的区别是个好主意。一些事件可能来自外部，一些事件可能会升级并在外部发布，但并非所有事件都会这样。如果你涉足[事件溯源](https://oreil.ly/FXVil)（尽管这是另一本书的主题），这一点尤为重要。
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Outbound events are one of the places it’s important to apply validation. See
    [Appendix E](app05.xhtml#appendix_validation) for some validation philosophy and
    examples.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 出站事件是重要的应用验证的地方之一。参见[附录 E](app05.xhtml#appendix_validation)了解一些验证哲学和示例。
- en: Wrap-Up
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Events can come *from* the outside, but they can also be published externally—our
    `publish` handler converts an event to a message on a Redis channel. We use events
    to talk to the outside world. This kind of temporal decoupling buys us a lot of
    flexibility in our application integrations, but as always, it comes at a cost.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 事件可以来自外部，但也可以在外部发布——我们的`publish`处理程序将事件转换为Redis通道上的消息。我们使用事件与外部世界交流。这种时间解耦为我们的应用集成带来了很大的灵活性，但是，像往常一样，这是有代价的。
- en: Event notification is nice because it implies a low level of coupling, and is
    pretty simple to set up. It can become problematic, however, if there really is
    a logical flow that runs over various event notifications...It can be hard to
    see such a flow as it’s not explicit in any program text....This can make it hard
    to debug and modify.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 事件通知很好，因为它意味着低耦合，并且设置起来相当简单。然而，如果真的有一个在各种事件通知上运行的逻辑流，这可能会成为问题……很难看到这样的流，因为它在任何程序文本中都不是显式的……这可能会使调试和修改变得困难。
- en: '>'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Martin Fowler, [“What do you mean by ‘Event-Driven’”](https://oreil.ly/uaPNt)
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Martin Fowler，[“你所说的‘事件驱动’是什么意思”](https://oreil.ly/uaPNt)
- en: '[Table 11-1](#chapter_11_external_events_tradeoffs) shows some trade-offs to
    think about.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[表11-1](#chapter_11_external_events_tradeoffs)显示了一些需要考虑的权衡。'
- en: 'Table 11-1\. Event-based microservices integration: the trade-offs'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 表11-1. 基于事件的微服务集成：权衡
- en: '| Pros | Cons |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 优点 | 缺点 |'
- en: '| --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Avoids the distributed big ball of mud.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免分布式的大泥球。
- en: 'Services are decoupled: it’s easier to change individual services and add new
    ones.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是解耦的：更容易更改单个服务并添加新服务。
- en: '|'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The overall flows of information are harder to see.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息的整体流更难以看到。
- en: Eventual consistency is a new concept to deal with.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终一致性是一个新的概念来处理。
- en: Message reliability and choices around at-least-once versus at-most-once delivery
    need thinking through.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息可靠性和至少一次与至多一次交付的选择需要深思熟虑。
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: More generally, if you’re moving from a model of synchronous messaging to an
    async one, you also open up a whole host of problems having to do with message
    reliability and eventual consistency. Read on to [“Footguns”](afterword01.xhtml#footguns).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，如果你从同步消息传递模型转移到异步模型，你也会遇到一系列与消息可靠性和最终一致性有关的问题。继续阅读[“Footguns”](afterword01.xhtml#footguns)。

- en: 'Appendix C. Swapping Out the Infrastructure: Do Everything with CSVs'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录C. 更换基础设施：使用CSV做所有事情
- en: This appendix is intended as a little illustration of the benefits of the Repository,
    Unit of Work, and Service Layer patterns. It’s intended to follow from [Chapter 6](ch06.xhtml#chapter_06_uow).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录旨在简要说明Repository、UnitOfWork和Service Layer模式的好处。它旨在从[第6章](ch06.xhtml#chapter_06_uow)中延伸出来。
- en: Just as we finish building out our Flask API and getting it ready for release,
    the business comes to us apologetically, saying they’re not ready to use our API
    and asking if we could build a thing that reads just batches and orders from a
    couple of CSVs and outputs a third CSV with allocations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 就在我们完成构建Flask API并准备发布时，业务部门来找我们，道歉地说他们还没有准备好使用我们的API，并询问我们是否可以构建一个仅从几个CSV中读取批次和订单并输出第三个CSV的东西。
- en: Ordinarily this is the kind of thing that might have a team cursing and spitting
    and making notes for their memoirs. But not us! Oh no, we’ve ensured that our
    infrastructure concerns are nicely decoupled from our domain model and service
    layer. Switching to CSVs will be a simple matter of writing a couple of new `Repository`
    and `UnitOfWork` classes, and then we’ll be able to reuse *all* of our logic from
    the domain layer and the service layer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常这是一种可能会让团队咒骂、唾弃并为他们的回忆做笔记的事情。但我们不会！哦不，我们已经确保我们的基础设施问题与我们的领域模型和服务层很好地解耦。切换到CSV将只是简单地编写一些新的`Repository`和`UnitOfWork`类，然后我们就能重用领域层和服务层的*所有*逻辑。
- en: 'Here’s an E2E test to show you how the CSVs flow in and out:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个E2E测试，向您展示CSV的流入和流出：
- en: '*A first CSV test (tests/e2e/test_csv.py)*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一个CSV测试（tests/e2e/test_csv.py）*'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Diving in and implementing without thinking about repositories and all that
    jazz, you might start with something like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无思考地实现并不考虑存储库和所有那些花哨东西，你可能会从这样的东西开始：
- en: '*A first cut of our CSV reader/writer (src/bin/allocate-from-csv)*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的CSV读取器/写入器的第一个版本（src/bin/allocate-from-csv）*'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It’s not looking too bad! And we’re reusing our domain model objects and our
    domain service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来还不错！而且我们正在重用我们的领域模型对象和领域服务。
- en: 'But it’s not going to work. Existing allocations need to also be part of our
    permanent CSV storage. We can write a second test to force us to improve things:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不会起作用。现有的分配也需要成为我们永久CSV存储的一部分。我们可以编写第二个测试来迫使我们改进事情：
- en: '*And another one, with existing allocations (tests/e2e/test_csv.py)*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*另一个，带有现有分配（tests/e2e/test_csv.py）*'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And we could keep hacking about and adding extra lines to that `load_batches`
    function, and some sort of way of tracking and saving new allocations—but we already
    have a model for doing that! It’s called our Repository and Unit of Work patterns.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续对`load_batches`函数进行修改并添加额外的行，以及一种跟踪和保存新分配的方式，但我们已经有了一个可以做到这一点的模型！它叫做我们的Repository和UnitOfWork模式。
- en: All we need to do (“all we need to do”) is reimplement those same abstractions,
    but with CSVs underlying them instead of a database. And as you’ll see, it really
    is relatively straightforward.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的（“我们需要做的”）只是重新实现相同的抽象，但是以CSV作为基础，而不是数据库。正如您将看到的，这确实相对简单。
- en: Implementing a Repository and Unit of Work for CSVs
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为CSV实现Repository和UnitOfWork
- en: 'Here’s what a CSV-based repository could look like. It abstracts away all the
    logic for reading CSVs from disk, including the fact that it has to read *two
    different CSVs* (one for batches and one for allocations), and it gives us just
    the familiar `.list()` API, which provides the illusion of an in-memory collection
    of domain objects:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基于CSV的存储库可能看起来像这样。它将磁盘上读取CSV的所有逻辑抽象出来，包括它必须读取*两个不同的CSV*（一个用于批次，一个用于分配），并且它给我们提供了熟悉的`.list()`
    API，这提供了一个领域对象的内存集合的幻觉：
- en: '*A repository that uses CSV as its storage mechanism (src/allocation/service_layer/csv_uow.py)*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用CSV作为存储机制的存储库（src/allocation/service_layer/csv_uow.py）*'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And here’s what a UoW for CSVs would look like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于CSV的UoW会是什么样子的示例：
- en: '*A UoW for CSVs: commit = csv.writer (src/allocation/service_layer/csv_uow.py)*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*用于CSV的UoW：commit = csv.writer（src/allocation/service_layer/csv_uow.py）*'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And once we have that, our CLI app for reading and writing batches and allocations
    to CSV is pared down to what it should be—a bit of code for reading order lines,
    and a bit of code that invokes our *existing* service layer:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们做到了，我们用于读取和写入批次和分配到CSV的CLI应用程序将被简化为它应该有的东西——一些用于读取订单行的代码，以及一些调用我们*现有*服务层的代码：
- en: '*Allocation with CSVs in nine lines (src/bin/allocate-from-csv)*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*用九行代码实现CSV的分配（src/bin/allocate-from-csv）*'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ta-da! *Now are y’all impressed or what*?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 哒哒！*现在你们是不是印象深刻了*？
- en: Much love,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Much love,
- en: Bob and Harry
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Bob and Harry

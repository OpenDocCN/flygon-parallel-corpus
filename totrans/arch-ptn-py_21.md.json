["```py\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 allocation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 adapters\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 djangoproject\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 alloc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 apps.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 migrations\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 0001_initial.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 django_project\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 manage.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 setup.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 e2e\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_api.py\n    \u251c\u2500\u2500 integration\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test_repository.py\n...\n```", "```py\ngit clone https://github.com/cosmicpython/code.git\ncd code\ngit checkout appendix_django\n```", "```py\nfrom djangoproject.alloc import models as django_models\n\n@pytest.mark.django_db\ndef test_repository_can_save_a_batch():\n    batch = model.Batch(\"batch1\", \"RUSTY-SOAPDISH\", 100, eta=date(2011, 12, 25))\n\n    repo = repository.DjangoRepository()\n    repo.add(batch)\n\n    [saved_batch] = django_models.Batch.objects.all()\n    assert saved_batch.reference == batch.reference\n    assert saved_batch.sku == batch.sku\n    assert saved_batch.qty == batch._purchased_quantity\n    assert saved_batch.eta == batch.eta\n```", "```py\n@pytest.mark.django_db\ndef test_repository_can_retrieve_a_batch_with_allocations():\n    sku = \"PONY-STATUE\"\n    d_line = django_models.OrderLine.objects.create(orderid=\"order1\", sku=sku, qty=12)\n    d_b1 = django_models.Batch.objects.create(\n    reference=\"batch1\", sku=sku, qty=100, eta=None\n)\n    d_b2 = django_models.Batch.objects.create(\n    reference=\"batch2\", sku=sku, qty=100, eta=None\n)\n    django_models.Allocation.objects.create(line=d_line, batch=d_batch1)\n\n    repo = repository.DjangoRepository()\n    retrieved = repo.get(\"batch1\")\n\n    expected = model.Batch(\"batch1\", sku, 100, eta=None)\n    assert retrieved == expected  # Batch.__eq__ only compares reference\n    assert retrieved.sku == expected.sku\n    assert retrieved._purchased_quantity == expected._purchased_quantity\n    assert retrieved._allocations == {\n        model.OrderLine(\"order1\", sku, 12),\n    }\n```", "```py\nclass DjangoRepository(AbstractRepository):\n\n    def add(self, batch):\n        super().add(batch)\n        self.update(batch)\n\n    def update(self, batch):\n        django_models.Batch.update_from_domain(batch)\n\n    def _get(self, reference):\n        return django_models.Batch.objects.filter(\n            reference=reference\n        ).first().to_domain()\n\n    def list(self):\n        return [b.to_domain() for b in django_models.Batch.objects.all()]\n```", "```py\nfromdjango.dbimportmodelsfromallocation.domainimportmodelasdomain_modelclassBatch(models.Model):reference=models.CharField(max_length=255)sku=models.CharField(max_length=255)qty=models.IntegerField()eta=models.DateField(blank=True,null=True)@staticmethoddefupdate_from_domain(batch:domain_model.Batch):try:b=Batch.objects.get(reference=batch.reference)![1](Images/1.png)exceptBatch.DoesNotExist:b=Batch(reference=batch.reference)![1](Images/1.png)b.sku=batch.skub.qty=batch._purchased_quantityb.eta=batch.eta![2](Images/2.png)b.save()b.allocation_set.set(Allocation.from_domain(l,b)![3](Images/3.png)forlinbatch._allocations)defto_domain(self)->domain_model.Batch:b=domain_model.Batch(ref=self.reference,sku=self.sku,qty=self.qty,eta=self.eta)b._allocations=set(a.line.to_domain()forainself.allocation_set.all())returnbclassOrderLine(models.Model):#...\n```", "```py\ndefinsert_batch(ref,sku,qty,eta):![1](Images/1.png)django_models.Batch.objects.create(reference=ref,sku=sku,qty=qty,eta=eta)defget_allocated_batch_ref(orderid,sku):![1](Images/1.png)returndjango_models.Allocation.objects.get(line__orderid=orderid,line__sku=sku).batch.reference@pytest.mark.django_db(transaction=True)deftest_uow_can_retrieve_a_batch_and_allocate_to_it():insert_batch('batch1','HIPSTER-WORKBENCH',100,None)uow=unit_of_work.DjangoUnitOfWork()withuow:batch=uow.batches.get(reference='batch1')line=model.OrderLine('o1','HIPSTER-WORKBENCH',10)batch.allocate(line)uow.commit()batchref=get_allocated_batch_ref('o1','HIPSTER-WORKBENCH')assertbatchref=='batch1'@pytest.mark.django_db(transaction=True)![2](Images/2.png)deftest_rolls_back_uncommitted_work_by_default():...@pytest.mark.django_db(transaction=True)![2](Images/2.png)deftest_rolls_back_on_error():...\n```", "```py\nclassDjangoUnitOfWork(AbstractUnitOfWork):def__enter__(self):self.batches=repository.DjangoRepository()transaction.set_autocommit(False)![1](Images/1.png)returnsuper().__enter__()def__exit__(self,*args):super().__exit__(*args)transaction.set_autocommit(True)defcommit(self):forbatchinself.batches.seen:![3](Images/3.png)self.batches.update(batch)![3](Images/3.png)transaction.commit()![2](Images/2.png)defrollback(self):transaction.rollback()![2](Images/2.png)\n```", "```py\nos.environ['DJANGO_SETTINGS_MODULE'] = 'djangoproject.django_project.settings'\ndjango.setup()\n\n@csrf_exempt\ndef add_batch(request):\n    data = json.loads(request.body)\n    eta = data['eta']\n    if eta is not None:\n        eta = datetime.fromisoformat(eta).date()\n    services.add_batch(\n        data['ref'], data['sku'], data['qty'], eta,\n        unit_of_work.DjangoUnitOfWork(),\n    )\n    return HttpResponse('OK', status=201)\n\n@csrf_exempt\ndef allocate(request):\n    data = json.loads(request.body)\n    try:\n        batchref = services.allocate(\n            data['orderid'],\n            data['sku'],\n            data['qty'],\n            unit_of_work.DjangoUnitOfWork(),\n        )\n    except (model.OutOfStock, services.InvalidSku) as e:\n        return JsonResponse({'message': str(e)}, status=400)\n\n    return JsonResponse({'batchref': batchref}, status=201)\n```"]
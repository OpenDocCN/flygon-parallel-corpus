- en: Appendix D. Repository and Unit of Work Patterns with Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录D. 使用Django的存储库和工作单元模式
- en: 'Suppose you wanted to use Django instead of SQLAlchemy and Flask. How might
    things look? The first thing is to choose where to install it. We put it in a
    separate package next to our main allocation code:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想使用Django而不是SQLAlchemy和Flask。事情可能会是什么样子？首先要选择安装的位置。我们将其放在与我们的主要分配代码相邻的一个单独的包中：
- en: '*[PRE0]*  *###### Tip'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*[PRE0]*  *###### 提示'
- en: 'The code for this appendix is in the appendix_django branch [on GitHub](https://oreil.ly/A-I76):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个附录的代码在GitHub的appendix_django分支中[GitHub](https://oreil.ly/A-I76)：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Repository Pattern with Django
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django的存储库模式
- en: We used a plug-in called [`pytest-django`](https://github.com/pytest-dev/pytest-django)
    to help with test database management.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个名为[`pytest-django`](https://github.com/pytest-dev/pytest-django)的插件来帮助管理测试数据库。
- en: 'Rewriting the first repository test was a minimal change—just rewriting some
    raw SQL with a call to the Django ORM/QuerySet language:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 重写第一个存储库测试是一个最小的改变 - 只是用Django ORM/QuerySet语言重写了一些原始SQL：
- en: '*First repository test adapted (tests/integration/test_repository.py)*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一个存储库测试适应（tests/integration/test_repository.py）*'
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The second test is a bit more involved since it has allocations, but it is
    still made up of familiar-looking Django code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个测试涉及的内容更多，因为它有分配，但它仍然由熟悉的Django代码组成：
- en: '*Second repository test is more involved (tests/integration/test_repository.py)*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*第二个存储库测试更复杂（tests/integration/test_repository.py）*'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s how the actual repository ends up looking:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实际存储库的最终外观：
- en: '*A Django repository (src/allocation/adapters/repository.py)*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个Django存储库（src/allocation/adapters/repository.py）*'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see that the implementation relies on the Django models having some
    custom methods for translating to and from our domain model.^([1](app04.xhtml#idm45714875556456))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，实现依赖于Django模型具有一些自定义方法，用于转换到我们的领域模型和从领域模型转换。^([1](app04.xhtml#idm45714875556456))
- en: Custom Methods on Django ORM Classes to Translate to/from Our Domain Model
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django ORM类上的自定义方法，用于转换到/从我们的领域模型
- en: 'Those custom methods look something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些自定义方法看起来像这样：
- en: '*Django ORM with custom methods for domain model conversion (src/djangoproject/alloc/models.py)*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*Django ORM与领域模型转换的自定义方法（src/djangoproject/alloc/models.py）*'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO1-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO1-1)'
- en: For value objects, `objects.get_or_create` can work, but for entities, you probably
    need an explicit try-get/except to handle the upsert.^([2](app04.xhtml#idm45714875265208))
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于值对象，`objects.get_or_create` 可以工作，但对于实体，你可能需要一个显式的try-get/except来处理upsert。^([2](app04.xhtml#idm45714875265208))
- en: '[![2](Images/2.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO1-3)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO1-3)'
- en: We’ve shown the most complex example here. If you do decide to do this, be aware
    that there will be boilerplate! Thankfully it’s not very complex boilerplate.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里展示了最复杂的例子。如果你决定这样做，请注意会有样板代码！幸运的是，它并不是非常复杂的样板代码。
- en: '[![3](Images/3.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO1-4)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO1-4)'
- en: Relationships also need some careful, custom handling.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关系也需要一些谨慎的自定义处理。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: As in [Chapter 2](ch02.xhtml#chapter_02_repository), we use dependency inversion.
    The ORM (Django) depends on the model and not the other way around.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[第2章](ch02.xhtml#chapter_02_repository)中一样，我们使用了依赖反转。ORM（Django）依赖于模型，而不是相反。
- en: Unit of Work Pattern with Django
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django的工作单元模式
- en: 'The tests don’t change too much:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 测试并没有太大改变：
- en: '*Adapted UoW tests (tests/integration/test_uow.py)*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*适应的UoW测试（tests/integration/test_uow.py）*'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO2-1)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO2-1)'
- en: Because we had little helper functions in these tests, the actual main bodies
    of the tests are pretty much the same as they were with SQLAlchemy.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在这些测试中有一些小的辅助函数，所以实际的测试主体基本上与SQLAlchemy时一样。
- en: '[![2](Images/2.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO2-3)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO2-3)'
- en: The `pytest-django` `mark.django_db(transaction=True)` is required to test our
    custom transaction/rollback behaviors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-django` `mark.django_db(transaction=True)` 是必须的，用于测试我们的自定义事务/回滚行为。'
- en: 'And the implementation is quite simple, although it took me a few tries to
    find which invocation of Django’s transaction magic would work:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实现相当简单，尽管我尝试了几次才找到Django事务魔法的调用：
- en: '*UoW adapted for Django (src/allocation/service_layer/unit_of_work.py)*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*适用于Django的UoW（src/allocation/service_layer/unit_of_work.py）*'
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO3-1)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO3-1)'
- en: '`set_autocommit(False)` was the best way to tell Django to stop automatically
    committing each ORM operation immediately, and to begin a transaction.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_autocommit(False)` 是告诉Django停止自动立即提交每个ORM操作，并开始一个事务的最佳方法。'
- en: '[![2](Images/2.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO3-4)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO3-4)'
- en: Then we use the explicit rollback and commits.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用显式回滚和提交。
- en: '[![3](Images/3.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO3-2)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_repository_and_unit_of_work__span_class__keep_together__patterns_with_django__span__CO3-2)'
- en: 'One difficulty: because, unlike with SQLAlchemy, we’re not instrumenting the
    domain model instances themselves, the `commit()` command needs to explicitly
    go through all the objects that have been touched by every repository and manually
    update them back to the ORM.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个困难：因为与SQLAlchemy不同，我们不是在领域模型实例本身上进行检测，`commit()` 命令需要显式地通过每个存储库触及的所有对象，并手动将它们更新回ORM。
- en: 'API: Django Views Are Adapters'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API：Django视图是适配器
- en: 'The Django *views.py* file ends up being almost identical to the old *flask_app.py*,
    because our architecture means it’s a very thin wrapper around our service layer
    (which didn’t change at all, by the way):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Django的*views.py*文件最终几乎与旧的*flask_app.py*相同，因为我们的架构意味着它是围绕我们的服务层（顺便说一句，服务层没有改变）的一个非常薄的包装器：
- en: '*Flask app → Django views (src/djangoproject/alloc/views.py)*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*Flask app → Django views (src/djangoproject/alloc/views.py)*'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Why Was This All So Hard?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么这么难？
- en: OK, it works, but it does feel like more effort than Flask/SQLAlchemy. Why is
    that?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，它可以工作，但感觉比Flask/SQLAlchemy要费力。为什么呢？
- en: The main reason at a low level is because Django’s ORM doesn’t work in the same
    way. We don’t have an equivalent of the SQLAlchemy classical mapper, so our `ActiveRecord`
    and our domain model can’t be the same object. Instead we have to build a manual
    translation layer behind the repository. That’s more work (although once it’s
    done, the ongoing maintenance burden shouldn’t be too high).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在低级别上的主要原因是因为Django的ORM工作方式不同。我们没有SQLAlchemy经典映射器的等价物，因此我们的`ActiveRecord`和领域模型不能是同一个对象。相反，我们必须在存储库后面构建一个手动翻译层。这是更多的工作（尽管一旦完成，持续的维护负担不应该太高）。
- en: Because Django is so tightly coupled to the database, you have to use helpers
    like `pytest-django` and think carefully about test databases, right from the
    very first line of code, in a way that we didn’t have to when we started out with
    our pure domain model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django与数据库紧密耦合，您必须使用诸如`pytest-django`之类的辅助工具，并从代码的第一行开始仔细考虑测试数据库的使用方式，这是我们在纯领域模型开始时不必考虑的。
- en: But at a higher level, the entire reason that Django is so great is that it’s
    designed around the sweet spot of making it easy to build CRUD apps with minimal
    boilerplate. But the entire thrust of our book is about what to do when your app
    is no longer a simple CRUD app.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但在更高的层面上，Django之所以如此出色的原因是，它的设计围绕着使构建具有最少样板的CRUD应用程序变得容易的最佳点。但我们的整本书的主要内容是关于当您的应用程序不再是一个简单的CRUD应用程序时该怎么办。
- en: At that point, Django starts hindering more than it helps. Things like the Django
    admin, which are so awesome when you start out, become actively dangerous if the
    whole point of your app is to build a complex set of rules and modeling around
    the workflow of state changes. The Django admin bypasses all of that.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在那一点上，Django开始妨碍而不是帮助。像Django管理这样的东西，在您开始时非常棒，但如果您的应用程序的整个目的是围绕状态更改的工作流程构建一套复杂的规则和建模，那么它们就会变得非常危险。Django管理绕过了所有这些。
- en: What to Do If You Already Have Django
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果您已经有Django，该怎么办
- en: 'So what should you do if you want to apply some of the patterns in this book
    to a Django app? We’d say the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果您想将本书中的一些模式应用于Django应用程序，您应该怎么做呢？我们建议如下：
- en: The Repository and Unit of Work patterns are going to be quite a lot of work.
    The main thing they will buy you in the short term is faster unit tests, so evaluate
    whether that benefit feels worth it in your case. In the longer term, they decouple
    your app from Django and the database, so if you anticipate wanting to migrate
    away from either of those, Repository and UoW are a good idea.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库和工作单元模式将需要相当多的工作。它们在短期内将为您带来的主要好处是更快的单元测试，因此请评估在您的情况下是否值得这种好处。在长期内，它们将使您的应用程序与Django和数据库解耦，因此，如果您预计希望迁移到其中任何一个，存储库和UoW是一个好主意。
- en: The Service Layer pattern might be of interest if you’re seeing a lot of duplication
    in your *views.py*. It can be a good way of thinking about your use cases separately
    from your web endpoints.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在*views.py*中看到很多重复，可能会对服务层模式感兴趣。这是一种很好的方式，可以让您将用例与Web端点分开思考。
- en: 'You can still theoretically do DDD and domain modeling with Django models,
    tightly coupled as they are to the database; you may be slowed by migrations,
    but it shouldn’t be fatal. So as long as your app is not too complex and your
    tests not too slow, you may be able to get something out of the *fat models* approach:
    push as much logic down to your models as possible, and apply patterns like Entity,
    Value Object, and Aggregate. However, see the following caveat.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您仍然可以在Django模型中进行DDD和领域建模，尽管它们与数据库紧密耦合；您可能会因迁移而放慢速度，但这不应该是致命的。因此，只要您的应用程序不太复杂，测试速度不太慢，您可能会从*fat
    models*方法中获益：尽可能将大部分逻辑下推到模型中，并应用实体、值对象和聚合等模式。但是，请参见以下警告。
- en: With that said, [word in the Django community](https://oreil.ly/Nbpjj) is that
    people find that the fat models approach runs into scalability problems of its
    own, particularly around managing interdependencies between apps. In those cases,
    there’s a lot to be said for extracting out a business logic or domain layer to
    sit between your views and forms and your *models.py*, which you can then keep
    as minimal as possible.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，[Django社区中的一些人](https://oreil.ly/Nbpjj)发现，*fat models*方法本身也会遇到可扩展性问题，特别是在管理应用程序之间的相互依赖方面。在这些情况下，将业务逻辑或领域层提取出来，放置在视图和表单以及*models.py*之间，可以尽可能地保持其最小化。
- en: Steps Along the Way
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 途中的步骤
- en: 'Suppose you’re working on a Django project that you’re not sure is going to
    get complex enough to warrant the patterns we recommend, but you still want to
    put a few steps in place to make your life easier, both in the medium term and
    if you want to migrate to some of our patterns later. Consider the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在开发一个Django项目，您不确定是否会变得足够复杂，以至于需要我们推荐的模式，但您仍然希望采取一些步骤，以使您的生活在中期更轻松，并且如果以后要迁移到我们的一些模式中，也更轻松。考虑以下内容：
- en: One piece of advice we’ve heard is to put a *logic.py* into every Django app
    from day one. This gives you a place to put business logic, and to keep your forms,
    views, and models free of business logic. It can become a stepping-stone for moving
    to a fully decoupled domain model and/or service layer later.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们听到的一个建议是从第一天开始在每个Django应用程序中放置一个*logic.py*。这为您提供了一个放置业务逻辑的地方，并使您的表单、视图和模型免于业务逻辑。这可以成为迈向完全解耦的领域模型和/或服务层的垫脚石。
- en: A business-logic layer might start out working with Django model objects and
    only later become fully decoupled from the framework and work on plain Python
    data structures.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务逻辑层可能开始使用Django模型对象，只有在以后才会完全脱离框架，并在纯Python数据结构上工作。
- en: For the read side, you can get some of the benefits of CQRS by putting reads
    into one place, avoiding ORM calls sprinkled all over the place.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于读取方面，您可以通过将读取放入一个地方来获得CQRS的一些好处，避免在各个地方散布ORM调用。
- en: When separating out modules for reads and modules for domain logic, it may be
    worth decoupling yourself from the Django apps hierarchy. Business concerns will
    cut across them.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在为读取和领域逻辑分离模块时，值得脱离Django应用程序层次结构。业务问题将贯穿其中。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We’d like to give a shout-out to David Seddon and Ashia Zawaduk for talking
    through some of the ideas in this appendix. They did their best to stop us from
    saying anything really stupid about a topic we don’t really have enough personal
    experience of, but they may have failed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要向David Seddon和Ashia Zawaduk致敬，因为他们讨论了附录中的一些想法。他们尽力阻止我们在我们没有足够个人经验的话题上说出任何愚蠢的话，但他们可能失败了。
- en: For more thoughts and actual lived experience dealing with existing applications,
    refer to the [epilogue](afterword01.xhtml#epilogue_1_how_to_get_there_from_here).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关处理现有应用程序的更多想法和实际经验，请参阅附录。
- en: ^([1](app04.xhtml#idm45714875556456-marker)) The DRY-Python project people have
    built a tool called [mappers](https://mappers.readthedocs.io/en/latest) that looks
    like it might help minimize boilerplate for this sort of thing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DRY-Python项目的人们构建了一个名为mappers的工具，看起来可能有助于最小化这种事情的样板文件。
- en: ^([2](app04.xhtml#idm45714875265208-marker)) `@mr-bo-jangles` suggested you
    might be able to use [`update_or_create`](https://oreil.ly/HTq1r), but that’s
    beyond our Django-fu.*
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`@mr-bo-jangles`建议您可以使用`update_or_create`，但这超出了我们的Django-fu。'

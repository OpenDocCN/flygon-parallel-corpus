- en: Appendix E. Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录E.验证
- en: Whenever we’re teaching and talking about these techniques, one question that
    comes up over and over is “Where should I do validation? Does that belong with
    my business logic in the domain model, or is that an infrastructural concern?”
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们教授和讨论这些技术时，一个反复出现的问题是“我应该在哪里进行验证？这属于我的业务逻辑在领域模型中，还是属于基础设施问题？”
- en: 'As with any architectural question, the answer is: it depends!'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何架构问题一样，答案是：这取决于情况！
- en: The most important consideration is that we want to keep our code well separated
    so that each part of the system is simple. We don’t want to clutter our code with
    irrelevant detail.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的考虑因素是我们希望保持我们的代码良好分离，以便系统的每个部分都很简单。我们不希望用无关的细节来混淆我们的代码。
- en: What Is Validation, Anyway?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证到底是什么？
- en: When people use the word *validation*, they usually mean a process whereby they
    test the inputs of an operation to make sure that they match certain criteria.
    Inputs that match the criteria are considered *valid*, and inputs that don’t are
    *invalid*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们使用*验证*这个词时，他们通常指的是一种过程，通过这种过程测试操作的输入，以确保它们符合某些标准。符合标准的输入被认为是*有效*的，而不符合标准的输入被认为是*无效*的。
- en: 'If the input is invalid, the operation can’t continue but should exit with
    some kind of error. In other words, validation is about creating *preconditions*.
    We find it useful to separate our preconditions into three subtypes: syntax, semantics,
    and pragmatics.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入无效，则操作无法继续，但应该以某种错误退出。换句话说，验证是关于创建*前提条件*。我们发现将我们的前提条件分为三个子类型：语法、语义和语用是有用的。
- en: Validating Syntax
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证语法
- en: In linguistics, the *syntax* of a language is the set of rules that govern the
    structure of grammatical sentences. For example, in English, the sentence “Allocate
    three units of `TASTELESS-LAMP` to order twenty-seven” is grammatically sound,
    while the phrase “hat hat hat hat hat hat wibble” is not. We can describe grammatically
    correct sentences as *well formed*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在语言学中，语言的*语法*是指控制语法句子结构的规则集。例如，在英语中，“Allocate three units of `TASTELESS-LAMP`
    to order twenty-seven”是语法正确的，而短语“hat hat hat hat hat hat wibble”则不是。我们可以将语法正确的句子描述为*格式良好*。
- en: 'How does this map to our application? Here are some examples of syntactic rules:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这如何映射到我们的应用程序？以下是一些语法规则的示例：
- en: An `Allocate` command must have an order ID, a SKU, and a quantity.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Allocate`命令必须有一个订单ID、一个SKU和一个数量。
- en: A quantity is a positive integer.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数量是一个正整数。
- en: A SKU is a string.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SKU是一个字符串。
- en: These are rules about the shape and structure of incoming data. An `Allocate`
    command without a SKU or an order ID isn’t a valid message. It’s the equivalent
    of the phrase “Allocate three to.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是关于传入数据的形状和结构的规则。一个没有SKU或订单ID的`Allocate`命令不是一个有效的消息。这相当于短语“Allocate three
    to.”
- en: We tend to validate these rules at the edge of the system. Our rule of thumb
    is that a message handler should always receive only a message that is well-formed
    and contains all required information.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们倾向于在系统的边缘验证这些规则。我们的经验法则是，消息处理程序应始终只接收格式良好且包含所有必需信息的消息。
- en: 'One option is to put your validation logic on the message type itself:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是将验证逻辑放在消息类型本身上：
- en: '*Validation on the message class (src/allocation/commands.py)*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*消息类上的验证（src/allocation/commands.py）*'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_validation_CO1-1)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_validation_CO1-1)'
- en: The [`schema` library](https://pypi.org/project/schema) lets us describe the
    structure and validation of our messages in a nice declarative way.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[`schema`库](https://pypi.org/project/schema)让我们以一种好的声明方式描述消息的结构和验证。'
- en: '[![2](Images/2.png)](#co_validation_CO1-2)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_validation_CO1-2)'
- en: The `from_json` method reads a string as JSON and turns it into our message
    type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`from_json`方法将字符串读取为JSON，并将其转换为我们的消息类型。'
- en: 'This can get repetitive, though, since we need to specify our fields twice,
    so we might want to introduce a helper library that can unify the validation and
    declaration of our message types:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不过这可能会变得重复，因为我们需要两次指定我们的字段，所以我们可能希望引入一个辅助库，可以统一验证和声明我们的消息类型：
- en: '*A command factory with schema (src/allocation/commands.py)*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*带有模式的命令工厂（src/allocation/commands.py）*'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_validation_CO2-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_validation_CO2-1)'
- en: The `command` function takes a message name, plus kwargs for the fields of the
    message payload, where the name of the kwarg is the name of the field and the
    value is the parser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`command`函数接受一个消息名称，以及消息有效负载字段的kwargs，其中kwarg的名称是字段的名称，值是解析器。'
- en: '[![2](Images/2.png)](#co_validation_CO2-2)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_validation_CO2-2)'
- en: We use the `make_dataclass` function from the dataclass module to dynamically
    create our message type.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用数据类模块的`make_dataclass`函数动态创建我们的消息类型。
- en: '[![3](Images/3.png)](#co_validation_CO2-3)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_validation_CO2-3)'
- en: We patch the `from_json` method onto our dynamic dataclass.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`from_json`方法打补丁到我们的动态数据类上。
- en: '[![4](Images/4.png)](#co_validation_CO2-4)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_validation_CO2-4)'
- en: We can create reusable parsers for quantity, SKU, and so on to keep things DRY.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建可重用的解析器来解析数量、SKU等，以保持代码的DRY。
- en: '[![5](Images/5.png)](#co_validation_CO2-5)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_validation_CO2-5)'
- en: Declaring a message type becomes a one-liner.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 声明消息类型变成了一行代码。
- en: This comes at the expense of losing the types on your dataclass, so bear that
    trade-off in mind.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以失去数据类上的类型为代价的，所以要考虑这种权衡。
- en: Postel’s Law and the Tolerant Reader Pattern
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postel's Law和宽容读者模式
- en: '*Postel’s law*, or the *robustness principle*, tells us, “Be liberal in what
    you accept, and conservative in what you emit.” We think this applies particularly
    well in the context of integration with our other systems. The idea here is that
    we should be strict whenever we’re sending messages to other systems, but as lenient
    as possible when we’re receiving messages from others.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*Postel''s law*，或者*鲁棒性原则*，告诉我们，“在接受时要宽容，在发出时要保守。”我们认为这在与其他系统集成的情境中特别适用。这里的想法是，当我们向其他系统发送消息时，我们应该严格要求，但在接收他人消息时尽可能宽容。'
- en: 'For example, our system *could* validate the format of a SKU. We’ve been using
    made-up SKUs like `UNFORGIVING-CUSHION` and `MISBEGOTTEN-POUFFE`. These follow
    a simple pattern: two words, separated by dashes, where the second word is the
    type of product and the first word is an adjective.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的系统*可以*验证SKU的格式。我们一直在使用像`UNFORGIVING-CUSHION`和`MISBEGOTTEN-POUFFE`这样的虚构SKU。这遵循一个简单的模式：由破折号分隔的两个单词，其中第二个单词是产品类型，第一个单词是形容词。
- en: Developers *love* to validate this kind of thing in their messages, and reject
    anything that looks like an invalid SKU. This causes horrible problems down the
    line when some anarchist releases a product named `COMFY-CHAISE-LONGUE` or when
    a snafu at the supplier results in a shipment of `CHEAP-CARPET-2`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员*喜欢*验证消息中的这种内容，并拒绝任何看起来像无效SKU的内容。当某个无政府主义者发布名为`COMFY-CHAISE-LONGUE`的产品或供应商出现问题导致`CHEAP-CARPET-2`的发货时，这将在后续过程中造成可怕的问题。
- en: Really, as the allocation system, it’s *none of our business* what the format
    of a SKU might be. All we need is an identifier, so we can simply describe it
    as a string. This means that the procurement system can change the format whenever
    they like, and we won’t care.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，作为分配系统，SKU的格式*与我们无关*。我们只需要一个标识符，所以我们可以简单地将其描述为一个字符串。这意味着采购系统可以随时更改格式，而我们不会在意。
- en: This same principle applies to order numbers, customer phone numbers, and much
    more. For the most part, we can ignore the internal structure of strings.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的原则适用于订单号、客户电话号码等。在大多数情况下，我们可以忽略字符串的内部结构。
- en: Similarly, developers *love* to validate incoming messages with tools like JSON
    Schema, or to build libraries that validate incoming messages and share them among
    systems. This likewise fails the robustness test.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，开发人员*喜欢*使用JSON Schema等工具验证传入消息，或构建验证传入消息并在系统之间共享的库。这同样无法通过健壮性测试。
- en: Let’s imagine, for example, that the procurement system adds new fields to the
    `ChangeBatchQuantity` message that record the reason for the change and the email
    of the user responsible for the change.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设采购系统向“ChangeBatchQuantity”消息添加了记录更改原因和负责更改的用户电子邮件的新字段。
- en: Since these fields don’t matter to the allocation service, we should simply
    ignore them. We can do that in the `schema` library by passing the keyword arg
    `ignore_extra_keys=True`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些字段对分配服务并不重要，我们应该简单地忽略它们。我们可以通过传递关键字参数`ignore_extra_keys=True`来在`schema`库中实现这一点。
- en: This pattern, whereby we extract only the fields we care about and do minimal
    validation of them, is the Tolerant Reader pattern.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式，即我们仅提取我们关心的字段并对它们进行最小的验证，就是宽容读者模式。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'Validate as little as possible. Read only the fields you need, and don’t overspecify
    their contents. This will help your system stay robust when other systems change
    over time. Resist the temptation to share message definitions between systems:
    instead, make it easy to define the data you depend on. For more info, see Martin
    Fowler’s article on the [Tolerant Reader pattern](https://oreil.ly/YL_La).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量少进行验证。只读取您需要的字段，不要过度指定它们的内容。这将有助于您的系统在其他系统随着时间的变化而保持健壮。抵制在系统之间共享消息定义的诱惑：相反，使定义您所依赖的数据变得容易。有关更多信息，请参阅Martin
    Fowler的文章[Tolerant Reader pattern](https://oreil.ly/YL_La)。
- en: Validating at the Edge
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在边缘验证
- en: Earlier, we said that we want to avoid cluttering our code with irrelevant details.
    In particular, we don’t want to code defensively inside our domain model. Instead,
    we want to make sure that requests are known to be valid before our domain model
    or use-case handlers see them. This helps our code stay clean and maintainable
    over the long term. We sometimes refer to this as *validating at the edge of the
    system*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾经说过，我们希望避免在我们的代码中充斥着无关的细节。特别是，我们不希望在我们的领域模型内部进行防御性编码。相反，我们希望确保在我们的领域模型或用例处理程序看到它们之前，已知请求是有效的。这有助于我们的代码在长期内保持干净和可维护。我们有时将其称为*在系统边缘进行验证*。
- en: In addition to keeping your code clean and free of endless checks and asserts,
    bear in mind that invalid data wandering through your system is a time bomb; the
    deeper it gets, the more damage it can do, and the fewer tools you have to respond
    to it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了保持您的代码干净并且没有无休止的检查和断言之外，要记住，系统中漫游的无效数据就像是一颗定时炸弹；它越深入，造成的破坏就越大，而您可以用来应对它的工具就越少。
- en: 'Back in [Chapter 8](ch08.xhtml#chapter_08_events_and_message_bus), we said
    that the message bus was a great place to put cross-cutting concerns, and validation
    is a perfect example of that. Here’s how we might change our bus to perform validation
    for us:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.xhtml#chapter_08_events_and_message_bus)中，我们说消息总线是一个很好的放置横切关注点的地方，验证就是一个完美的例子。以下是我们如何改变我们的总线来执行验证的方式：
- en: '*Validation*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*验证*'
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s how we might use that method from our Flask API endpoint:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何从我们的Flask API端点使用该方法：
- en: '*API bubbles up validation errors (src/allocation/flask_app.py)*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*API在处理Redis消息时出现验证错误（src/allocation/flask_app.py）*'
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And here’s how we might plug it in to our asynchronous message processor:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何将其插入到我们的异步消息处理器中：
- en: '*Validation errors when handling Redis messages (src/allocation/redis_pubsub.py)*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*处理Redis消息时出现验证错误（src/allocation/redis_pubsub.py）*'
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that our entrypoints are solely concerned with how to get a message from
    the outside world and how to report success or failure. Our message bus takes
    care of validating our requests and routing them to the correct handler, and our
    handlers are exclusively focused on the logic of our use case.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的入口点仅关注如何从外部世界获取消息以及如何报告成功或失败。我们的消息总线负责验证我们的请求并将其路由到正确的处理程序，而我们的处理程序则专注于用例的逻辑。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: When you receive an invalid message, there’s usually little you can do but log
    the error and continue. At MADE we use metrics to count the number of messages
    a system receives, and how many of those are successfully processed, skipped,
    or invalid. Our monitoring tools will alert us if we see spikes in the numbers
    of bad messages.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当您收到无效的消息时，通常除了记录错误并继续之外，你几乎无能为力。在MADE，我们使用指标来计算系统接收的消息数量，以及其中有多少成功处理、跳过或无效。如果我们看到坏消息数量的激增，我们的监控工具会向我们发出警报。
- en: Validating Semantics
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证语义
- en: While syntax is concerned with the structure of messages, *semantics* is the
    study of *meaning* in messages. The sentence “Undo no dogs from ellipsis four”
    is syntactically valid and has the same structure as the sentence “Allocate one
    teapot to order five,"” but it is meaningless.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语法涉及消息的结构，*语义*是对消息中*含义*的研究。句子“Undo no dogs from ellipsis four”在语法上是有效的，并且与句子“Allocate
    one teapot to order five”具有相同的结构，但它是毫无意义的。
- en: 'We can read this JSON blob as an `Allocate` command but can’t successfully
    execute it, because it’s *nonsense*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个JSON块解读为一个“分配”命令，但无法成功执行它，因为它是*无意义的*：
- en: '*A meaningless message*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个毫无意义的消息*'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We tend to validate semantic concerns at the message-handler layer with a kind
    of contract-based programming:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们倾向于在消息处理程序层验证语义关注点，采用一种基于合同的编程：
- en: '*Preconditions (src/allocation/ensure.py)*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*前提条件（src/allocation/ensure.py）*'
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_validation_CO3-1)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_validation_CO3-1)'
- en: We use a common base class for errors that mean a message is invalid.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个通用的错误基类，表示消息无效。
- en: '[![2](Images/2.png)](#co_validation_CO3-2)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_validation_CO3-2)'
- en: Using a specific error type for this problem makes it easier to report on and
    handle the error. For example, it’s easy to map `ProductNotFound` to a 404 in
    Flask.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为此问题使用特定的错误类型使得更容易报告和处理错误。例如，将`ProductNotFound`映射到Flask中的404很容易。
- en: '[![3](Images/3.png)](#co_validation_CO3-3)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_validation_CO3-3)'
- en: '`product_exists` is a precondition. If the condition is `False`, we raise an
    error.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`product_exists`是一个前提条件。如果条件为`False`，我们会引发一个错误。'
- en: 'This keeps the main flow of our logic in the service layer clean and declarative:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以使我们的服务层的主要逻辑保持清晰和声明式：
- en: '*Ensure calls in services (src/allocation/services.py)*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*在服务中确保调用（src/allocation/services.py）*'
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can extend this technique to make sure that we apply messages idempotently.
    For example, we want to make sure that we don’t insert a batch of stock more than
    once.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展这个技术，以确保我们幂等地应用消息。例如，我们希望确保我们不会多次插入一批库存。
- en: 'If we get asked to create a batch that already exists, we’ll log a warning
    and continue to the next message:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们被要求创建一个已经存在的批次，我们将记录一个警告并继续下一个消息：
- en: '*Raise SkipMessage exception for ignorable events (src/allocation/services.py)*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*为可忽略的事件引发SkipMessage异常（src/allocation/services.py）*'
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Introducing a `SkipMessage` exception lets us handle these cases in a generic
    way in our message bus:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 引入`SkipMessage`异常让我们以一种通用的方式处理这些情况在我们的消息总线中：
- en: '*The bus now knows how to skip (src/allocation/messagebus.py)*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*公交车现在知道如何跳过（src/allocation/messagebus.py）*'
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are a couple of pitfalls to be aware of here. First, we need to be sure
    that we’re using the same UoW that we use for the main logic of our use case.
    Otherwise, we open ourselves to irritating concurrency bugs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意一些陷阱。首先，我们需要确保我们使用的是与用例的主要逻辑相同的UoW。否则，我们会让自己遭受恼人的并发错误。
- en: Second, we should try to avoid putting *all* our business logic into these precondition
    checks. As a rule of thumb, if a rule *can* be tested inside our domain model,
    then it *should* be tested in the domain model.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们应该尽量避免将*所有*业务逻辑都放入这些前提条件检查中。作为一个经验法则，如果一个规则*可以*在我们的领域模型内进行测试，那么它*应该*在领域模型中进行测试。
- en: Validating Pragmatics
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证语用学
- en: '*Pragmatics* is the study of how we understand language in context. After we
    have parsed a message and grasped its meaning, we still need to process it in
    context. For example, if you get a comment on a pull request saying, “I think
    this is very brave,” it may mean that the reviewer admires your courage—unless
    they’re British, in which case, they’re trying to tell you that what you’re doing
    is insanely risky, and only a fool would attempt it. Context is everything.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*语用学*是研究我们如何在语境中理解语言的学科。在解析消息并理解其含义之后，我们仍然需要在上下文中处理它。例如，如果你在拉取请求上收到一条评论说“我认为这非常勇敢”，这可能意味着评论者钦佩你的勇气，除非他们是英国人，在这种情况下，他们试图告诉你你正在做的事情是非常冒险的，只有愚蠢的人才会尝试。上下文是一切。'
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Once you’ve validated the syntax and semantics of your commands at the edges
    of your system, the domain is the place for the rest of your validation. Validation
    of pragmatics is often a core part of your business rules.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在系统边缘验证了命令的语法和语义，领域就是其余验证的地方。验证语用学通常是业务规则的核心部分。
- en: In software terms, the pragmatics of an operation are usually managed by the
    domain model. When we receive a message like “allocate three million units of
    `SCARCE-CLOCK` to order 76543,” the message is *syntactically* valid and *semantically*
    valid, but we’re unable to comply because we don’t have the stock available.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件术语中，操作的语用学通常由领域模型管理。当我们收到像“allocate three million units of `SCARCE-CLOCK`
    to order 76543”这样的消息时，消息在*语法*上有效且*语义*上有效，但我们无法遵守，因为我们没有库存可用。

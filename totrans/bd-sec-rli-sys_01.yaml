- en: Foreword by Michael Wildpaner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At their core, both Site Reliability Engineering and Security Engineering are
    concerned with keeping a system usable. Issues like broken releases, capacity
    shortages, and misconfigurations can make a system unusable (at least temporarily).
    Security or privacy incidents that break the trust of users also undermine the
    usefulness of a system. Consequently, system security is top of mind for SREs.
  prefs: []
  type: TYPE_NORMAL
- en: On the design level, security has become a highly dynamic property of distributed
    systems. We’ve come a long way from passwordless accounts on early Unix-based
    telephony switches (nobody had a modem to dial into them, or so people thought),
    static username/password combinations, and static firewall rules. These days,
    we instead use time-limited access tokens and high-dimensional risk assessment
    at millions of requests per second. Granular cryptography of data in flight and
    at rest, combined with frequent key rotation, makes key management an additional
    dependency of any networking, processing, or storage system that deals with sensitive
    information. Building and operating these infrastructure security software systems
    requires close collaboration between the original system designers, security engineers,
    and SREs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The security of distributed systems has an additional, more personal, meaning
    for me. From my university days until I joined Google, I had a side career in
    offensive security with a focus on network penetration testing. I learned a lot
    about the fragility of distributed software systems and the asymmetry between
    system designers and operators versus attackers: the former need to protect against
    all possible attacks, while an attacker needs to find only a single exploitable
    weakness.'
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, SRE is involved in both significant design discussions and actual system
    changes. As one of the early SRE Tech Leads of Gmail, I started seeing SREs as
    one of the best lines of defense (and in the case of system changes, quite literally
    the last line of defense) in preventing bad design or bad implementations from
    affecting the security of our systems.
  prefs: []
  type: TYPE_NORMAL
- en: Google’s two books about SRE—[*Site Reliability Engineering*](http://shop.oreilly.com/product/0636920041528.do)
    and [*The Site Reliability Workbook*](http://shop.oreilly.com/product/0636920132448.do)—relate
    the principles and best practices of SRE, but don’t go into details about the
    intersection of reliability and security. This book fills that gap, and also has
    the space to dive deeper into security-focused topics.
  prefs: []
  type: TYPE_NORMAL
- en: For many years at Google, we’ve been pulling aside engineers and giving them
    “the talk”—a conversation about how to responsibly handle the security of our
    systems. But a more formal treatment of how to design and operate secure distributed
    systems is long overdue. In this way, we can better scale this previously informal
    collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Security is at the forefront of finding new classes of attacks and immunizing
    our systems against the varied threats in today’s networked environments, while
    SRE plays a major role in preventing and remediating such issues. There’s simply
    no alternative to pushing for reliability *and* security as integral parts of
    the software development lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: Michael Wildpaner, Senior Director, Site Reliability Engineering
  prefs: []
  type: TYPE_NORMAL

- en: Chapter 1\. The Intersection of Security and Reliability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。安全性和可靠性的交集
- en: By Adam Stubblefield, Massimiliano Poletto, and Piotr Lewandowski
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由亚当·斯塔布菲尔德、马西米利亚诺·波莱托和皮奥特·莱万多夫斯基撰写
- en: with David Huska and Betsy Beyer‎
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与大卫·胡斯卡和贝琪·拜尔一起
- en: On Passwords and Power Drills
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于密码和电钻
- en: On September 27, 2012, an innocent Google-wide announcement caused a series
    of cascading failures in an internal service. Ultimately, recovering from these
    failures required a power drill.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年9月27日，一封无辜的谷歌公司范围内的公告在内部服务中引发了一系列连锁故障。最终，从这些故障中恢复需要使用电钻。
- en: Google has an internal password manager that allows employees to store and share
    secrets for third-party services that don’t support better authentication mechanisms.
    One such secret is the password to the guest WiFi system on the large fleet of
    buses that connect Google’s San Francisco Bay Area campuses.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌有一个内部密码管理器，允许员工存储和共享第三方服务的密码，这些服务不支持更好的身份验证机制。其中一个秘密是连接谷歌旧金山湾区校园的大型巴士上的访客WiFi系统的密码。
- en: On that day in September, the corporate transportation team emailed an announcement
    to thousands of employees that the WiFi password had changed. The resulting spike
    in traffic was far larger than the password management system—which had been developed
    years earlier for a small audience of system administrators—could handle.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个九月的一天，公司的交通团队向成千上万的员工发送了一封电子邮件公告，称WiFi密码已更改。由此产生的流量激增远远超过了密码管理系统的处理能力，该系统多年前为一小群系统管理员开发而成。
- en: 'The load caused the primary replica of the password manager to become unresponsive,
    so the load balancer diverted traffic to the secondary replica, which promptly
    failed in the same way. At this point, the system paged the on-call engineer.
    The engineer had no experience responding to failures of the service: the password
    manager was supported on a best-effort basis, and had never suffered an outage
    in its five years of existence. The engineer attempted to restart the service,
    but did not know that a restart required a hardware security module (HSM) smart
    card.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 密码管理器的主要副本由于负载过大而变得无响应，因此负载均衡器将流量转移到次要副本，但次要副本立即以相同的方式失败。此时，系统呼叫了值班工程师。工程师没有经验来应对服务的故障：密码管理器是在尽力支持的基础上运行的，并且在其存在的五年中从未发生过故障。工程师试图重新启动服务，但不知道重新启动需要硬件安全模块（HSM）智能卡。
- en: These smart cards were stored in multiple safes in different Google offices
    across the globe, but not in New York City, where the on-call engineer was located.
    When the service failed to restart, the engineer contacted a colleague in Australia
    to retrieve a smart card. To their great dismay, the engineer in Australia could
    not open the safe because the combination was stored in the now-offline password
    manager. Fortunately, another colleague in California had memorized the combination
    to the on-site safe and was able to retrieve a smart card. However, even after
    the engineer in California inserted the card into a reader, the service still
    failed to restart with the cryptic error, “The password could not load any of
    the cards protecting this key.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些智能卡存放在全球不同的谷歌办公室的多个保险柜中，但不在值班工程师所在的纽约市。当服务无法重新启动时，工程师联系了澳大利亚的一位同事来取回智能卡。令他们大为沮丧的是，澳大利亚的工程师无法打开保险柜，因为组合密码存储在现在已经离线的密码管理器中。幸运的是，加利福尼亚的另一位同事记住了现场保险柜的组合密码，并成功取回了智能卡。然而，即使加利福尼亚的工程师插入了卡片，服务仍然无法重新启动，显示了“密码无法加载任何保护此密钥的卡片”的加密错误。
- en: At this point, the engineers in Australia decided that a brute-force approach
    to their safe problem was warranted and applied a power drill to the task. An
    hour later, the safe was open—but even the newly retrieved cards triggered the
    same error message.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，澳大利亚的工程师决定采用蛮力方法解决保险柜的问题，并用电钻进行了尝试。一个小时后，保险柜被打开了，但即使新取回的卡片也触发了相同的错误消息。
- en: It took an additional hour for the team to realize that the green light on the
    smart card reader did not, in fact, indicate that the card had been inserted correctly.
    When the engineers flipped the card over, the service restarted and the outage
    ended.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 团队花了额外一个小时才意识到智能卡读卡器上的绿灯实际上并没有正确插入卡片。当工程师们翻转卡片时，服务重新启动，故障结束了。
- en: Reliability and security are both crucial components of a truly trustworthy
    system, but building systems that are both reliable and secure is difficult. While
    the requirements for reliability and security share many common properties, they
    also require different design considerations. It is easy to miss the subtle interplay
    between reliability and security that can cause unexpected outcomes. The password
    manager’s failure was triggered by a reliability problem—poor load-balancing and
    load-shedding strategies—and its recovery was later complicated by multiple measures
    designed to increase the security of the system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠性和安全性都是真正值得信赖的系统的关键组成部分，但构建既可靠又安全的系统是困难的。虽然可靠性和安全性的要求有许多共同的属性，但它们也需要不同的设计考虑。很容易忽视可靠性和安全性之间微妙的相互作用，这可能导致意想不到的结果。密码管理器的故障是由可靠性问题引发的——负载均衡和负载分担策略不佳——而其恢复后又受到了多项旨在增加系统安全性的措施的影响。
- en: 'Reliability Versus Security: Design Considerations'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可靠性与安全性：设计考虑
- en: In designing for reliability and security, you must consider different risks.
    The primary reliability risks are nonmalicious in nature—for example, a bad software
    update or a physical device failure. Security risks, however, come from adversaries
    who are actively trying to exploit system vulnerabilities. When designing for
    reliability, you assume that some things will go wrong at some point. When designing
    for security, you must assume that an adversary could be trying to make things
    go wrong at any point.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计可靠性和安全性时，您必须考虑不同的风险。主要的可靠性风险是非恶意的，例如，糟糕的软件更新或物理设备故障。然而，安全风险来自积极试图利用系统漏洞的对手。在设计可靠性时，您假设某些事情在某个时候会出错。在设计安全性时，您必须假设对手可能在任何时候试图让事情出错。
- en: 'As a result, different systems are designed to respond to failures in quite
    different ways. In the absence of an adversary, systems often fail *safe* (or
    *open*): for example, an electronic lock is designed to remain open in case of
    power failure, to allow safe exit through the door. Fail safe/open behavior can
    lead to obvious security vulnerabilities. To defend against an adversary who might
    exploit a power failure, you could design the door to fail *secure* and remain
    closed when not powered.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不同的系统设计以非常不同的方式响应故障。在没有对手的情况下，系统通常会失败*安全*（或*开放*）：例如，电子锁设计为在停电时保持开放，以便通过门安全出口。失败安全/开放行为可能导致明显的安全漏洞。为了防御可能利用停电的对手，您可以设计门在停电时失败*安全*并保持关闭。
- en: Confidentiality, Integrity, Availability
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保密性、完整性、可用性
- en: Both security and reliability are concerned with the confidentiality, integrity,
    and availability of systems, but they view these properties through different
    lenses. The key difference between the two viewpoints is the presence or lack
    of a malicious adversary. A reliable system must not breach confidentiality accidentally,
    like a buggy chat system that misdelivers, garbles, or loses messages might. Additionally,
    a secure system must prevent an active adversary from accessing, tampering with,
    or destroying confidential data. Let’s take a look at a few examples that demonstrate
    how a reliability problem can lead to a security issue.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和可靠性都关注系统的保密性、完整性和可用性，但它们通过不同的视角看待这些属性。两种观点之间的关键区别在于是否存在恶意对手。可靠的系统不得意外泄露保密性，例如，一个有缺陷的聊天系统可能会误送、弄乱或丢失消息。此外，安全系统必须防止积极的对手访问、篡改或销毁机密数据。让我们看一些例子，说明可靠性问题如何导致安全问题。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Confidentiality, integrity, and availability have traditionally been considered
    fundamental attributes of secure systems and are referred to as the *CIA triad*.
    While many other models extend the set of security attributes beyond these three,
    the CIA triad has remained popular over time. Despite the acronym, this concept
    is not related to the Central Intelligence Agency in any way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 保密性、完整性和可用性一直被认为是安全系统的基本属性，并被称为*CIA三位一体*。尽管许多其他模型将安全属性的集合扩展到这三个之外，但CIA三位一体随着时间的推移仍然很受欢迎。尽管有这个缩写，但这个概念与中央情报局没有任何关系。
- en: Confidentiality
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保密性
- en: 'In the aviation industry, having a push-to-talk microphone [stuck in the transmit
    position](https://oreil.ly/QXg1F) is a notable confidentiality problem. In several
    well-documented cases, a stuck mike has broadcast private conversations between
    pilots in the cockpit, which represents a breach of confidentiality. In this case,
    no malicious adversary is involved: a hardware reliability flaw causes the device
    to transmit when the pilot does not intend it to.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在航空业中，麦克风卡在传输位置是一个显著的保密问题。在几个有记录的案例中，卡住的麦克风在驾驶舱中广播了飞行员之间的私人对话，这代表了保密的违反。在这种情况下，没有恶意的对手参与：硬件可靠性缺陷导致设备在飞行员不打算时进行传输。
- en: Integrity
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整性
- en: Similarly, data integrity compromise need not involve an active adversary. In
    2015, Google Site Reliability Engineers (SREs) noticed that the end-to-end cryptographic
    integrity checks on a few blocks of data were failing. Because some of the machines
    that processed the data later demonstrated evidence of uncorrectable memory errors,
    the SREs decided to write software that exhaustively computed the integrity check
    for every version of the data with a single-bit flip (a 0 changed to a 1, or vice
    versa). That way, they could see if one of the results matched the value of the
    original integrity check. All errors indeed turned out to be single-bit flips,
    and the SREs recovered all the data. Interestingly, this was an instance of a
    security technique coming to the rescue during a reliability incident. (Google’s
    storage systems also use noncryptographic end-to-end integrity checks, but other
    issues prevented SREs from detecting the bit flips.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，数据完整性损害不一定涉及主动对手。2015年，谷歌的网站可靠性工程师（SREs）注意到一些数据块的端到端加密完整性检查失败了。因为一些处理数据的机器后来表现出不可纠正的内存错误的证据，SREs决定编写软件，详尽地计算每个数据版本的完整性检查，只需一个位翻转（0变为1，反之亦然）。这样，他们可以看到是否有一个结果与原始完整性检查的值匹配。所有错误确实都是单位翻转，SREs恢复了所有数据。有趣的是，这是一个安全技术在可靠性事件中发挥作用的例子。（谷歌的存储系统也使用非加密的端到端完整性检查，但其他问题阻止了SREs检测到位翻转。）
- en: Availability
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用性
- en: Finally, of course, availability is both a reliability and a security concern.
    An adversary might exploit a system’s weak spot to bring the system to a halt
    or impair its operation for authorized users. Or they might control a large number
    of devices spread around the world to perform a classic distributed denial-of-service
    (DDoS) attack, instructing the many devices to flood a victim with traffic.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当然，可用性既是可靠性问题，也是安全问题。对手可能利用系统的弱点使系统停止运行或损害其对授权用户的操作。或者他们可能控制世界各地的大量设备来执行经典的分布式拒绝服务（DDoS）攻击，指示许多设备向受害者发送流量。
- en: Denial-of-service (DoS) attacks are an interesting case because they straddle
    the areas of reliability and security. From a victim’s point of view, a malicious
    attack may be indistinguishable from a design flaw or a legitimate spike in traffic.
    For example, [a 2018 software update](https://redd.it/9iivc5) caused some Google
    Home and Chromecast devices to generate large synchronized spikes in network traffic
    as the devices adjusted their clocks, resulting in unexpected load on Google’s
    central time service. Similarly, a major breaking news story or other event that
    prompts millions of people to issue near-identical queries can look very much
    like a traditional application-level DDoS attack. As shown in [Figure 1-1](#web_trafficcomma_measured_in_http_requ),
    when a magnitude 4.5 earthquake hit the San Francisco Bay Area in the middle of
    the night in October 2019, Google infrastructure serving the area was hit with
    a flood of queries.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Web traffic, measured in HTTP requests per second, reaching Google infrastructure
    serving users in the San Francisco Bay Area when a magnitude 4.5 earthquake hit
    the region on October 14, 2019](assets/bsrs_0101.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. Web traffic, measured in HTTP requests per second, reaching Google
    infrastructure serving users in the San Francisco Bay Area when a magnitude 4.5
    earthquake hit the region on October 14, 2019
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Reliability and Security: Commonalities'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reliability and security—unlike many other system characteristics—are emergent
    properties of a system’s design. Both are also difficult to bolt on after the
    fact, so you should ideally take both into account from the earliest design stages.
    They also require ongoing attention and testing throughout the entire system lifecycle,
    because it is easy for system changes to inadvertently affect them. In a complex
    system, reliability and security properties are often determined by the interaction
    of many components, and an innocuous-looking update to one component may end up
    affecting the reliability or security of the entire system in a way that may not
    be evident until it causes an incident. Let’s examine these and other commonalities
    in more detail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Invisibility
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reliability and security are mostly invisible when everything is going well.
    But one of the goals of reliability and security teams is to earn and keep the
    trust of customers and partners. Good communication—not only in times of trouble,
    but also when things are going well—is a solid foundation for this trust. It is
    important that the information be—to the greatest degree possible—honest and concrete,
    and free of platitudes and jargon.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the inherent invisibility of reliability and security in the
    absence of emergencies means that they’re often seen as costs that you can reduce
    or defer without immediate consequences. However, the costs of reliability and
    security failures can be severe. According to media reports, [data breaches](https://oreil.ly/QJuBm)
    may have led to a $350 million reduction in the price Verizon paid to acquire
    Yahoo!’s internet business in 2017\. In the same year, [a power failure](https://oreil.ly/vyXAE)
    caused key computer systems to shut down at Delta Airlines and resulted in almost
    700 flight cancellations and thousands of delays, reducing Delta’s flight throughput
    for the day by approximately 60%.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Assessment
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because it’s not practical to achieve perfect reliability or security, you can
    use risk-based approaches to estimate the costs of negative events, as well as
    the up-front and opportunity costs of preventing these events. However, you should
    measure the probability of negative events differently for reliability and security.
    You can reason about the reliability of a composition of systems and plan engineering
    work according to desired error budgets,^([1](ch01.html#ch01fn2)) at least in
    part because you can assume independence of failures across the individual components.
    The security of such a composition is more difficult to assess. Analyzing a system’s
    design and implementation can afford some level of assurance. Adversarial testing—simulated
    attacks typically performed from the perspective of a defined adversary—can also
    be used to evaluate a system’s resistance to particular kinds of attacks, the
    effectiveness of attack detection mechanisms, and the potential consequences of
    attacks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为实现完美的可靠性或安全性并不切实际，所以可以使用基于风险的方法来估计负面事件的成本，以及预防这些事件的前期成本和机会成本。然而，应该以不同的方式衡量可靠性和安全性的负面事件的概率。您可以推断系统组合的可靠性，并根据所需的错误预算计划工程工作，至少部分原因是您可以假设各个组件之间的故障是独立的。这样的组合的安全性更难评估。分析系统的设计和实施可以提供一定程度的保证。对抗性测试——通常从定义的对手的角度进行的模拟攻击——也可以用来评估系统对特定类型攻击的抵抗能力，攻击检测机制的有效性以及攻击的潜在后果。
- en: Simplicity
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单
- en: Keeping system design as simple as possible is one of the best ways to improve
    your ability to assess both the reliability and the security of a system. A simpler
    design reduces the attack surface, decreases the potential for unanticipated system
    interactions, and makes it easier for humans to comprehend and reason about the
    system. Understandability is especially valuable during emergencies, when it can
    help responders mitigate symptoms quickly and reduce mean time to repair (MTTR).
    [Chapter 6](ch06.html#design_for_understandability) elaborates on this topic and
    discusses strategies such as minimizing attack surfaces and isolating responsibility
    for security invariants into small, simple subsystems that can be reasoned about
    independently.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将系统设计尽可能简单是提高系统可靠性和安全性评估能力的最佳途径之一。简单的设计减少了攻击面，减少了意外系统交互的可能性，并使人类更容易理解和推理系统。在紧急情况下，可理解性尤为重要，因为它可以帮助应对者快速缓解症状并减少修复时间（MTTR）。[第6章](ch06.html#design_for_understandability)详细讨论了这个话题，并讨论了诸如最小化攻击面和将安全不变量的责任隔离到可以独立推理的小型简单子系统等策略。
- en: Evolution
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演变
- en: No matter how simple and elegant the initial design, systems rarely remain unchanged
    over time. New feature requirements, changes in scale, and evolution of the underlying
    infrastructure all tend to introduce complexity. On the security side, the need
    to keep up with evolving attacks and new adversaries can also increase system
    complexity. Additionally, pressure to meet market demands can lead system developers
    and maintainers to cut corners and accumulate technical debt. [Chapter 7](ch07.html#design_for_a_changing_landscape)
    addresses some of these challenges.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无论最初的设计多么简单和优雅，系统很少会随着时间保持不变。新的功能要求、规模变化以及基础架构的演变都往往引入复杂性。在安全方面，需要跟上不断演变的攻击和新的对手也可能增加系统的复杂性。此外，满足市场需求的压力可能导致系统开发人员和维护人员采取捷径并积累技术债务。[第7章](ch07.html#design_for_a_changing_landscape)讨论了其中一些挑战。
- en: Complexity often accumulates inadvertently, but this can lead to tipping-point
    situations where a small and apparently innocuous change has major consequences
    for a system’s reliability or security. A bug that was introduced in 2006 and
    discovered almost two years later in the Debian GNU/Linux version of the OpenSSL
    library provides [one notorious example](https://oreil.ly/OIX0b) of a major failure
    caused by a small change. An open source developer noticed that Valgrind, a standard
    tool for debugging memory problems, was reporting warnings about memory used prior
    to initialization. To eliminate the warnings, the developer removed two lines
    of code. Unfortunately, this caused OpenSSL’s pseudo-random number generator to
    only be seeded with a process ID, which on Debian at the time defaulted to a number
    between 1 and 32,768\. Brute force could then easily break cryptographic keys.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性往往是无意中积累的，但这可能导致临界点情况，即一个小的看似无害的变化对系统的可靠性或安全性产生重大后果。2006年引入的一个错误，几乎两年后在Debian
    GNU/Linux版本的OpenSSL库中被发现，提供了[一个臭名昭著的例子](https://oreil.ly/OIX0b)，即由一个小的变化引起的重大故障。一个开源开发人员注意到Valgrind，一个用于调试内存问题的标准工具，报告了关于初始化前使用的内存的警告。为了消除警告，开发人员删除了两行代码。不幸的是，这导致OpenSSL的伪随机数生成器只使用了一个进程ID作为种子，而在当时的Debian默认为1到32,768之间的一个数字。然后可以轻松地破解加密密钥。
- en: 'Google has not been immune to failures triggered by seemingly innocuous changes.
    For example, in October 2018, [YouTube was down](https://oreil.ly/CpxXL) globally
    for more than an hour because of a small change in a generic logging library.
    A change intended to improve the granularity of event logging looked innocent
    to both its author and the designated code reviewer, and it passed all tests.
    However, the developers didn’t fully realize the impact of the change at YouTube
    scale: under production load, the change quickly caused YouTube servers to run
    out of memory and crash. As the failures shifted user traffic toward other, still
    healthy servers, cascading failures brought the entire service to a halt.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌并不免于由看似无害的变化引发的故障。例如，2018年10月，由于一个通用日志记录库的小改动，[YouTube全球宕机](https://oreil.ly/CpxXL)超过一个小时。一个旨在改善事件记录粒度的变化对其作者和指定的代码审查者来说看起来是无害的，并且通过了所有测试。然而，开发人员并没有完全意识到在YouTube规模下这种改变的影响：在生产负载下，这个改变迅速导致YouTube服务器耗尽内存并崩溃。随着故障将用户流量转移到其他仍然健康的服务器，级联故障使整个服务停止运行。
- en: Resilience
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 韧性
- en: Of course, a memory utilization problem should not have caused a global service
    outage. Systems should be designed to be resilient under adverse or unexpected
    circumstances. From the reliability perspective, such circumstances are often
    caused by unexpectedly high load or component failures. Load is a function of
    the volume and the average cost of requests to the system, so you can achieve
    resilience by shedding some of the incoming load (processing less) or reducing
    the processing cost for each request (processing more cheaply). To address component
    failures, system design should incorporate redundancy and distinct failure domains
    so that you can limit the impact of failures by rerouting requests. [Chapter 8](ch08.html#design_for_resilience)
    discusses these topics further, and [Chapter 10](ch10.html#mitigating_denial_of_service_attacks)
    goes into depth on DoS mitigations in particular.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，内存利用问题不应该导致全球服务中断。系统应该被设计成在不利或意外情况下具有弹性。从可靠性的角度来看，这些情况通常是由意外高负载或组件故障引起的。负载是系统请求的数量和平均成本的函数，因此你可以通过减少一部分传入负载（处理更少）或减少每个请求的处理成本（更便宜地处理）来实现弹性。为了解决组件故障，系统设计应该包括冗余和不同的故障域，这样你就可以通过重新路由请求来限制故障的影响。[第8章](ch08.html#design_for_resilience)进一步讨论了这些话题，[第10章](ch10.html#mitigating_denial_of_service_attacks)则深入探讨了特定的DoS缓解措施。
- en: However resilient a system’s individual components might be, once it becomes
    sufficiently complex, you cannot easily demonstrate that the entire system is
    immune to compromise. You can address this problem in part using defense in depth
    and distinct failure domains. *Defense in depth* is the application of multiple,
    sometimes redundant, defense mechanisms. *Distinct failure domains* limit the
    “blast radius” of a failure and therefore also increase reliability. A good system
    design limits an adversary’s ability to exploit a compromised host or stolen credentials
    in order to move laterally or to escalate privilege and affect other parts of
    the system.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，无论系统的个别组件有多么具有弹性，一旦它变得足够复杂，你就无法轻易证明整个系统对妥协是免疫的。你可以部分地通过深度防御和不同的故障域来解决这个问题。*深度防御*是应用多种，有时是冗余的防御机制。*不同的故障域*限制了故障的“爆炸半径”，因此也增加了可靠性。一个良好的系统设计限制了对手利用受损主机或被盗凭证进行横向移动或提升特权并影响系统其他部分的能力。
- en: You can implement distinct failure domains by compartmentalizing permissions
    or restricting the scope of credentials. For example, Google’s internal infrastructure
    supports credentials that are explicitly scoped to a geographic region. These
    types of features can limit the ability of an attacker who compromises a server
    in one region to move laterally to servers in other regions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过对权限进行分隔或限制凭证的范围来实现不同的故障域。例如，谷歌的内部基础设施支持明确限定地理区域的凭证。这些类型的功能可以限制攻击者在一个地区损坏服务器后横向移动到其他地区的能力。
- en: Employing independent encryption layers for sensitive data is another common
    mechanism for defense in depth. For example, even though disks provide device-level
    encryption, it’s often a good idea to also encrypt the data at the application
    layer. This way, even a flawed implementation of an encryption algorithm in a
    drive controller won’t be sufficient to compromise the confidentiality of protected
    data if an attacker gains physical access to a storage device.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为敏感数据使用独立的加密层是深度防御的另一个常见机制。例如，尽管磁盘提供设备级加密，但在应用层也加密数据通常是一个好主意。这样，即使驱动控制器中的加密算法实现有缺陷，也不足以
    compromise 受保护数据的机密性，如果攻击者获得对存储设备的物理访问。
- en: While the examples cited so far hinge on external attackers, you must also consider
    potential threats from malicious insiders. Although an insider may know more about
    potential abuse vectors than an external attacker who steals an employee’s credentials
    for the first time, the two cases often don’t differ much in practice. The *principle
    of least privilege* can mitigate insider threats. It dictates that a user should
    have the minimal set of privileges required to perform their job at a given time.
    For example, mechanisms like Unix’s `sudo` support fine-grained policies that
    specify which users can run which commands as which role.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然迄今为止引用的例子都依赖于外部攻击者，但你也必须考虑来自恶意内部人员的潜在威胁。尽管内部人员可能比第一次窃取员工凭证的外部攻击者更了解潜在的滥用途径，但在实践中这两种情况通常并没有太大的区别。*最小权限原则*可以缓解内部威胁。它规定用户在特定时间内应该具有执行工作所需的最小权限集。例如，像Unix的`sudo`这样的机制支持细粒度策略，指定哪些用户可以以哪种角色运行哪些命令。
- en: At Google, we also use multi-party authorization to ensure that sensitive operations
    are reviewed and approved by specific sets of employees. This multi-party mechanism
    both protects against malicious insiders and reduces the risk of innocent human
    error, a common cause of reliability failures. Least privilege and multi-party
    authorization are not new ideas—they have been employed in many noncomputing scenarios,
    from nuclear missile silos to bank vaults. [Chapter 5](ch05.html#design_for_least_privilege)
    discusses these concepts in depth.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在谷歌，我们还使用多方授权来确保敏感操作得到特定员工组的审查和批准。这种多方机制既可以防范恶意内部人员，也可以减少无辜人为错误的风险，这是可靠性故障的常见原因。最小权限和多方授权并不是新概念——它们在许多非计算场景中都有应用，从核导弹发射井到银行保险库。[第5章](ch05.html#design_for_least_privilege)深入讨论了这些概念。
- en: From Design to Production
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从设计到生产
- en: Security and reliability considerations should be kept in mind when translating
    even a solid design into a fully deployed production system. Starting with the
    development of the code, opportunities exist to spot potential security and reliability
    issues through code reviews, and even to prevent entire classes of problems by
    using common frameworks and libraries. [Chapter 12](ch12.html#writing_code) discusses
    some of these techniques.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是将坚实的设计转化为完全部署的生产系统时，也应该牢记安全性和可靠性考虑。从编写代码开始，通过代码审查可以发现潜在的安全性和可靠性问题，甚至可以通过使用常见的框架和库来预防整类问题。[第12章](ch12.html#writing_code)讨论了一些这些技术。
- en: Before deploying a system, you can use testing to ensure that it functions correctly
    both in normal scenarios and in the edge cases that typically impact reliability
    and security. Whether you use load testing to understand the behavior of a system
    under a flood of queries, fuzzing to explore the behavior on potentially unexpected
    inputs, or specialized tests to ensure that cryptographic libraries aren’t leaking
    information, testing plays a critical role in gaining assurance that the system
    you’ve actually built matches your design intentions. [Chapter 13](ch13.html#onethree_testing_code)
    covers these approaches in depth.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署系统之前，您可以使用测试来确保它在正常情况下和通常影响可靠性和安全性的边缘情况下都能正确运行。无论您使用负载测试来了解系统在大量查询下的行为，模糊测试来探索可能意外的输入的行为，还是专门的测试来确保加密库不会泄露信息，测试在获得保证实际构建的系统与设计意图匹配方面发挥着关键作用。[第13章](ch13.html#onethree_testing_code)深入讨论了这些方法。
- en: Finally, some approaches to actually deploying code (see [Chapter 14](ch14.html#onefour_deploying_code))
    can limit security and reliability risk. For example, canaries and slow rollouts
    can prevent you from breaking the system for all users simultaneously. Similarly,
    a deployment system that accepts only code that’s been properly reviewed can help
    to mitigate the risk of an insider pushing a malicious binary to production.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一些部署代码的方法（见[第14章](ch14.html#onefour_deploying_code)）可以限制安全性和可靠性风险。例如，金丝雀发布和缓慢的部署可以防止您同时为所有用户破坏系统。同样，一个只接受经过适当审查的代码的部署系统可以帮助减轻内部人员将恶意二进制文件推送到生产环境的风险。
- en: Investigating Systems and Logging
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查系统和日志记录
- en: So far we have focused on design principles and implementation approaches to
    prevent both reliability and security failures. Unfortunately, it is usually impractical
    or too expensive to attain perfect reliability or security. You must assume that
    preventive mechanisms will fail, and craft a plan to detect and recover from failures.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经专注于设计原则和实施方法，以防止可靠性和安全性故障。不幸的是，实现完美的可靠性或安全性通常是不切实际或成本过高的。您必须假设预防机制会失败，并制定一个计划来检测和从故障中恢复。
- en: 'As we discuss in [Chapter 15](ch15.html#onefive_investigating_systems), good
    logging is the foundation of detection and failure preparedness. In general, the
    more complete and detailed your logs, the better—but this guideline has some caveats.
    At sufficient scale, log volume poses a significant cost, and analyzing logs effectively
    can become difficult. The YouTube example from earlier in this chapter illustrates
    that logging can also introduce reliability problems. Security logs pose an additional
    challenge: logs typically should not contain sensitive information, such as authentication
    credentials or personally identifiable information (PII), lest the logs themselves
    become attractive targets for adversaries.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第15章](ch15.html#onefive_investigating_systems)中讨论的那样，良好的日志记录是检测和故障准备的基础。一般来说，您的日志越完整和详细，越好，但这个指导原则也有一些注意事项。在足够大的规模下，日志量会带来显著的成本，并且有效分析日志可能变得困难。本章前面的YouTube示例说明了日志记录也可能引入可靠性问题。安全日志带来了额外的挑战：日志通常不应包含敏感信息，例如身份验证凭据或个人可识别信息（PII），以免日志本身成为对手的吸引目标。
- en: Crisis Response
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 危机响应
- en: During an emergency, teams must work together quickly and smoothly because problems
    can have immediate consequences. In the worst case, an incident can destroy a
    business in minutes. For example, in 2014 an attacker put the code-hosting service
    Code Spaces out of business in a matter of hours by taking over the service’s
    administrative tools and deleting all of its data, [including all backups](https://oreil.ly/dYXkG).
    Well-rehearsed collaboration and good incident management are critical for timely
    responses in these situations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在紧急情况下，团队必须迅速而顺利地合作，因为问题可能会立即产生后果。在最坏的情况下，一次事件可能会在几分钟内摧毁一家企业。例如，2014年，一名攻击者通过接管服务的管理工具并删除所有数据（包括所有备份）使代码托管服务Code
    Spaces在几个小时内破产。熟练的协作和良好的事件管理对及时应对这些情况至关重要。
- en: Organizing crisis response is challenging, so it’s best to have a plan in place
    before an emergency occurs. By the time you discover an incident, the clock may
    have been ticking for some time. In any case, responders are operating under stress
    and time pressure, and (at least initially) with limited situational awareness.
    If an organization is large and the incident requires 24/7 response capabilities
    or collaboration across time zones, the need to maintain state across teams and
    to hand off incident management at the boundaries of work shifts further complicates
    operations. Security incidents also typically entail tension between the impulse
    to involve all essential parties versus the need—often driven by legal or regulatory
    requirements—to restrict information sharing on a need-to-know basis. Moreover,
    the initial security incident may be just the tip of the iceberg. The investigation
    might grow beyond company boundaries or involve law enforcement agencies.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 组织危机响应是具有挑战性的，因此最好在紧急情况发生之前制定计划。当你发现事件时，时间可能已经过去了一段时间。无论如何，响应者都在压力和时间压力下运作，并且（至少最初）具有有限的情境意识。如果一个组织很大，事件需要24/7的响应能力或跨时区的协作，那么在团队之间保持状态并在工作时间交接边界处交接事件管理的需求进一步复杂化了操作。安全事件通常也涉及在需要知道的基础上限制信息共享的冲动与法律或监管要求驱使的需要之间的紧张关系。此外，最初的安全事件可能只是冰山一角。调查可能会超出公司范围或涉及执法机构。
- en: During a crisis, it is essential to have a clear chain of command and a solid
    set of checklists, playbooks, and protocols. As discussed in Chapters [16](ch16.html#onesix_disaster_planning)
    and [17](ch17.html#oneseven_crisis_management), Google has [codified crisis response](https://oreil.ly/NVSXJ)
    into a program called Incident Management at Google (IMAG), which establishes
    a standard, consistent way to handle all types of incidents, from system outages
    to natural disasters, and organize an effective response. IMAG was modeled on
    the US government’s [Incident Command System (ICS)](https://oreil.ly/uSpFn), a
    standardized approach to the command, control, and coordination of emergency response
    among responders from multiple government agencies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在危机期间，拥有清晰的指挥链和一套可靠的检查表、操作手册和协议至关重要。正如[第16章](ch16.html#onesix_disaster_planning)和[第17章](ch17.html#oneseven_crisis_management)中所讨论的，谷歌已经将危机响应编码化为一个名为谷歌事件管理(IMAG)的项目，该项目建立了一种标准、一致的处理各种事件的方式，从系统故障到自然灾害，并组织有效的响应。IMAG是基于美国政府的[事件指挥系统(ICS)](https://oreil.ly/uSpFn)建立的，这是一种在多个政府机构的应急响应者之间进行指挥、控制和协调的标准化方法。
- en: When not faced with the pressure of an ongoing incident, responders typically
    negotiate long intervals with little activity. During these times, teams need
    to keep individuals’ skills and motivation sharp and improve processes and infrastructure
    in preparation for the next emergency. Google’s [Disaster Recovery Testing program
    (DiRT)](https://oreil.ly/hoBK3) regularly simulates various internal system failures
    and forces teams to cope with these types of scenarios. Frequent offensive security
    exercises test our defenses and help identify new vulnerabilities. Google employs
    IMAG even for small incidents, which further prompts us to regularly exercise
    emergency tools and processes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有面临持续事件的压力时，响应者通常会在很长的间隔时间内进行很少的活动。在这些时候，团队需要保持个人的技能和动力，并改进流程和基础设施，以应对下一次紧急情况。谷歌的[灾难恢复测试计划(DiRT)](https://oreil.ly/hoBK3)定期模拟各种内部系统故障，并迫使团队应对这些类型的场景。频繁的攻击性安全演习测试我们的防御，并帮助发现新的漏洞。谷歌甚至针对小事件也使用IMAG，这进一步促使我们定期练习紧急工具和流程。
- en: Recovery
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恢复
- en: 'Recovering from a security failure often requires patching systems to fix a
    vulnerability. Intuitively, you want that process to happen as quickly as possible,
    using mechanisms that are exercised regularly and are therefore decently reliable.
    However, the capability to push changes quickly is a double-edged sword: while
    this capability can help close vulnerabilities quickly, it can also introduce
    bugs or performance issues that cause a lot of damage. The pressure to push patches
    quickly is greater if the vulnerability is widely known or severe. The choice
    of whether to push fixes slowly—and therefore to have more assurance that there
    are no inadvertent side effects, but risk that the vulnerability will be exploited—or
    to do so quickly ultimately comes down to a risk assessment and a business decision.
    For example, it may be acceptable to lose some performance or increase resource
    usage to fix a severe vulnerability.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全失败中恢复通常需要修补系统以修复漏洞。直觉上，你希望这个过程尽快进行，使用经常练习并因此相当可靠的机制。然而，快速推送更改的能力是一把双刃剑：虽然这种能力可以帮助快速关闭漏洞，但也可能引入导致大量损害的错误或性能问题。如果漏洞被广泛知晓或严重，那么推送补丁的压力就会更大。是否慢慢推送修复补丁——因此更有把握确保没有意外副作用，但风险是漏洞会被利用——或者快速推送补丁，最终取决于风险评估和商业决策。例如，为了修复严重漏洞，可能可以接受一些性能损失或增加资源使用。
- en: Choices like this underscore the need for reliable recovery mechanisms that
    allow us to roll out necessary changes and updates quickly without compromising
    reliability, and that also catch potential problems before they cause a widespread
    outage. For example, a robust fleet recovery system needs to have a reliable representation
    of every machine’s current and desired state, and also needs to provide backstops
    to ensure that state is never rolled back to an obsolete or unsafe version. [Chapter 9](ch09.html#design_for_recovery)
    covers this and many other approaches, and [Chapter 18](ch18.html#oneeight_recovery_and_aftermath)
    discusses how to actually recover systems once an event has occurred.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的选择凸显了可靠的恢复机制的必要性，这些机制使我们能够快速推出必要的更改和更新，而不会影响可靠性，并且在造成大范围故障之前也能发现潜在问题。例如，一个强大的机群恢复系统需要可靠地表示每台机器的当前状态和期望状态，并且还需要提供后备措施，以确保状态永远不会回滚到过时或不安全的版本。[第9章](ch09.html#design_for_recovery)涵盖了这一点以及许多其他方法，[第18章](ch18.html#oneeight_recovery_and_aftermath)讨论了一旦发生事件后如何实际恢复系统。
- en: Conclusion
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Security and reliability have a lot in common—both are inherent properties of
    all information systems that are tempting to initially sacrifice in the name of
    velocity, but costly to fix after the fact. This book aims to help you address
    inevitable challenges related to security and reliability early on, as your systems
    evolve and grow. Alongside engineering efforts, each organization has to understand
    the roles and responsibilities (see [Chapter 20](ch20.html#twozero_understanding_roles_and_respons))
    that contribute to building a culture of security and reliability ([Chapter 21](ch21.html#twoone_building_a_culture_of_security_a))
    in order to persist sustainable practices. By sharing our experiences and lessons
    learned, we hope to enable you to avoid paying a bigger price further down the
    road by adopting some of the principles described here sufficiently early in the
    system lifecycle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和可靠性有很多共同点——它们都是所有信息系统固有的属性，一开始很容易在速度的名义下牺牲，但事后修复却代价高昂。本书旨在帮助您在系统发展和成长过程中及早解决与安全性和可靠性相关的不可避免的挑战。除了工程努力外，每个组织都必须了解有助于建立安全性和可靠性文化的角色和责任（参见[第20章](ch20.html#twozero_understanding_roles_and_respons)），以持续实践。通过分享我们的经验和教训，我们希望能够使您在系统生命周期的早期采纳本书中描述的一些原则，从而避免在未来付出更大的代价。
- en: We wrote this book with a broad audience in mind, with the goal that you will
    find it relevant regardless of the stage or scope of your project. While reading
    it, keep the risk profile of your project in mind—operating a stock exchange or
    a communication platform for dissidents has a drastically different risk profile
    than running a website for an animal sanctuary. The next chapter discusses the
    classes of adversaries and their possible motivations in detail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们撰写本书时考虑了广泛的受众，希望您会发现它与您的项目的阶段或范围无关。阅读时，请牢记您项目的风险概况——运营股票交易所或为异见者提供通信平台与运营动物庇护所网站具有截然不同的风险概况。下一章将详细讨论对手的类别及其可能的动机。
- en: ^([1](ch01.html#ch01fn2-marker)) For more information on error budgets, see
    [Chapter 3 in the SRE book](https://landing.google.com/sre/sre-book/chapters/embracing-risk/).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#ch01fn2-marker)) 更多关于错误预算的信息，请参阅[SRE书中的第3章](https://landing.google.com/sre/sre-book/chapters/embracing-risk/)。

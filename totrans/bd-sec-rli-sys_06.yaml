- en: Part II. Designing Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分。设计系统
- en: '[Part II](#designing_systems) focuses on the most cost-effective way to implement
    security and reliability requirements: as early as possible in the software development
    lifecycle, when designing systems.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](#designing_systems)着重于以尽可能早的阶段，在设计系统时实现安全性和可靠性要求的最具成本效益的方式。'
- en: Although product design should ideally incorporate security and reliability
    from the start, much of the security- and reliability-related functionality you’ll
    develop will likely be added to an existing product. [Chapter 3](ch03.html#case_study_safe_proxies)
    provides an example of how we’ve made already-operating systems at Google safer
    and less prone to outages. You can retrofit your systems with many similar enhancements,
    and they will be much more effective when paired with some of the design principles
    that follow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管产品设计理想上应该从一开始就考虑安全性和可靠性，但你将开发的许多与安全性和可靠性相关的功能可能会被添加到现有产品中。[第3章](ch03.html#case_study_safe_proxies)提供了一个例子，说明了我们是如何使谷歌已经运行的系统更安全，更不容易发生故障的。您可以为您的系统添加许多类似的增强功能，并且当配合一些后续的设计原则时，它们将更加有效。
- en: '[Chapter 4](ch04.html#design_tradeoffs) considers the natural tendency to defer
    dealing with security and reliability concerns at the expense of sustained velocity.
    We argue that functional and nonfunctional requirements don’t necessarily need
    to be at odds.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html#design_tradeoffs)考虑了将安全性和可靠性问题推迟处理以换取持续速度的自然倾向。我们认为功能和非功能要求不一定需要相互对立。'
- en: If you’re wondering where to begin integrating security and reliability principles
    into your systems, [Chapter 5](ch05.html#design_for_least_privilege)—which discusses
    how to evaluate access based upon risk—is an excellent place to start. [Chapter 6](ch06.html#design_for_understandability)
    then looks at how you can analyze and understand your systems through invariants
    and mental models. In particular, the chapter recommends using a layered system
    architecture built on standardized frameworks for identity, authorization, and
    access control.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道从哪里开始将安全性和可靠性原则融入到你的系统中，[第5章](ch05.html#design_for_least_privilege)——讨论如何根据风险评估访问的优点——是一个很好的起点。[第6章](ch06.html#design_for_understandability)然后探讨了如何通过不变量和心智模型来分析和理解你的系统。特别是，该章建议使用建立在标准化框架上的分层系统架构，用于身份、授权和访问控制。
- en: To respond to a shifting risk landscape, you need to be able to change your
    infrastructure frequently and quickly while also maintaining a highly reliable
    service. [Chapter 7](ch07.html#design_for_a_changing_landscape) presents practices
    that let you adapt to short-, medium-, and long-term changes, as well as unexpected
    complications that might arise as you run a service.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对不断变化的风险格局，您需要能够频繁快速地改变您的基础设施，同时保持高度可靠的服务。[第7章](ch07.html#design_for_a_changing_landscape)介绍了让您适应短期、中期和长期变化，以及在运行服务时可能出现的意外复杂性的做法。
- en: The guidelines mentioned thus far will have limited benefits if a system cannot
    withstand a major malfunction or disruption. [Chapter 8](ch08.html#design_for_resilience)
    discusses strategies for keeping a system running during an incident, perhaps
    in a degraded mode. [Chapter 9](ch09.html#design_for_recovery) approaches systems
    from the perspective of fixing them after breakage. Finally, [Chapter 10](ch10.html#mitigating_denial_of_service_attacks)
    presents one scenario in which reliability and security intersect, and illustrates
    some cost-effective mitigation techniques for DoS attacks at each layer of the
    service stack.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止提到的指导方针，如果系统无法经受重大故障或中断，将会有限的好处。[第8章](ch08.html#design_for_resilience)讨论了在事故期间保持系统运行的策略，也许是以降级模式。[第9章](ch09.html#design_for_recovery)从修复系统的角度来看待系统。最后，[第10章](ch10.html#mitigating_denial_of_service_attacks)介绍了一种可靠性和安全性相交的场景，并举例说明了在服务堆栈的每一层中一些成本效益的DoS攻击缓解技术。

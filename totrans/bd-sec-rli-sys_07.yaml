- en: 'Chapter 3\. Case Study: Safe Proxies'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By Jakub Warmuz and Ana Oprea
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: with Thomas Maufer, Susanne Landers, Roxana Loza, Paul Blankinship, and Betsy
    Beyer
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Safe Proxies in Production Environments
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, proxies provide a way to address new reliability and security requirements
    without requiring substantial changes to deployed systems. Rather than modifying
    an existing system, you can simply use a proxy to route connections that would
    have otherwise gone directly to the system. The proxy can also include controls
    to meet your new security and reliability requirements. In this case study, we
    examine a set of *safe proxies* we use at Google to limit the ability of privileged
    administrators to accidentally or maliciously cause issues in our production environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'Safe proxies are a framework that allows authorized persons to access or modify
    the state of physical servers, virtual machines, or particular applications. At
    Google, we use safe proxies to review, approve, and run risky commands without
    establishing an SSH connection to systems. Using these proxies, we can grant fine-grained
    access to debug issues or can rate limit machine restarts. Safe proxies represent
    a single entry point between networks and are key instruments that enable us to
    do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Audit every operation in the fleet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control access to resources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect production from human mistakes at scale
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Zero Touch Prod](https://oreil.ly/_4rAo) is a project at Google that requires
    every change in production to be made by automation (instead of humans), prevalidated
    by software, or triggered through an audited breakglass mechanism.^([1](ch03.html#ch03fn1))
    Safe proxies are among the set of tools we use to achieve these principles. We
    estimate that ~13% of all Google-evaluated outages could have been prevented or
    mitigated with Zero Touch Prod.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In the safe proxy model, displayed in [Figure 3-1](#safe_proxy), instead of
    talking to the target system directly, clients talk to the proxy. At Google, we
    enforce this behavior by restricting the target system to accept only calls from
    the proxy through a configuration. This configuration specifies which application-layer
    remote procedure calls (RPCs) can be executed by which client roles through access
    control lists (ACLs). After checking the access permissions, the proxy sends the
    request to be executed via the RPC to the target systems. Typically, each target
    system has an application-layer program that receives the request and executes
    it directly on the system. The proxy logs all requests and commands issued by
    the systems it interacts with.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve found multiple benefits to using proxies to manage systems, whether the
    client is a human, automation, or both. Proxies provide the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: A central point to enforce multi-party authorization (MPA),^([2](ch03.html#ch03fn2))
    where we make the access decisions for requests that interact with sensitive data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrative usage auditing, where we can track when a given request was performed
    and by whom
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate limiting, where changes like a system restart take effect gradually, and
    we can potentially restrict the blast radius of a mistake
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with closed-source third-party target systems, where we control
    the behavior of components (that we cannot modify) through additional functionality
    in the proxy
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous improvement integration, where we add security and reliability enhancements
    to the central proxy point
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Safe proxy model](assets/bsrs_0301.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. Safe proxy model
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Proxies also have some downsides and potential pitfalls:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Increased cost, in terms of maintenance and operational overhead.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single point of failure, if either the system itself or one of its dependencies
    is unavailable. We mitigate this situation by running multiple instances to increase
    redundancy. We make sure that all of our system’s dependencies have an acceptable
    service level agreement (SLA), and that the team operating each of the dependencies
    has a documented emergency contact.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A policy configuration for access control, which can be a source of errors itself.
    We guide users to make the right choices by providing templates or automatically
    generating settings that are secure by default. When creating such templates or
    automation, we follow the design strategies presented throughout [Part II](part02.html#designing_systems).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A central machine that an adversary could take control of. The aforementioned
    policy configuration requires the system to forward the identity of the client
    and executes any actions on behalf of the client. The proxy itself doesn’t give
    high privileges because no request is executed under a proxy role.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resistance to change, as users may wish to connect directly to production systems.
    To reduce friction imposed by the proxy, we work closely with engineers to make
    sure they can access the systems through a breakglass mechanism during emergencies.
    We discuss such topics in more detail in [Chapter 21](ch21.html#twoone_building_a_culture_of_security_a).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the main use case for the safe proxy is to add security and reliability
    capabilities related to access control, the interfaces exposed by the proxy should
    use the same external APIs as the target system. As a result, the proxy doesn’t
    affect the overall user experience. Assuming the safe proxy is transparent, it
    can simply forward traffic after performing some pre- and postprocessing for validation
    and logging. The next section discusses one specific instantiation of a safe proxy
    that we use at Google.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Google Tool Proxy
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Googlers perform the majority of administrative operations using [command-line
    interface (CLI)](https://oreil.ly/7qk8Q) tools. Some of these tools are potentially
    dangerous—for example, certain tools can turn off a server. If such a tool specifies
    an incorrect scope selector, a command-line invocation can accidentally stop several
    service frontends, resulting in an outage. It would be difficult and expensive
    to track every CLI tool, ensure that it performs centralized logging, and make
    certain that sensitive actions have further protections. To address this issue,
    Google created a *Tool Proxy*: a binary that exposes a generic RPC method that
    internally executes the specified command line through a fork and exec. All invocations
    are controlled through a policy, logged for auditing, and have the ability to
    require MPA.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Tool Proxy achieves one of the main goals of Zero Touch Prod: making
    production safer by not allowing humans to directly access production. Engineers
    are not able to run arbitrary commands directly on servers; they need to contact
    the Tool Proxy instead.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: We configure who is allowed to take which actions by using a fine-grained set
    of policies that carry out the authorization for the RPC method. The policy in
    [Example 3-1](#example_three_onedot_google_tool_proxy) allows a member of `group:admin`
    to run the latest version of the `borg` CLI with any parameter after someone from
    `group:admin-leads` approves the command. The Tool Proxy instances are [typically
    deployed as Borg jobs](https://oreil.ly/ks1HD).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-1\. Google Tool Proxy Borg policy
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The policy in [Example 3-1](#example_three_onedot_google_tool_proxy) allows
    an engineer to run a command to stop a Borg job in production from their workstation
    by using a command like the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command sends an RPC to the proxy at the specified address, which initiates
    the following chain of events, as shown in [Figure 3-2](#tool_proxy_usage_workflow):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The proxy logs all RPCs and checks performed, providing an easy way to audit
    previously run administrative actions.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The proxy checks the policy to ensure the caller is in `group:admin`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this is a sensitive command, MPA is triggered and the proxy waits for
    an authorization from a person in `group:admin-leads`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If granted approval, the proxy executes the command, waits for the result, and
    attaches the return code, stdout, and stderr to the RPC response.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Tool Proxy usage workflow](assets/bsrs_0302.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![工具代理使用工作流程](assets/bsrs_0302.png)'
- en: Figure 3-2\. Tool Proxy usage workflow
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-2. 工具代理使用工作流程
- en: 'The Tool Proxy requires a small change to the development workflow: engineers
    need to prepend their commands with `tool-proxy-cli --proxy_address`. To ensure
    privileged users don’t circumvent the proxy, we modified the server to allow only
    administrative actions to `admin-proxy` and to deny any direct connections outside
    of breakglass situations.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 工具代理需要对开发工作流程进行小的更改：工程师需要在他们的命令前加上 `tool-proxy-cli --proxy_address`。为了确保特权用户不会规避代理，我们修改了服务器，只允许对
    `admin-proxy` 进行管理操作，并在非紧急情况下拒绝任何直接连接。
- en: Conclusion
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Using safe proxies is one way to add logging and multi-party authorization to
    a system. Proxies can thus help make your systems more secure and more reliable.
    This approach can be a cost-effective option for an existing system, but will
    be much more resilient if paired with other design principles described in [Part II](part02.html#designing_systems).
    As we discuss in [Chapter 4](ch04.html#design_tradeoffs), if you’re starting a
    new project, you should ideally build your system architecture using frameworks
    that integrate with logging and access control modules.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用安全代理是向系统添加日志记录和多方授权的一种方式。代理可以帮助使您的系统更安全、更可靠。这种方法可以是现有系统的一种经济有效的选择，但如果与[第二部分](part02.html#designing_systems)中描述的其他设计原则配对使用，将会更加强大。正如我们在[第四章](ch04.html#design_tradeoffs)中讨论的那样，如果您正在启动一个新项目，最好使用与日志记录和访问控制模块集成的框架来构建系统架构。
- en: ^([1](ch03.html#ch03fn1-marker)) A breakglass mechanism is one that can bypass
    policies to allow engineers to quickly resolve outages. See [“Breakglass”](ch05.html#breakglass).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.html#ch03fn1-marker)) 紧急情况机制是一种可以绕过策略以允许工程师快速解决故障的机制。参见[“紧急情况”](ch05.html#breakglass)。
- en: ^([2](ch03.html#ch03fn2-marker)) MPA requires that an additional user approve
    an action before it is allowed to take place. See [“Multi-Party Authorization
    (MPA)”](ch05.html#multi_party_authorization_left_parenthe).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch03.html#ch03fn2-marker)) 多方授权要求在允许操作发生之前，需要额外的用户批准。参见[“多方授权（MPA）”](ch05.html#multi_party_authorization_left_parenthe)。

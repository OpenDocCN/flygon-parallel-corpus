- en: Chapter 4\. Design Tradeoffs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By Christoph Kern
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: with Brian Gustafson, Paul Blankinship, and Felix Gröbert
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: So you’re going to build a (software) product! You’ll have lots of things to
    think about in this complex journey from devising high-level plans to deploying
    code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Typically, you’ll start out with a rough idea of what the product or service
    is going to do. This might, for example, take the form of a high-level concept
    for a game, or a set of high-level business requirements for a cloud-based productivity
    application. You’ll also develop high-level plans for how the service offering
    will be funded.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'As you delve into the design process and your ideas about the shape of the
    product become more specific, additional requirements and constraints on the design
    and implementation of the application tend to emerge. There’ll be specific requirements
    for the functionality of the product, and general constraints, such as development
    and operational costs. You’ll also come upon requirements and constraints for
    security and reliability: your service will likely have certain availability and
    reliability requirements, and you might have security requirements for protecting
    sensitive user data handled by your application.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Some of these requirements and constraints may be in conflict with each other,
    and you’ll need to make tradeoffs and find the right balance between them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Design Objectives and Requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The feature requirements for your product will tend to have significantly different
    characteristics than your requirements for security and reliability. Let’s take
    a closer look at the types of requirements you’ll face when designing a product.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Feature Requirements
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Feature requirements*, also known as *functional requirements*,^([1](ch04.html#ch04fn1))
    identify the primary function of a service or application and describe how a user
    can accomplish a particular task or satisfy a particular need. They are often
    expressed in terms of *use cases*, *user stories*, or [*user journeys*](https://oreil.ly/yFvEU)—sequences
    of interactions between a user and the service or application. *Critical requirements*
    are the subset of feature requirements that are essential to the product or service.
    If a design does not satisfy a critical requirement or critical user story, you
    don’t have a viable product.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Feature requirements are typically the primary drivers for your design decisions.
    After all, you’re trying to build a system or service that satisfies a particular
    set of needs for the group of users you have in mind. You often have to make tradeoff
    decisions between the various requirements. With that in mind, it is useful to
    distinguish critical requirements from other feature requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, a number of requirements apply to the entire application or service.
    These requirements often don’t show up in user stories or individual feature requirements.
    Instead, they’re stated once in centralized requirements documentation, or even
    implicitly assumed. Here’s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'All views/pages of the application’s web UI must:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Follow common visual design guidelines
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adhere to accessibility guidelines
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a footer with links to privacy policy and ToS (Terms of Service)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonfunctional Requirements
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several categories of requirements focus on general attributes or behaviors
    of the system, rather than specific behaviors. These *nonfunctional requirements*
    are relevant to our focus—security and reliability. For example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: What are the exclusive circumstances under which someone (an external user,
    customer-support agent, or operations engineer) may have access to certain data?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the [service level objectives (SLOs)](https://oreil.ly/EJNnj) for metrics
    such as uptime or 95th-percentile and 99th-percentile response latency? How does
    the system respond under load above a certain threshold?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When balancing requirements, it can be helpful to simultaneously consider requirements
    in areas beyond the system itself, since choices in those areas can have significant
    impact on core system requirements. Those broader areas include the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Development efficiency and velocity
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Given the chosen implementation language, application frameworks, testing processes,
    and build processes, how efficiently can developers iterate on new features? How
    efficiently can developers understand and modify or debug existing code?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Deployment velocity
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: How long does it take from the time a feature is developed to the time this
    feature is available to users/customers?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Features Versus Emergent Properties
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Feature requirements usually exhibit a fairly straightforward connection between
    the requirements, the code that satisfies those requirements, and tests that validate
    the implementation. For example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Specification
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: A user story or requirement might stipulate how a signed-in user of an application
    can view and modify the personal data associated with their user profile (such
    as their name and contact information).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'A web or mobile application based on this specification would typically have
    code that very specifically relates to that requirement, such as the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Structured types to represent the profile data
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI code to present and permit modification of the profile data
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side RPC or HTTP action handlers to query the signed-in user’s profile
    data from a data store, and to accept updated information to be written to the
    data store
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Typically, there’d be an integration test that essentially walks through the
    specified user story step by step. The test might use a UI test driver to fill
    out and submit the “edit profile” form and then verify that the submitted data
    appears in the expected database record. There are likely also unit tests for
    individual steps in the user story.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, nonfunctional requirements—like reliability and security requirements—are
    often much more difficult to pin down. It would be nice if your web server had
    an `--enable_high_reliability_mode` flag, and to make your application reliable
    you’d simply need to flip that flag and pay your hosting or cloud provider a premium
    service fee. But there is no such flag, and no specific module or component in
    any application’s source code that “implements” reliability.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Google Design Document'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google uses a design document template to guide new feature design and to collect
    feedback from stakeholders before starting an engineering project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The template sections pertaining to reliability and security considerations
    remind teams to think about the implications of their project and kick off the
    production readiness or security review processes if appropriate. Design reviews
    sometimes happen multiple quarters before engineers officially start thinking
    about the launch stage.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Balancing Requirements
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the attributes of a system that satisfy security and reliability concerns
    are largely emergent properties, they tend to interact both with implementations
    of feature requirements and with each other. As a result, it’s particularly difficult
    to reason about tradeoffs involving security and reliability as a standalone topic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: This section presents an example that illustrates the kinds of tradeoffs you
    might have to consider. Some parts of this example delve quite deeply into technical
    details, which aren’t necessarily important in and of themselves. All of the compliance,
    regulatory, legal, and business considerations that go into designing payment
    processing systems and their operation aren’t important for this example either.
    Instead, the purpose is to illustrate the complex interdependencies between requirements.
    In other words, the focus isn’t on the nitty-gritty details about protecting credit
    card numbers, but rather the thought process that goes into designing a system
    with complex security and reliability requirements.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Payment Processing'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine that you’re building an online service that sells widgets to consumers.^([2](ch04.html#ch04fn2))
    The service’s specification includes a user story stipulating that a user can
    pick widgets from an online catalog by using a mobile or web application. The
    user can then purchase the chosen widgets, which requires that they provide details
    for a payment method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Security and reliability considerations
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Accepting payment information introduces significant security and reliability
    considerations for the system’s design and organizational processes. Names, addresses,
    and credit card numbers are sensitive personal data that require special safeguards^([3](ch04.html#ch04fn3))
    and can subject your system to regulatory standards, depending on the applicable
    jurisdiction. Accepting payment information may also bring the service in scope
    for compliance with industry-level or regulatory security standards such as [PCI
    DSS](https://www.pcisecuritystandards.org).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: A compromise of this sensitive user information, especially personally identifiable
    information (PII), can have serious consequences for the project and even the
    entire organization/company. You might lose the trust of your users and customers,
    and lose their business as a result. In recent years, legislatures have enacted
    laws and regulations placing potentially time-consuming and expensive obligations
    on companies affected by data breaches. Some companies have even gone entirely
    out of business because of a severe security incident, as noted in [Chapter 1](ch01.html#the_intersection_of_security_and_reliab).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: In certain scenarios, a higher-level tradeoff at the product design level might
    free the application from processing payments—for example, perhaps the product
    can be recast in an advertising-based or community-funded model. For the purposes
    of our example, we’ll stick with the premise that accepting payments is a critical
    requirement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Using a third-party service provider to handle sensitive data
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Often, the best way to mitigate security concerns about sensitive data is to
    not hold that data in the first place (for more on this topic, see [Chapter 5](ch05.html#design_for_least_privilege)).
    You may be able to arrange for sensitive data to never pass through your systems,
    or at least design the systems to not persistently store the data.^([4](ch04.html#ch04fn4))
    You can choose from various commercial payment service APIs to integrate with
    the application, and offload handling of payment information, payment transactions,
    and related concerns (such as fraud countermeasures) to the vendor.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Depending on the circumstances, using a payment service may reduce risk and
    the degree to which you need to build in-house expertise to address risks in this
    area, instead relying on the provider’s expertise:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Your systems no longer hold the sensitive data, reducing the risk that a vulnerability
    in your systems or processes could result in a data compromise. Of course, a compromise
    of the third-party vendor could still compromise your users’ data.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the specific circumstances and applicable requirements, your contractual
    and compliance obligations under payment industry security standards may be simplified.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don’t have to build and maintain infrastructure to protect the data at rest
    in your system’s data stores. This could eliminate a significant amount of development
    and ongoing operational effort.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many third-party payment providers offer countermeasures against fraudulent
    transactions and payment risk assessment services. You may be able to use these
    features to reduce your payment fraud risk, without having to build and maintain
    the underlying infrastructure yourself.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the flip side, relying on a third-party service provider introduces costs
    and risks of its own.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Costs and nontechnical risks
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Obviously, the provider will charge fees. Transaction volume will likely inform
    your choice here—beyond a certain volume, it’s probably more cost-effective to
    process transactions in-house.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to consider the engineering cost of relying on a third-party
    dependency: your team will have to learn how to use the vendor’s API, and you
    might have to track changes/releases of the API on the vendor’s schedule.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Reliability risks
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By outsourcing payment processing, you add an additional dependency to your
    application—in this case, a third-party service. Additional dependencies often
    introduce additional failure modes. In the case of third-party dependencies, these
    failure modes may be partially out of your control. For example, your user story
    “user can buy their chosen widgets” may fail if the payment provider’s service
    is down or unreachable via the network. The significance of this risk depends
    on the payment provider’s adherence to the [SLAs](https://oreil.ly/KZ03g) that
    you have with that provider.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: You might address this risk by introducing redundancy into the system (see [Chapter 8](ch08.html#design_for_resilience))—in
    this case, by adding an alternate payment provider to which your service can fail
    over. This redundancy introduces cost and complexity—the two payment providers
    most likely have different APIs, so you must design your system to be able to
    talk to both, along with all the additional engineering and operational costs,
    plus increased exposure to bugs or security compromises.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: You could also mitigate the reliability risk through fallback mechanisms on
    your side. For example, you might insert a queueing mechanism into the communication
    channel with the payment provider to buffer transaction data if the payment service
    is unreachable. Doing so would allow the “purchase flow” user story to proceed
    during a payment service outage.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: However, adding the message queueing mechanism introduces extra complexity and
    may introduce its own failure modes. If the message queue is not designed to be
    reliable (for example, it stores data in volatile memory only), you can lose transactions—a
    new risk surface. More generally, subsystems that are exercised only in rare and
    exceptional circumstances can harbor hidden bugs and reliability issues.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: You could choose to use a more reliable message queue implementation. This likely
    involves either an in-memory storage system that is distributed across multiple
    physical locations, again introducing complexity, or storage on persistent disk.
    Storing the data on disk, even if only in exceptional scenarios, reintroduces
    the concerns about storing sensitive data (risk of compromise, compliance considerations,
    etc.) that you were trying to avoid in the first place. In particular, some payment
    data is never even allowed to hit disk, which makes a retry queue that relies
    on persistent storage difficult to apply in this scenario.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: In this light, you may have to consider attacks (in particular, attacks by insiders)
    that purposely break the link with the payment provider in order to activate local
    queueing of transaction data, which may then be compromised.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: In summary, you end up encountering a security risk that arose from your attempt
    to mitigate a reliability risk, which in turn arose because you were trying to
    mitigate a security risk!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Security risks
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The design choice to rely on a third-party service also raises immediate security
    considerations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: First, you’re entrusting sensitive customer data to a third-party vendor. You’ll
    want to choose a vendor whose security stance is at least equal to your own, and
    will have to carefully evaluate vendors during selection and on an ongoing basis.
    This is not an easy task, and there are complex contractual, regulatory, and liability
    considerations that are outside the scope of this book and which should be referred
    to your counsel.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Second, integrating with the vendor’s service may require you to link a vendor-supplied
    library into your application. This introduces the risk that a vulnerability in
    that library, or one of its transitive dependencies, may result in a vulnerability
    in *your* systems. You may consider mitigating this risk by sandboxing the library^([5](ch04.html#ch04fn5))
    and by being prepared to quickly deploy updated versions of it (see [Chapter 7](ch07.html#design_for_a_changing_landscape)).
    You can largely avoid this concern by using a vendor that does not require you
    to link a proprietary library into your service (see [Chapter 6](ch06.html#design_for_understandability)).
    Proprietary libraries can be avoided if the vendor exposes its API using an open
    protocol like REST+JSON, XML, SOAP, or gRPC.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'You may need to include a JavaScript library in your web application client
    in order to integrate with the vendor. Doing so allows you to avoid passing payment
    data through your systems, even temporarily—instead, payment data can be sent
    from a user’s browser directly to the provider’s web service. However, this integration
    raises similar concerns as including a server-side library: the vendor’s library
    code runs with full privileges in the web origin of your application.^([6](ch04.html#ch04fn6))
    A vulnerability in that code or a compromise of the server that’s serving that
    library can lead to your application being compromised. You might consider mitigating
    that risk by sandboxing payment-related functionality in a separate web origin
    or sandboxed iframe. However, this tactic means that you need a secure cross-origin
    communications mechanism, again introducing complexity and additional failure
    modes. Alternatively, the payment vendor might offer an integration based on HTTP
    redirects, but this can result in a less smooth user experience.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Design choices related to nonfunctional requirements can have fairly far-reaching
    implications in areas of domain-specific technical expertise: we started out discussing
    a tradeoff related to mitigating risks associated with handling payment data,
    and ended up thinking about considerations that are deep in the realm of web platform
    security. Along the way, we also encountered contractual and regulatory concerns.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Managing Tensions and Aligning Goals
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With some up-front planning, you can often satisfy important nonfunctional requirements
    like security and reliability without having to give up features, and at reasonable
    cost. When stepping back to consider security and reliability in the context of
    the entire system and development and operations workflow, it often becomes apparent
    that these goals are very much aligned with general software quality attributes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Microservices and the Google Web Application Framework'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider the evolution of a Google-internal framework for microservices and
    web applications. The primary goal of the team creating the framework was to streamline
    the development and operation of applications and services for large organizations.
    In designing this framework, the team incorporated the key idea of applying static
    and dynamic *conformance checks* to ensure that application code adheres to various
    coding guidelines and best practices. For example, a conformance check verifies
    that all values passed between concurrent execution contexts are of immutable
    types—a practice that drastically reduces the likelihood of concurrency bugs.
    Another set of conformance checks enforces isolation constraints between components,
    which makes it much less likely that a change in one component/module of the application
    results in a bug in another component.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Because applications built on this framework have a fairly rigid and well-defined
    structure, the framework can provide out-of-the-box automation for many common
    development and deployment tasks—from scaffolding for new components, to automated
    setup of continuous integration (CI) environments, to largely automated production
    deployments. These benefits have made this framework quite popular among Google
    developers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: What does all this have to do with security and reliability? The framework development
    team collaborated with SRE and security teams throughout the design and implementation
    phases, ensuring that security and reliability best practices were woven into
    the fabric of the framework—not just bolted on at the end. The framework takes
    responsibility for handling many common security and reliability concerns. Similarly,
    it automatically sets up monitoring for operational metrics and incorporates reliability
    features like health checking and SLA compliance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: For example, the framework’s web application support handles most common types
    of web application vulnerabilities.^([7](ch04.html#ch04fn7)) Through a combination
    of API design and code conformance checks, it effectively prevents developers
    from accidentally introducing many common types of vulnerabilities in application
    code.^([8](ch04.html#ch04fn8)) With respect to these types of vulnerabilities,
    the framework goes beyond “security by default”—rather, it takes full responsibility
    for security, and actively ensures that any application based on it is not affected
    by these risks. We discuss how this is accomplished in more detail in Chapters
    [6](ch06.html#design_for_understandability) and [12](ch12.html#writing_code).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Aligning Emergent-Property Requirements
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The framework example illustrates that, contrary to common perception, security-
    and reliability-related goals are often well aligned with other product goals—especially
    code and project health and maintainability and long-term, sustained project velocity.
    In contrast, attempting to retrofit security and reliability goals as a late add-on
    often leads to increased risks and costs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Priorities for security and reliability can also align with priorities in other
    areas:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'As discussed in [Chapter 6](ch06.html#design_for_understandability), system
    design that enables people to effectively and accurately reason about invariants
    and behaviors of the system is crucial for security and reliability. Understandability
    is also a key code and project health attribute, and a key support for development
    velocity: an understandable system is easier to debug and to modify (without introducing
    bugs in the first place).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing for recovery (see [Chapter 9](ch09.html#design_for_recovery)) allows
    us to quantify and control the risk introduced by changes and rollouts. Typically,
    the design principles discussed here support a higher rate of change (i.e., deployment
    velocity) than we could achieve otherwise.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security and reliability demand that we design for a changing landscape (see
    [Chapter 7](ch07.html#design_for_a_changing_landscape)). Doing so makes our system
    design more adaptable and positions us not only to swiftly address newly emerging
    vulnerabilities and attack scenarios, but also to accommodate changing business
    requirements more quickly.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial Velocity Versus Sustained Velocity
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s a natural tendency, especially in smaller teams, to defer security and
    reliability concerns until some point in the future (“We’ll add in security and
    worry about scaling after we have some customers”). Teams commonly justify ignoring
    security and reliability as early and primary design drivers for the sake of “velocity”—they’re
    concerned that spending time thinking about and addressing these concerns will
    slow development and introduce unacceptable delays into their first release cycle.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to make a distinction between *initial velocity* and *sustained
    velocity.* Choosing to not account for critical requirements like security, reliability,
    and maintainability early in the project cycle may indeed increase your project’s
    velocity early in the project’s lifetime. However, experience shows that doing
    so also usually *slows you down significantly* later.^([10](ch04.html#ch04fn10))
    The late-stage cost of retrofitting a design to accommodate requirements that
    manifest as emergent properties can be *very* substantial. Furthermore, making
    invasive late-stage changes to address security and reliability risks can in itself
    introduce even more security and reliability risks. Therefore, it’s important
    to embed security and reliability in your team culture early on (for more on this
    topic, see [Chapter 21](ch21.html#twoone_building_a_culture_of_security_a)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要区分初始速度和持续速度。选择不考虑安全、可靠性和可维护性等关键要求可能确实会增加项目在项目生命周期早期的速度。然而，经验表明，这样做通常也会在项目后期显著减速。在项目周期后期进行大规模修改以满足作为新兴属性出现的要求的成本可能非常高。此外，为了解决安全和可靠性风险而进行侵入性的后期更改本身可能会引入更多的安全和可靠性风险。因此，早期将安全和可靠性融入团队文化非常重要。
- en: The early history of the internet,^([11](ch04.html#ch04fn11)) and the design
    and evolution of the underlying protocols such as IP, TCP, DNS, and BGP, offers
    an interesting perspective on this topic. Reliability—in particular, survivability
    of the network even in the face of outages of nodes^([12](ch04.html#ch04fn12))
    and reliability of communications despite failure-prone links^([13](ch04.html#ch04fn13))—were
    explicit and high-priority design goals of the early precursors of today’s internet,
    such as ARPANET.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的早期历史和IP、TCP、DNS和BGP等基础协议的设计和演变，为这个话题提供了有趣的视角。可靠性——特别是在节点故障的情况下网络的生存能力以及在容易出现故障的链路上通信的可靠性——是早期互联网的早期前身，如ARPANET的明确和高优先级的设计目标。
- en: Security, however, is not mentioned much in early internet papers and documentation.
    Early networks were essentially closed, with nodes operated by trusted research
    and government institutions. But in today’s open internet, this assumption does
    not hold at all—many types of malicious actors are participating in the network
    (see [Chapter 2](ch02.html#understanding_adversaries)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在早期的互联网论文和文档中并没有多少提到安全。早期的网络基本上是封闭的，由受信任的研究和政府机构操作节点。但在今天的开放互联网中，这种假设根本不成立——许多类型的恶意行为者参与了网络。
- en: The internet’s foundational protocols—IP, UDP, and TCP—have no provision to
    authenticate the originator of transmissions, nor to detect intentional, malicious
    modification of data by an intermediate node in the network. Many higher-level
    protocols, such as HTTP or DNS, are inherently vulnerable to various attacks by
    malicious participants in the network. Over time, secure protocols or protocol
    extensions have been developed to defend against such attacks. For example, HTTPS
    augments HTTP by transferring data over an authenticated, secure channel. At the
    IP layer, [IPsec](https://oreil.ly/Bie7A) cryptographically authenticates network-level
    peers and provides data integrity and confidentiality. IPsec can be used to establish
    VPNs over untrusted IP networks.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的基础协议——IP、UDP和TCP——没有规定对传输发起者进行身份验证，也没有检测网络中间节点对数据的故意恶意修改。许多更高级的协议，如HTTP或DNS，天生就容易受到网络中恶意参与者的各种攻击。随着时间的推移，已经开发了安全协议或协议扩展来抵御此类攻击。例如，HTTPS通过在经过身份验证的安全通道上传输数据来增强HTTP。在IP层，IPsec通过加密对网络级对等体进行身份验证，并提供数据完整性和保密性。IPsec可用于在不受信任的IP网络上建立VPN。
- en: However, widely deploying these secure protocols has proven to be rather difficult.
    We’re now approximately 50 years into the internet’s history, and significant
    commercial usage of the internet began perhaps 25 or 30 years ago—yet there is
    still a substantial fraction of web traffic that does not use HTTPS.^([14](ch04.html#ch04fn14))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，广泛部署这些安全协议已被证明相当困难。我们现在大约已经进入互联网历史的第50年，互联网的重要商业用途可能始于25或30年前，但仍有相当大比例的网络流量不使用HTTPS。
- en: For another example of the tradeoff between initial and sustained velocity (in
    this case from outside the security and reliability realm), consider [Agile development
    processes](https://oreil.ly/upg-w). A primary goal of Agile development workflows
    is to increase development and deployment velocity—in particular, to reduce the
    latency between feature specification and deployment. However, Agile workflows
    typically rely on reasonably mature unit and integration testing practices and
    a solid continuous integration infrastructure, which require an up-front investment
    to establish, in exchange for long-term benefits to velocity and stability.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关于初始和持续速度之间权衡的例子（在这种情况下来自安全和可靠性领域之外），请考虑敏捷开发流程。敏捷开发工作流的主要目标是增加开发和部署速度，特别是减少功能规范和部署之间的延迟。然而，敏捷工作流通常依赖于相当成熟的单元和集成测试实践以及稳固的持续集成基础设施，这需要前期投资来建立，以换取长期的速度和稳定性。
- en: More generally, you can choose to prioritize initial project velocity above
    all else—you can develop the first iteration of your web app without tests, and
    with a release process that amounts to copying tarballs to production hosts. You’ll
    probably get your first demo out relatively quickly, but by your third release,
    your project will quite possibly be behind schedule and saddled with technical
    debt.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，您可以选择将初始项目速度置于一切之上——您可以开发Web应用的第一个迭代而不进行测试，并且发布过程相当于将tarballs复制到生产主机。您可能会相对快速地完成第一个演示，但到第三个发布时，您的项目很可能会拖后腿，并且负担着技术债务。
- en: 'We’ve already touched on alignment between reliability and velocity: investing
    in a mature continuous integration/continuous deployment (CI/CD) workflow and
    infrastructure supports frequent production releases with a managed and acceptable
    reliability risk (see [Chapter 7](ch07.html#design_for_a_changing_landscape)).
    But setting up such a workflow requires some up-front investment—for example,
    you will need the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Unit and integration test coverage robust enough to ensure an acceptably low
    risk of defects for production releases, without requiring major human release
    qualification work
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CI/CD pipeline that is itself reliable
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A frequently exercised, reliable infrastructure for staggered production rollouts
    and rollbacks
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A software architecture that permits [decoupled rollouts](https://oreil.ly/8E04K)
    of code and configurations (e.g., “feature flags”)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This investment is typically modest when made early in a product’s lifecycle,
    and it requires only incremental effort by developers to maintain good test coverage
    and “green builds” on an ongoing basis. In contrast, a development workflow with
    poor test automation, reliance on manual steps in deployment, and long release
    cycles tends to eventually bog down a project as it grows in complexity. At that
    point, retrofitting test and release automation tends to require a lot of work
    all at once and might slow down your project even more. Furthermore, tests retrofitted
    to a mature system can sometimes fall into the trap of exercising the current
    buggy behavior more than the correct, intended behavior.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: These investments are beneficial for projects of all sizes. However, larger
    organizations can enjoy even more benefits of scale, as you can amortize the cost
    across many projects—an individual project’s investment then boils down to a commitment
    to use centrally maintained frameworks and workflows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to making security-focused design choices that contribute to sustained
    velocity, we recommend choosing a framework and workflow that provide secure-by-construction
    defense against relevant classes of vulnerabilities. This choice can drastically
    reduce, or even eliminate, the risk of introducing such vulnerabilities during
    ongoing development and maintenance of your application’s codebase (see Chapters
    [6](ch06.html#design_for_understandability) and [12](ch12.html#writing_code)).
    This commitment generally doesn’t involve significant up-front investment—rather,
    it entails an incremental and typically modest ongoing effort to adhere to the
    framework’s constraints. In return, you drastically reduce your risk of unplanned
    system outages or security response fire drills throwing deployment schedules
    into disarray. Additionally, your release-time security and production readiness
    reviews are much more likely to go smoothly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s not easy to design and build secure and reliable systems, especially since
    security and reliability are primarily emergent properties of the entire development
    and operations workflow. This undertaking involves thinking about a lot of rather
    complex topics, many of which at first don’t seem all that related to addressing
    the primary feature requirements of your service.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Your design process will involve numerous tradeoffs between security, reliability,
    and feature requirements. In many cases, these tradeoffs will at first appear
    to be in direct conflict. It might seem tempting to avoid these issues in the
    early stages of a project and “deal with them later”—but doing so often comes
    at significant cost and risk to your project: once your service is live, reliability
    and security are not optional. If your service is down, you may lose business;
    and if your service is compromised, responding will require all hands on deck.
    But with good planning and careful design, it is often possible to satisfy all
    three of these aspects. What’s more, you can do so with modest additional up-front
    cost, and often with a reduced total engineering effort over the lifetime of the
    system.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch04.html#ch04fn1-marker)) For a more formal treatment, see [The MITRE
    Systems Engineering Guide](https://oreil.ly/ful41) and [ISO/IEC/IEEE 29148-2018(E)](https://oreil.ly/GD6cY).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch04.html#ch04fn2-marker)) For the purposes of the example, it’s not relevant
    what exactly is being sold—a media outlet might require payments for articles,
    a mobility company might require payments for transportation, an online marketplace
    might enable the purchase of physical goods that are shipped to consumers, or
    a food-ordering service might facilitate the delivery of takeout orders from local
    restaurants.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch04.html#ch04fn3-marker)) See, for example, McCallister, Erika, Tim Grance,
    and Karen Scarfone. 2010\. NIST Special Publication 800-122, “Guide to Protecting
    the Confidentiality of Personally Identifiable Information (PII).” [*https://oreil.ly/T9G4D*](https://oreil.ly/T9G4D).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch04.html#ch04fn4-marker)) Note that whether or not this is appropriate
    may depend on regulatory frameworks your organization is subject to; these regulatory
    matters are outside the scope of this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch04.html#ch04fn5-marker)) See, e.g., the [Sandboxed API](https://oreil.ly/fx86y)
    project.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '^([6](ch04.html#ch04fn6-marker)) For more on this subject, see Zalewski, Michał.
    2011\. *The Tangled Web: A Guide to Securing Modern Web Applications*. San Francisco,
    CA: No Starch Press.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: ^([7](ch04.html#ch04fn7-marker)) See, e.g., the [OWASP Top 10](https://oreil.ly/O0kva)
    and [CWE/SANS TOP 25 Most Dangerous Software Errors](https://oreil.ly/Fm6IJ).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '^([8](ch04.html#ch04fn8-marker)) See Kern, Christoph. 2014\. “Securing the
    Tangled Web.” *Communications of the ACM* 57(9): 38–47\. doi:10.1145/2643134.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '^([9](ch04.html#ch04fn9-marker)) At Google, software is typically built from
    the HEAD of a common repository, which causes all dependencies to be updated automatically
    with every build. See Potvin, Rachel, and Josh Levenberg. 2016\. “Why Google Stores
    Billions of Lines of Code in a Single Repository.” *Communications of the ACM*
    59(7): 78–87\. [*https://oreil.ly/jXTZM*](https://oreil.ly/jXTZM).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '^([10](ch04.html#ch04fn10-marker)) See the discussion of tactical programming
    versus strategic programming in Ousterhout, John. 2018\. *A Philosophy of Software
    Design*. Palo Alto, CA: Yaknyam Press. [Martin Fowler](https://oreil.ly/Lc2eY)
    makes similar observations.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '^([11](ch04.html#ch04fn11-marker)) See [RFC 2235](https://oreil.ly/UIlV6) and
    Leiner, Barry M. et al. 2009\. “A Brief History of the Internet.” *ACM SIGCOMM
    Computer Communication Review* 39(5): 22–31\. doi:10.1145/1629607.1629613.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '^([12](ch04.html#ch04fn12-marker)) Baran, Paul. 1964\. “On Distributed Communications
    Networks.” *IEEE Transactions on Communications Systems* 12(1): 1–9\. doi:10.1109/TCOM.1964.1088883.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '^([13](ch04.html#ch04fn13-marker)) Roberts, Lawrence G., and Barry D. Wessler.
    1970\. “Computer Network Development to Achieve Resource Sharing.” *Proceedings
    of the 1970 Spring Joint Computing Conference*: 543–549\. doi:10.1145/1476936.1477020.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '^([14](ch04.html#ch04fn14-marker)) Felt, Adrienne Porter, Richard Barnes, April
    King, Chris Palmer, Chris Bentzel, and Parisa Tabriz. 2017\. “Measuring HTTPS
    Adoption on the Web.” *Proceedings of the 26th USENIX Conference on Security Symposium*:
    1323–1338\. [*https://oreil.ly/G1A9q*](https://oreil.ly/G1A9q).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL

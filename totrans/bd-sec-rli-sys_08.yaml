- en: Chapter 4\. Design Tradeoffs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。设计权衡
- en: By Christoph Kern
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由Christoph Kern
- en: with Brian Gustafson, Paul Blankinship, and Felix Gröbert
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与Brian Gustafson，Paul Blankinship和Felix Gröbert合作
- en: So you’re going to build a (software) product! You’ll have lots of things to
    think about in this complex journey from devising high-level plans to deploying
    code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你要构建一个（软件）产品！在这个复杂的旅程中，你会有很多事情要考虑，从制定高层计划到部署代码。
- en: Typically, you’ll start out with a rough idea of what the product or service
    is going to do. This might, for example, take the form of a high-level concept
    for a game, or a set of high-level business requirements for a cloud-based productivity
    application. You’ll also develop high-level plans for how the service offering
    will be funded.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会对产品或服务要做什么有一个大致的想法。例如，这可能是一个游戏的高层概念，或者是基于云的生产力应用的高层业务需求。你还会制定关于服务提供方式的高层计划。
- en: 'As you delve into the design process and your ideas about the shape of the
    product become more specific, additional requirements and constraints on the design
    and implementation of the application tend to emerge. There’ll be specific requirements
    for the functionality of the product, and general constraints, such as development
    and operational costs. You’ll also come upon requirements and constraints for
    security and reliability: your service will likely have certain availability and
    reliability requirements, and you might have security requirements for protecting
    sensitive user data handled by your application.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你深入设计过程，对产品形状的想法变得更加具体时，对应用程序的设计和实施会出现额外的需求和约束。产品的功能性将有特定的需求，还有一般的约束，比如开发和运营成本。你还会遇到安全性和可靠性的需求和约束：你的服务可能会有一定的可用性和可靠性需求，你可能会有保护应用程序处理的敏感用户数据的安全性需求。
- en: Some of these requirements and constraints may be in conflict with each other,
    and you’ll need to make tradeoffs and find the right balance between them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些需求和约束可能会相互冲突，你需要做出权衡，并找到它们之间的平衡。
- en: Design Objectives and Requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计目标和需求
- en: The feature requirements for your product will tend to have significantly different
    characteristics than your requirements for security and reliability. Let’s take
    a closer look at the types of requirements you’ll face when designing a product.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 产品的功能需求往往具有与安全性和可靠性需求显着不同的特征。让我们更仔细地看看在设计产品时你将面临的需求类型。
- en: Feature Requirements
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能需求
- en: '*Feature requirements*, also known as *functional requirements*,^([1](ch04.html#ch04fn1))
    identify the primary function of a service or application and describe how a user
    can accomplish a particular task or satisfy a particular need. They are often
    expressed in terms of *use cases*, *user stories*, or [*user journeys*](https://oreil.ly/yFvEU)—sequences
    of interactions between a user and the service or application. *Critical requirements*
    are the subset of feature requirements that are essential to the product or service.
    If a design does not satisfy a critical requirement or critical user story, you
    don’t have a viable product.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*功能需求*，也称为*功能性需求*，^([1](ch04.html#ch04fn1))标识了服务或应用程序的主要功能，并描述了用户如何完成特定任务或满足特定需求。它们通常以*用例*、*用户故事*或[*用户旅程*](https://oreil.ly/yFvEU)的形式表达——用户与服务或应用程序之间的交互序列。*关键需求*是功能需求的子集，对产品或服务至关重要。如果设计不满足关键需求或关键用户故事，那么你就没有一个可行的产品。'
- en: Feature requirements are typically the primary drivers for your design decisions.
    After all, you’re trying to build a system or service that satisfies a particular
    set of needs for the group of users you have in mind. You often have to make tradeoff
    decisions between the various requirements. With that in mind, it is useful to
    distinguish critical requirements from other feature requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 功能需求通常是你设计决策的主要驱动因素。毕竟，你正在尝试构建一个满足特定一组用户需求的系统或服务。你经常需要在各种需求之间做出权衡决策。考虑到这一点，区分关键需求和其他功能需求是有用的。
- en: 'Usually, a number of requirements apply to the entire application or service.
    These requirements often don’t show up in user stories or individual feature requirements.
    Instead, they’re stated once in centralized requirements documentation, or even
    implicitly assumed. Here’s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，许多需求适用于整个应用程序或服务。这些需求通常不会出现在用户故事或个别功能需求中。相反，它们在集中的需求文档中一次性陈述，甚至是隐含地假定。这里有一个例子：
- en: 'All views/pages of the application’s web UI must:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的Web UI的所有视图/页面必须：
- en: Follow common visual design guidelines
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循常见的视觉设计指南
- en: Adhere to accessibility guidelines
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵守无障碍指南
- en: Have a footer with links to privacy policy and ToS (Terms of Service)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页脚上加上链接，链接到隐私政策和服务条款（Terms of Service）
- en: Nonfunctional Requirements
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非功能性需求
- en: 'Several categories of requirements focus on general attributes or behaviors
    of the system, rather than specific behaviors. These *nonfunctional requirements*
    are relevant to our focus—security and reliability. For example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 几类需求关注的是系统的一般属性或行为，而不是特定的行为。这些*非功能性需求*与我们的关注——安全性和可靠性相关。例如：
- en: What are the exclusive circumstances under which someone (an external user,
    customer-support agent, or operations engineer) may have access to certain data?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在哪些独特的情况下，某人（外部用户、客户支持代理或运维工程师）可以访问某些数据？
- en: What are the [service level objectives (SLOs)](https://oreil.ly/EJNnj) for metrics
    such as uptime or 95th-percentile and 99th-percentile response latency? How does
    the system respond under load above a certain threshold?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于诸如正常运行时间或95th百分位和99th百分位响应延迟等指标的[服务水平目标（SLOs）](https://oreil.ly/EJNnj)是什么？系统在超过某个阈值的负载下如何响应？
- en: 'When balancing requirements, it can be helpful to simultaneously consider requirements
    in areas beyond the system itself, since choices in those areas can have significant
    impact on core system requirements. Those broader areas include the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Development efficiency and velocity
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Given the chosen implementation language, application frameworks, testing processes,
    and build processes, how efficiently can developers iterate on new features? How
    efficiently can developers understand and modify or debug existing code?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Deployment velocity
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: How long does it take from the time a feature is developed to the time this
    feature is available to users/customers?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Features Versus Emergent Properties
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Feature requirements usually exhibit a fairly straightforward connection between
    the requirements, the code that satisfies those requirements, and tests that validate
    the implementation. For example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Specification
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: A user story or requirement might stipulate how a signed-in user of an application
    can view and modify the personal data associated with their user profile (such
    as their name and contact information).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'A web or mobile application based on this specification would typically have
    code that very specifically relates to that requirement, such as the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Structured types to represent the profile data
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI code to present and permit modification of the profile data
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side RPC or HTTP action handlers to query the signed-in user’s profile
    data from a data store, and to accept updated information to be written to the
    data store
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Typically, there’d be an integration test that essentially walks through the
    specified user story step by step. The test might use a UI test driver to fill
    out and submit the “edit profile” form and then verify that the submitted data
    appears in the expected database record. There are likely also unit tests for
    individual steps in the user story.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, nonfunctional requirements—like reliability and security requirements—are
    often much more difficult to pin down. It would be nice if your web server had
    an `--enable_high_reliability_mode` flag, and to make your application reliable
    you’d simply need to flip that flag and pay your hosting or cloud provider a premium
    service fee. But there is no such flag, and no specific module or component in
    any application’s source code that “implements” reliability.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Google Design Document'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google uses a design document template to guide new feature design and to collect
    feedback from stakeholders before starting an engineering project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The template sections pertaining to reliability and security considerations
    remind teams to think about the implications of their project and kick off the
    production readiness or security review processes if appropriate. Design reviews
    sometimes happen multiple quarters before engineers officially start thinking
    about the launch stage.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Balancing Requirements
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the attributes of a system that satisfy security and reliability concerns
    are largely emergent properties, they tend to interact both with implementations
    of feature requirements and with each other. As a result, it’s particularly difficult
    to reason about tradeoffs involving security and reliability as a standalone topic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: This section presents an example that illustrates the kinds of tradeoffs you
    might have to consider. Some parts of this example delve quite deeply into technical
    details, which aren’t necessarily important in and of themselves. All of the compliance,
    regulatory, legal, and business considerations that go into designing payment
    processing systems and their operation aren’t important for this example either.
    Instead, the purpose is to illustrate the complex interdependencies between requirements.
    In other words, the focus isn’t on the nitty-gritty details about protecting credit
    card numbers, but rather the thought process that goes into designing a system
    with complex security and reliability requirements.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Payment Processing'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：支付处理
- en: Imagine that you’re building an online service that sells widgets to consumers.^([2](ch04.html#ch04fn2))
    The service’s specification includes a user story stipulating that a user can
    pick widgets from an online catalog by using a mobile or web application. The
    user can then purchase the chosen widgets, which requires that they provide details
    for a payment method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在构建一个在线服务，向消费者销售小部件。该服务的规范包括一个用户故事，规定用户可以通过使用移动或网络应用程序从在线目录中选择小部件。然后用户可以购买所选的小部件，这需要他们提供付款方式的详细信息。
- en: Security and reliability considerations
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性和可靠性考虑
- en: Accepting payment information introduces significant security and reliability
    considerations for the system’s design and organizational processes. Names, addresses,
    and credit card numbers are sensitive personal data that require special safeguards^([3](ch04.html#ch04fn3))
    and can subject your system to regulatory standards, depending on the applicable
    jurisdiction. Accepting payment information may also bring the service in scope
    for compliance with industry-level or regulatory security standards such as [PCI
    DSS](https://www.pcisecuritystandards.org).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接受付款信息会为系统的设计和组织流程引入重大的安全性和可靠性考虑。姓名、地址和信用卡号码是需要特殊保护的敏感个人数据，并且根据适用的司法管辖区，可能会使您的系统受到监管标准的约束。接受付款信息还可能使服务受到符合行业或监管安全标准（如PCI
    DSS）的合规范围。
- en: A compromise of this sensitive user information, especially personally identifiable
    information (PII), can have serious consequences for the project and even the
    entire organization/company. You might lose the trust of your users and customers,
    and lose their business as a result. In recent years, legislatures have enacted
    laws and regulations placing potentially time-consuming and expensive obligations
    on companies affected by data breaches. Some companies have even gone entirely
    out of business because of a severe security incident, as noted in [Chapter 1](ch01.html#the_intersection_of_security_and_reliab).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些敏感用户信息的妥协，尤其是个人可识别信息（PII），可能会对项目甚至整个组织/公司产生严重后果。您可能会失去用户和客户的信任，并因此失去他们的业务。近年来，立法机构已颁布了法律和法规，对受数据泄露影响的公司施加了可能耗时和昂贵的义务。一些公司甚至因严重的安全事件而完全倒闭，如第1章所述。
- en: In certain scenarios, a higher-level tradeoff at the product design level might
    free the application from processing payments—for example, perhaps the product
    can be recast in an advertising-based or community-funded model. For the purposes
    of our example, we’ll stick with the premise that accepting payments is a critical
    requirement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，产品设计层面的更高级别权衡可能会使应用程序摆脱处理支付的需求，例如，也许产品可以以基于广告或社区资助的模式重塑。对于我们的例子，我们将坚持接受付款是一个关键要求的前提。
- en: Using a third-party service provider to handle sensitive data
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用第三方服务提供商处理敏感数据
- en: Often, the best way to mitigate security concerns about sensitive data is to
    not hold that data in the first place (for more on this topic, see [Chapter 5](ch05.html#design_for_least_privilege)).
    You may be able to arrange for sensitive data to never pass through your systems,
    or at least design the systems to not persistently store the data.^([4](ch04.html#ch04fn4))
    You can choose from various commercial payment service APIs to integrate with
    the application, and offload handling of payment information, payment transactions,
    and related concerns (such as fraud countermeasures) to the vendor.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，减轻对敏感数据的安全担忧的最佳方法是根本不保存这些数据（有关此主题的更多信息，请参见第5章）。您可以安排敏感数据永远不会通过您的系统，或者至少设计系统不会持久存储数据。您可以选择各种商业支付服务API与应用程序集成，并将支付信息、支付交易和相关问题（如欺诈对策）的处理外包给供应商。
- en: Benefits
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 好处
- en: 'Depending on the circumstances, using a payment service may reduce risk and
    the degree to which you need to build in-house expertise to address risks in this
    area, instead relying on the provider’s expertise:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 根据情况，使用支付服务可能会降低风险，并减少您需要在这一领域建立内部专业知识的程度，而是依赖供应商的专业知识：
- en: Your systems no longer hold the sensitive data, reducing the risk that a vulnerability
    in your systems or processes could result in a data compromise. Of course, a compromise
    of the third-party vendor could still compromise your users’ data.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的系统不再保存敏感数据，减少了系统或流程中的漏洞可能导致数据泄露的风险。当然，第三方供应商的妥协仍可能危及您的用户数据。
- en: Depending on the specific circumstances and applicable requirements, your contractual
    and compliance obligations under payment industry security standards may be simplified.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据具体情况和适用要求，您在支付行业安全标准下的合同和合规义务可能会简化。
- en: You don’t have to build and maintain infrastructure to protect the data at rest
    in your system’s data stores. This could eliminate a significant amount of development
    and ongoing operational effort.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您无需构建和维护基础设施来保护系统数据存储中的数据。这可能消除了大量的开发和持续运营工作。
- en: Many third-party payment providers offer countermeasures against fraudulent
    transactions and payment risk assessment services. You may be able to use these
    features to reduce your payment fraud risk, without having to build and maintain
    the underlying infrastructure yourself.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多第三方支付提供商提供对抗欺诈交易和支付风险评估服务。您可以使用这些功能来减少支付欺诈风险，而无需自行构建和维护基础设施。
- en: On the flip side, relying on a third-party service provider introduces costs
    and risks of its own.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，依赖第三方服务提供商会带来自己的成本和风险。
- en: Costs and nontechnical risks
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 成本和非技术风险
- en: Obviously, the provider will charge fees. Transaction volume will likely inform
    your choice here—beyond a certain volume, it’s probably more cost-effective to
    process transactions in-house.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，供应商将收取费用。交易量可能会影响你的选择 - 超过一定量后，可能更划算在内部处理交易。
- en: 'You also need to consider the engineering cost of relying on a third-party
    dependency: your team will have to learn how to use the vendor’s API, and you
    might have to track changes/releases of the API on the vendor’s schedule.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要考虑依赖第三方的工程成本：你的团队将不得不学习如何使用供应商的API，并且你可能需要按照供应商的时间表跟踪API的更改/发布。
- en: Reliability risks
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可靠性风险
- en: By outsourcing payment processing, you add an additional dependency to your
    application—in this case, a third-party service. Additional dependencies often
    introduce additional failure modes. In the case of third-party dependencies, these
    failure modes may be partially out of your control. For example, your user story
    “user can buy their chosen widgets” may fail if the payment provider’s service
    is down or unreachable via the network. The significance of this risk depends
    on the payment provider’s adherence to the [SLAs](https://oreil.ly/KZ03g) that
    you have with that provider.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过外包支付处理，你为你的应用程序增加了一个额外的依赖关系 - 在这种情况下，是第三方服务。额外的依赖通常会引入额外的故障模式。在第三方依赖的情况下，这些故障模式可能部分地超出你的控制。例如，如果支付提供商的服务停机或通过网络无法访问，你的用户故事“用户可以购买他们选择的小部件”可能会失败。这种风险的重要性取决于你与该提供商的[SLAs](https://oreil.ly/KZ03g)的遵守程度。
- en: You might address this risk by introducing redundancy into the system (see [Chapter 8](ch08.html#design_for_resilience))—in
    this case, by adding an alternate payment provider to which your service can fail
    over. This redundancy introduces cost and complexity—the two payment providers
    most likely have different APIs, so you must design your system to be able to
    talk to both, along with all the additional engineering and operational costs,
    plus increased exposure to bugs or security compromises.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在系统中引入冗余来解决这个风险（参见[第8章](ch08.html#design_for_resilience)） - 在这种情况下，通过添加备用支付提供商，你的服务可以切换到备用支付提供商。这种冗余引入了成本和复杂性
    - 两个支付提供商很可能有不同的API，因此你必须设计你的系统能够与两者通信，以及所有额外的工程和运营成本，以及增加对错误或安全妥协的暴露。
- en: You could also mitigate the reliability risk through fallback mechanisms on
    your side. For example, you might insert a queueing mechanism into the communication
    channel with the payment provider to buffer transaction data if the payment service
    is unreachable. Doing so would allow the “purchase flow” user story to proceed
    during a payment service outage.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过你自己的后备机制来减轻可靠性风险。例如，如果支付服务不可达，你可以在通信渠道与支付提供商中插入一个队列机制来缓冲交易数据。这样做将允许“购买流程”用户故事在支付服务中断期间继续进行。
- en: However, adding the message queueing mechanism introduces extra complexity and
    may introduce its own failure modes. If the message queue is not designed to be
    reliable (for example, it stores data in volatile memory only), you can lose transactions—a
    new risk surface. More generally, subsystems that are exercised only in rare and
    exceptional circumstances can harbor hidden bugs and reliability issues.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，添加消息队列机制会引入额外的复杂性，并可能引入自己的故障模式。如果消息队列没有设计成可靠的（例如，它只在易失性内存中存储数据），你可能会丢失交易
    - 这是一个新的风险。更一般地说，只在罕见和特殊情况下使用的子系统可能隐藏着隐藏的错误和可靠性问题。
- en: You could choose to use a more reliable message queue implementation. This likely
    involves either an in-memory storage system that is distributed across multiple
    physical locations, again introducing complexity, or storage on persistent disk.
    Storing the data on disk, even if only in exceptional scenarios, reintroduces
    the concerns about storing sensitive data (risk of compromise, compliance considerations,
    etc.) that you were trying to avoid in the first place. In particular, some payment
    data is never even allowed to hit disk, which makes a retry queue that relies
    on persistent storage difficult to apply in this scenario.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择使用更可靠的消息队列实现。这可能涉及分布在多个物理位置的内存存储系统，再次引入复杂性，或者存储在持久性磁盘上。即使只在特殊情况下将数据存储在磁盘上，也会重新引入关于存储敏感数据（妥协风险、合规考虑等）的担忧，这正是你一开始想要避免的。特别是，一些支付数据甚至不允许命中磁盘，这使得依赖持久存储的重试队列难以应用在这种情况下。
- en: In this light, you may have to consider attacks (in particular, attacks by insiders)
    that purposely break the link with the payment provider in order to activate local
    queueing of transaction data, which may then be compromised.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可能需要考虑攻击（特别是内部人员的攻击），他们有意打破与支付提供商的联系，以激活交易数据的本地排队，然后可能被 compromise。
- en: In summary, you end up encountering a security risk that arose from your attempt
    to mitigate a reliability risk, which in turn arose because you were trying to
    mitigate a security risk!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，你最终会遇到一个安全风险，这是由于你试图减轻可靠性风险而产生的，而这又是因为你试图减轻安全风险！
- en: Security risks
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安全风险
- en: The design choice to rely on a third-party service also raises immediate security
    considerations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖第三方服务的设计选择也立即引起了安全考虑。
- en: First, you’re entrusting sensitive customer data to a third-party vendor. You’ll
    want to choose a vendor whose security stance is at least equal to your own, and
    will have to carefully evaluate vendors during selection and on an ongoing basis.
    This is not an easy task, and there are complex contractual, regulatory, and liability
    considerations that are outside the scope of this book and which should be referred
    to your counsel.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你正在把敏感的客户数据交给第三方供应商。你需要选择一个安全立场至少与你自己相等的供应商，并且必须在选择和持续评估供应商时进行仔细评估。这不是一项容易的任务，还有复杂的合同、监管和责任考虑因素，这些都超出了本书的范围，应该咨询你的法律顾问。
- en: Second, integrating with the vendor’s service may require you to link a vendor-supplied
    library into your application. This introduces the risk that a vulnerability in
    that library, or one of its transitive dependencies, may result in a vulnerability
    in *your* systems. You may consider mitigating this risk by sandboxing the library^([5](ch04.html#ch04fn5))
    and by being prepared to quickly deploy updated versions of it (see [Chapter 7](ch07.html#design_for_a_changing_landscape)).
    You can largely avoid this concern by using a vendor that does not require you
    to link a proprietary library into your service (see [Chapter 6](ch06.html#design_for_understandability)).
    Proprietary libraries can be avoided if the vendor exposes its API using an open
    protocol like REST+JSON, XML, SOAP, or gRPC.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，与供应商服务集成可能需要您将供应商提供的库链接到您的应用程序中。这会带来一个风险，即该库中的漏洞，或者其传递依赖关系中的一个漏洞，可能导致*您*系统中的漏洞。您可以考虑通过对该库进行沙盒化^([5](ch04.html#ch04fn5))并准备快速部署更新版本来减轻这种风险（参见[第7章](ch07.html#design_for_a_changing_landscape)）。您可以通过使用不需要您将专有库链接到您的服务中的供应商（参见[第6章](ch06.html#design_for_understandability)）来基本避免这种担忧。如果供应商使用像REST+JSON、XML、SOAP或gRPC这样的开放协议来公开其API，那么可以避免使用专有库。
- en: 'You may need to include a JavaScript library in your web application client
    in order to integrate with the vendor. Doing so allows you to avoid passing payment
    data through your systems, even temporarily—instead, payment data can be sent
    from a user’s browser directly to the provider’s web service. However, this integration
    raises similar concerns as including a server-side library: the vendor’s library
    code runs with full privileges in the web origin of your application.^([6](ch04.html#ch04fn6))
    A vulnerability in that code or a compromise of the server that’s serving that
    library can lead to your application being compromised. You might consider mitigating
    that risk by sandboxing payment-related functionality in a separate web origin
    or sandboxed iframe. However, this tactic means that you need a secure cross-origin
    communications mechanism, again introducing complexity and additional failure
    modes. Alternatively, the payment vendor might offer an integration based on HTTP
    redirects, but this can result in a less smooth user experience.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要在您的Web应用程序客户端中包含一个JavaScript库，以便与供应商集成。这样做可以避免通过您的系统传递付款数据，即使是暂时的——相反，付款数据可以直接从用户的浏览器发送到提供商的Web服务。然而，这种集成引发了与包含服务器端库类似的担忧：供应商的库代码在您应用程序的Web来源中以完全权限运行。^([6](ch04.html#ch04fn6))该代码的漏洞或者提供该库的服务器的妥协可能导致您的应用程序受到威胁。您可以考虑通过在单独的Web来源或沙箱iframe中对与付款相关的功能进行沙盒化来减轻这种风险。然而，这种策略意味着您需要一个安全的跨来源通信机制，这再次引入了复杂性和额外的故障模式。另外，付款供应商可能提供基于HTTP重定向的集成，但这可能导致用户体验不够流畅。
- en: 'Design choices related to nonfunctional requirements can have fairly far-reaching
    implications in areas of domain-specific technical expertise: we started out discussing
    a tradeoff related to mitigating risks associated with handling payment data,
    and ended up thinking about considerations that are deep in the realm of web platform
    security. Along the way, we also encountered contractual and regulatory concerns.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与非功能性需求相关的设计选择可能在领域特定技术专业知识领域产生相当深远的影响：我们开始讨论与处理付款数据相关的风险缓解相关的权衡，最终考虑到了深入到Web平台安全领域的考虑。在这个过程中，我们还遇到了合同和监管方面的问题。
- en: Managing Tensions and Aligning Goals
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理紧张关系和调整目标
- en: With some up-front planning, you can often satisfy important nonfunctional requirements
    like security and reliability without having to give up features, and at reasonable
    cost. When stepping back to consider security and reliability in the context of
    the entire system and development and operations workflow, it often becomes apparent
    that these goals are very much aligned with general software quality attributes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些前期规划，您通常可以满足重要的非功能性需求，如安全性和可靠性，而无需放弃功能，并且成本合理。当回顾整个系统和开发运营工作流程的背景来考虑安全性和可靠性时，往往会发现这些目标与一般软件质量属性非常一致。
- en: 'Example: Microservices and the Google Web Application Framework'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：微服务和谷歌Web应用程序框架
- en: Consider the evolution of a Google-internal framework for microservices and
    web applications. The primary goal of the team creating the framework was to streamline
    the development and operation of applications and services for large organizations.
    In designing this framework, the team incorporated the key idea of applying static
    and dynamic *conformance checks* to ensure that application code adheres to various
    coding guidelines and best practices. For example, a conformance check verifies
    that all values passed between concurrent execution contexts are of immutable
    types—a practice that drastically reduces the likelihood of concurrency bugs.
    Another set of conformance checks enforces isolation constraints between components,
    which makes it much less likely that a change in one component/module of the application
    results in a bug in another component.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑谷歌内部微服务和Web应用程序框架的演变。创建该框架的团队的主要目标是简化大型组织的应用程序和服务的开发和运营。在设计这个框架时，团队融入了一个关键的想法，即应用静态和动态的*符合性检查*，以确保应用代码符合各种编码准则和最佳实践。例如，符合性检查验证在并发执行上下文之间传递的所有值都是不可变类型——这种做法极大地降低了并发错误的可能性。另一组符合性检查强制执行组件之间的隔离约束，这样就不太可能导致应用程序中一个组件的更改导致另一个组件中的错误。
- en: Because applications built on this framework have a fairly rigid and well-defined
    structure, the framework can provide out-of-the-box automation for many common
    development and deployment tasks—from scaffolding for new components, to automated
    setup of continuous integration (CI) environments, to largely automated production
    deployments. These benefits have made this framework quite popular among Google
    developers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因为基于这个框架构建的应用程序具有相当严格和明确定义的结构，所以该框架可以为许多常见的开发和部署任务提供开箱即用的自动化功能——从新组件的脚手架搭建，到持续集成（CI）环境的自动设置，再到大部分自动化的生产部署。这些优势使得这个框架在谷歌开发人员中非常受欢迎。
- en: What does all this have to do with security and reliability? The framework development
    team collaborated with SRE and security teams throughout the design and implementation
    phases, ensuring that security and reliability best practices were woven into
    the fabric of the framework—not just bolted on at the end. The framework takes
    responsibility for handling many common security and reliability concerns. Similarly,
    it automatically sets up monitoring for operational metrics and incorporates reliability
    features like health checking and SLA compliance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些与安全性和可靠性有什么关系？该框架开发团队在设计和实施阶段与SRE和安全团队合作，确保安全性和可靠性最佳实践被编织到框架的结构中，而不是在最后才添加。该框架负责处理许多常见的安全性和可靠性问题。同样，它还自动设置了操作指标的监控，并整合了可靠性功能，如健康检查和SLA合规性。
- en: For example, the framework’s web application support handles most common types
    of web application vulnerabilities.^([7](ch04.html#ch04fn7)) Through a combination
    of API design and code conformance checks, it effectively prevents developers
    from accidentally introducing many common types of vulnerabilities in application
    code.^([8](ch04.html#ch04fn8)) With respect to these types of vulnerabilities,
    the framework goes beyond “security by default”—rather, it takes full responsibility
    for security, and actively ensures that any application based on it is not affected
    by these risks. We discuss how this is accomplished in more detail in Chapters
    [6](ch06.html#design_for_understandability) and [12](ch12.html#writing_code).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，该框架的Web应用程序支持处理了大多数常见类型的Web应用程序漏洞。通过API设计和代码符合性检查的结合，它有效地防止开发人员在应用程序代码中意外引入许多常见类型的漏洞。就这些类型的漏洞而言，该框架不仅仅是“默认安全性”，而是全面负责安全，并积极确保基于它的任何应用程序不受这些风险的影响。我们将在[第6章](ch06.html#design_for_understandability)和[第12章](ch12.html#writing_code)中更详细地讨论这是如何实现的。
- en: Aligning Emergent-Property Requirements
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对新出现的属性要求进行对齐
- en: The framework example illustrates that, contrary to common perception, security-
    and reliability-related goals are often well aligned with other product goals—especially
    code and project health and maintainability and long-term, sustained project velocity.
    In contrast, attempting to retrofit security and reliability goals as a late add-on
    often leads to increased risks and costs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架示例说明，与常见看法相反，与其他产品目标（尤其是代码和项目健康、可维护性和长期持续的项目速度）相关的安全性和可靠性目标通常是很好对齐的。相比之下，试图作为后期附加的方式来追加安全性和可靠性目标通常会导致增加风险和成本。
- en: 'Priorities for security and reliability can also align with priorities in other
    areas:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和可靠性的优先级也可以与其他领域的优先级对齐：
- en: 'As discussed in [Chapter 6](ch06.html#design_for_understandability), system
    design that enables people to effectively and accurately reason about invariants
    and behaviors of the system is crucial for security and reliability. Understandability
    is also a key code and project health attribute, and a key support for development
    velocity: an understandable system is easier to debug and to modify (without introducing
    bugs in the first place).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如在[第6章](ch06.html#design_for_understandability)中讨论的那样，使人们能够有效和准确地推理系统的不变量和行为对于安全性和可靠性至关重要。可理解性也是代码和项目健康属性的关键，也是开发速度的关键支持：一个可理解的系统更容易调试和修改（而不会在一开始引入错误）。
- en: Designing for recovery (see [Chapter 9](ch09.html#design_for_recovery)) allows
    us to quantify and control the risk introduced by changes and rollouts. Typically,
    the design principles discussed here support a higher rate of change (i.e., deployment
    velocity) than we could achieve otherwise.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计用于恢复（见[第9章](ch09.html#design_for_recovery)）使我们能够量化和控制由变更和部署引入的风险。通常，这里讨论的设计原则支持更高的变更速度（即部署速度），这是我们以其他方式无法实现的。
- en: Security and reliability demand that we design for a changing landscape (see
    [Chapter 7](ch07.html#design_for_a_changing_landscape)). Doing so makes our system
    design more adaptable and positions us not only to swiftly address newly emerging
    vulnerabilities and attack scenarios, but also to accommodate changing business
    requirements more quickly.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和可靠性要求我们设计一个不断变化的环境（见[第7章](ch07.html#design_for_a_changing_landscape)）。这样做使我们的系统设计更具适应性，不仅能迅速应对新出现的漏洞和攻击场景，还能更快地适应不断变化的业务需求。
- en: Initial Velocity Versus Sustained Velocity
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始速度与持续速度
- en: There’s a natural tendency, especially in smaller teams, to defer security and
    reliability concerns until some point in the future (“We’ll add in security and
    worry about scaling after we have some customers”). Teams commonly justify ignoring
    security and reliability as early and primary design drivers for the sake of “velocity”—they’re
    concerned that spending time thinking about and addressing these concerns will
    slow development and introduce unacceptable delays into their first release cycle.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在较小的团队中，有一种自然倾向，即将安全性和可靠性问题推迟到将来的某个时间点（“等我们有了一些客户后，我们会加入安全性并担心扩展问题”）。团队通常会以“速度”为借口，忽视安全性和可靠性作为早期和主要的设计驱动因素，他们担心花时间思考和解决这些问题会减慢开发速度，并在首次发布周期中引入不可接受的延迟。
- en: It’s important to make a distinction between *initial velocity* and *sustained
    velocity.* Choosing to not account for critical requirements like security, reliability,
    and maintainability early in the project cycle may indeed increase your project’s
    velocity early in the project’s lifetime. However, experience shows that doing
    so also usually *slows you down significantly* later.^([10](ch04.html#ch04fn10))
    The late-stage cost of retrofitting a design to accommodate requirements that
    manifest as emergent properties can be *very* substantial. Furthermore, making
    invasive late-stage changes to address security and reliability risks can in itself
    introduce even more security and reliability risks. Therefore, it’s important
    to embed security and reliability in your team culture early on (for more on this
    topic, see [Chapter 21](ch21.html#twoone_building_a_culture_of_security_a)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要区分初始速度和持续速度。选择不考虑安全、可靠性和可维护性等关键要求可能确实会增加项目在项目生命周期早期的速度。然而，经验表明，这样做通常也会在项目后期显著减速。在项目周期后期进行大规模修改以满足作为新兴属性出现的要求的成本可能非常高。此外，为了解决安全和可靠性风险而进行侵入性的后期更改本身可能会引入更多的安全和可靠性风险。因此，早期将安全和可靠性融入团队文化非常重要。
- en: The early history of the internet,^([11](ch04.html#ch04fn11)) and the design
    and evolution of the underlying protocols such as IP, TCP, DNS, and BGP, offers
    an interesting perspective on this topic. Reliability—in particular, survivability
    of the network even in the face of outages of nodes^([12](ch04.html#ch04fn12))
    and reliability of communications despite failure-prone links^([13](ch04.html#ch04fn13))—were
    explicit and high-priority design goals of the early precursors of today’s internet,
    such as ARPANET.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的早期历史和IP、TCP、DNS和BGP等基础协议的设计和演变，为这个话题提供了有趣的视角。可靠性——特别是在节点故障的情况下网络的生存能力以及在容易出现故障的链路上通信的可靠性——是早期互联网的早期前身，如ARPANET的明确和高优先级的设计目标。
- en: Security, however, is not mentioned much in early internet papers and documentation.
    Early networks were essentially closed, with nodes operated by trusted research
    and government institutions. But in today’s open internet, this assumption does
    not hold at all—many types of malicious actors are participating in the network
    (see [Chapter 2](ch02.html#understanding_adversaries)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在早期的互联网论文和文档中并没有多少提到安全。早期的网络基本上是封闭的，由受信任的研究和政府机构操作节点。但在今天的开放互联网中，这种假设根本不成立——许多类型的恶意行为者参与了网络。
- en: The internet’s foundational protocols—IP, UDP, and TCP—have no provision to
    authenticate the originator of transmissions, nor to detect intentional, malicious
    modification of data by an intermediate node in the network. Many higher-level
    protocols, such as HTTP or DNS, are inherently vulnerable to various attacks by
    malicious participants in the network. Over time, secure protocols or protocol
    extensions have been developed to defend against such attacks. For example, HTTPS
    augments HTTP by transferring data over an authenticated, secure channel. At the
    IP layer, [IPsec](https://oreil.ly/Bie7A) cryptographically authenticates network-level
    peers and provides data integrity and confidentiality. IPsec can be used to establish
    VPNs over untrusted IP networks.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的基础协议——IP、UDP和TCP——没有规定对传输发起者进行身份验证，也没有检测网络中间节点对数据的故意恶意修改。许多更高级的协议，如HTTP或DNS，天生就容易受到网络中恶意参与者的各种攻击。随着时间的推移，已经开发了安全协议或协议扩展来抵御此类攻击。例如，HTTPS通过在经过身份验证的安全通道上传输数据来增强HTTP。在IP层，IPsec通过加密对网络级对等体进行身份验证，并提供数据完整性和保密性。IPsec可用于在不受信任的IP网络上建立VPN。
- en: However, widely deploying these secure protocols has proven to be rather difficult.
    We’re now approximately 50 years into the internet’s history, and significant
    commercial usage of the internet began perhaps 25 or 30 years ago—yet there is
    still a substantial fraction of web traffic that does not use HTTPS.^([14](ch04.html#ch04fn14))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，广泛部署这些安全协议已被证明相当困难。我们现在大约已经进入互联网历史的第50年，互联网的重要商业用途可能始于25或30年前，但仍有相当大比例的网络流量不使用HTTPS。
- en: For another example of the tradeoff between initial and sustained velocity (in
    this case from outside the security and reliability realm), consider [Agile development
    processes](https://oreil.ly/upg-w). A primary goal of Agile development workflows
    is to increase development and deployment velocity—in particular, to reduce the
    latency between feature specification and deployment. However, Agile workflows
    typically rely on reasonably mature unit and integration testing practices and
    a solid continuous integration infrastructure, which require an up-front investment
    to establish, in exchange for long-term benefits to velocity and stability.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关于初始和持续速度之间权衡的例子（在这种情况下来自安全和可靠性领域之外），请考虑敏捷开发流程。敏捷开发工作流的主要目标是增加开发和部署速度，特别是减少功能规范和部署之间的延迟。然而，敏捷工作流通常依赖于相当成熟的单元和集成测试实践以及稳固的持续集成基础设施，这需要前期投资来建立，以换取长期的速度和稳定性。
- en: More generally, you can choose to prioritize initial project velocity above
    all else—you can develop the first iteration of your web app without tests, and
    with a release process that amounts to copying tarballs to production hosts. You’ll
    probably get your first demo out relatively quickly, but by your third release,
    your project will quite possibly be behind schedule and saddled with technical
    debt.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，您可以选择将初始项目速度置于一切之上——您可以开发Web应用的第一个迭代而不进行测试，并且发布过程相当于将tarballs复制到生产主机。您可能会相对快速地完成第一个演示，但到第三个发布时，您的项目很可能会拖后腿，并且负担着技术债务。
- en: 'We’ve already touched on alignment between reliability and velocity: investing
    in a mature continuous integration/continuous deployment (CI/CD) workflow and
    infrastructure supports frequent production releases with a managed and acceptable
    reliability risk (see [Chapter 7](ch07.html#design_for_a_changing_landscape)).
    But setting up such a workflow requires some up-front investment—for example,
    you will need the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到了可靠性和速度之间的一致性：投资于成熟的持续集成/持续部署（CI/CD）工作流和基础设施支持频繁的生产发布，同时管理和接受可靠性风险（参见[第7章](ch07.html#design_for_a_changing_landscape)）。但是设置这样的工作流需要一些前期投资——例如，你将需要以下内容：
- en: Unit and integration test coverage robust enough to ensure an acceptably low
    risk of defects for production releases, without requiring major human release
    qualification work
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 足够健壮的单元和集成测试覆盖率，以确保生产发布的缺陷风险可接受，而不需要进行主要的人工发布资格工作
- en: A CI/CD pipeline that is itself reliable
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本身可靠的CI/CD流水线
- en: A frequently exercised, reliable infrastructure for staggered production rollouts
    and rollbacks
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常使用的、可靠的基础设施，用于分阶段的生产发布和回滚
- en: A software architecture that permits [decoupled rollouts](https://oreil.ly/8E04K)
    of code and configurations (e.g., “feature flags”)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许代码和配置的[解耦部署](https://oreil.ly/8E04K)的软件架构（例如，“功能标志”）
- en: This investment is typically modest when made early in a product’s lifecycle,
    and it requires only incremental effort by developers to maintain good test coverage
    and “green builds” on an ongoing basis. In contrast, a development workflow with
    poor test automation, reliance on manual steps in deployment, and long release
    cycles tends to eventually bog down a project as it grows in complexity. At that
    point, retrofitting test and release automation tends to require a lot of work
    all at once and might slow down your project even more. Furthermore, tests retrofitted
    to a mature system can sometimes fall into the trap of exercising the current
    buggy behavior more than the correct, intended behavior.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这种投资在产品生命周期的早期进行时通常是适度的，而且只需要开发人员持续付出一些增量努力来保持良好的测试覆盖率和持续构建的“绿色”。相比之下，具有较差的测试自动化、依赖于部署中的手动步骤和长周期发布的开发工作流往往会在项目变得复杂时最终拖慢项目的速度。在那时，为成熟系统添加测试和发布自动化往往需要一次性进行大量工作，可能会进一步减慢项目的速度。此外，为成熟系统添加的测试有时会陷入陷阱，更多地测试当前存在的错误行为而不是正确的预期行为。
- en: These investments are beneficial for projects of all sizes. However, larger
    organizations can enjoy even more benefits of scale, as you can amortize the cost
    across many projects—an individual project’s investment then boils down to a commitment
    to use centrally maintained frameworks and workflows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些投资对各种规模的项目都是有益的。然而，较大的组织可以享受更多规模效益，因为你可以将成本分摊到许多项目中——一个单独项目的投资最终归结为承诺使用集中维护的框架和工作流程。
- en: When it comes to making security-focused design choices that contribute to sustained
    velocity, we recommend choosing a framework and workflow that provide secure-by-construction
    defense against relevant classes of vulnerabilities. This choice can drastically
    reduce, or even eliminate, the risk of introducing such vulnerabilities during
    ongoing development and maintenance of your application’s codebase (see Chapters
    [6](ch06.html#design_for_understandability) and [12](ch12.html#writing_code)).
    This commitment generally doesn’t involve significant up-front investment—rather,
    it entails an incremental and typically modest ongoing effort to adhere to the
    framework’s constraints. In return, you drastically reduce your risk of unplanned
    system outages or security response fire drills throwing deployment schedules
    into disarray. Additionally, your release-time security and production readiness
    reviews are much more likely to go smoothly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出专注于安全的设计选择以促进持续速度时，我们建议选择一个框架和工作流，提供针对相关漏洞类别的构造安全防御。这种选择可以大大减少甚至消除在应用程序代码库的持续开发和维护过程中引入此类漏洞的风险（参见第[6章](ch06.html#design_for_understandability)和[12章](ch12.html#writing_code)）。这种承诺通常不需要重大的前期投资——相反，它需要持续的、通常是适度的努力来遵守框架的约束。作为回报，你大大降低了系统意外停机或安全响应火灾演习对部署计划造成混乱的风险。此外，你的发布时安全性和生产准备审查更有可能顺利进行。
- en: Conclusion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: It’s not easy to design and build secure and reliable systems, especially since
    security and reliability are primarily emergent properties of the entire development
    and operations workflow. This undertaking involves thinking about a lot of rather
    complex topics, many of which at first don’t seem all that related to addressing
    the primary feature requirements of your service.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 设计和构建安全可靠的系统并不容易，特别是因为安全性和可靠性主要是整个开发和运营工作流的新兴属性。这项工作涉及思考许多相当复杂的主题，其中许多起初似乎与解决服务的主要功能要求并不那么相关。
- en: 'Your design process will involve numerous tradeoffs between security, reliability,
    and feature requirements. In many cases, these tradeoffs will at first appear
    to be in direct conflict. It might seem tempting to avoid these issues in the
    early stages of a project and “deal with them later”—but doing so often comes
    at significant cost and risk to your project: once your service is live, reliability
    and security are not optional. If your service is down, you may lose business;
    and if your service is compromised, responding will require all hands on deck.
    But with good planning and careful design, it is often possible to satisfy all
    three of these aspects. What’s more, you can do so with modest additional up-front
    cost, and often with a reduced total engineering effort over the lifetime of the
    system.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你的设计过程将涉及安全性、可靠性和功能要求之间的许多权衡。在许多情况下，这些权衡起初似乎是直接冲突的。在项目的早期阶段避开这些问题可能会很诱人，然后“以后再处理”——但这样做往往会对项目造成重大的成本和风险：一旦你的服务上线，可靠性和安全性就不是可选的。如果你的服务中断，你可能会失去业务；如果你的服务受到损害，应对将需要全员出动。但通过良好的规划和谨慎的设计，通常可以满足这三个方面。更重要的是，你可以在较少的额外前期成本和通常减少系统寿命内的总工程工作量的情况下做到这一点。
- en: ^([1](ch04.html#ch04fn1-marker)) For a more formal treatment, see [The MITRE
    Systems Engineering Guide](https://oreil.ly/ful41) and [ISO/IEC/IEEE 29148-2018(E)](https://oreil.ly/GD6cY).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.html#ch04fn1-marker)) For a more formal treatment, see [The MITRE
    Systems Engineering Guide](https://oreil.ly/ful41) and [ISO/IEC/IEEE 29148-2018(E)](https://oreil.ly/GD6cY).
- en: ^([2](ch04.html#ch04fn2-marker)) For the purposes of the example, it’s not relevant
    what exactly is being sold—a media outlet might require payments for articles,
    a mobility company might require payments for transportation, an online marketplace
    might enable the purchase of physical goods that are shipped to consumers, or
    a food-ordering service might facilitate the delivery of takeout orders from local
    restaurants.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch04.html#ch04fn2-marker)) For the purposes of the example, it’s not relevant
    what exactly is being sold—a media outlet might require payments for articles,
    a mobility company might require payments for transportation, an online marketplace
    might enable the purchase of physical goods that are shipped to consumers, or
    a food-ordering service might facilitate the delivery of takeout orders from local
    restaurants.
- en: ^([3](ch04.html#ch04fn3-marker)) See, for example, McCallister, Erika, Tim Grance,
    and Karen Scarfone. 2010\. NIST Special Publication 800-122, “Guide to Protecting
    the Confidentiality of Personally Identifiable Information (PII).” [*https://oreil.ly/T9G4D*](https://oreil.ly/T9G4D).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch04.html#ch04fn3-marker)) See, for example, McCallister, Erika, Tim Grance,
    and Karen Scarfone. 2010\. NIST Special Publication 800-122, “Guide to Protecting
    the Confidentiality of Personally Identifiable Information (PII).” [*https://oreil.ly/T9G4D*](https://oreil.ly/T9G4D).
- en: ^([4](ch04.html#ch04fn4-marker)) Note that whether or not this is appropriate
    may depend on regulatory frameworks your organization is subject to; these regulatory
    matters are outside the scope of this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch04.html#ch04fn4-marker)) Note that whether or not this is appropriate
    may depend on regulatory frameworks your organization is subject to; these regulatory
    matters are outside the scope of this book.
- en: ^([5](ch04.html#ch04fn5-marker)) See, e.g., the [Sandboxed API](https://oreil.ly/fx86y)
    project.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch04.html#ch04fn5-marker)) See, e.g., the [Sandboxed API](https://oreil.ly/fx86y)
    project.
- en: '^([6](ch04.html#ch04fn6-marker)) For more on this subject, see Zalewski, Michał.
    2011\. *The Tangled Web: A Guide to Securing Modern Web Applications*. San Francisco,
    CA: No Starch Press.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '^([6](ch04.html#ch04fn6-marker)) For more on this subject, see Zalewski, Michał.
    2011\. *The Tangled Web: A Guide to Securing Modern Web Applications*. San Francisco,
    CA: No Starch Press.'
- en: ^([7](ch04.html#ch04fn7-marker)) See, e.g., the [OWASP Top 10](https://oreil.ly/O0kva)
    and [CWE/SANS TOP 25 Most Dangerous Software Errors](https://oreil.ly/Fm6IJ).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch04.html#ch04fn7-marker)) See, e.g., the [OWASP Top 10](https://oreil.ly/O0kva)
    and [CWE/SANS TOP 25 Most Dangerous Software Errors](https://oreil.ly/Fm6IJ).
- en: '^([8](ch04.html#ch04fn8-marker)) See Kern, Christoph. 2014\. “Securing the
    Tangled Web.” *Communications of the ACM* 57(9): 38–47\. doi:10.1145/2643134.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '^([8](ch04.html#ch04fn8-marker)) See Kern, Christoph. 2014\. “Securing the
    Tangled Web.” *Communications of the ACM* 57(9): 38–47\. doi:10.1145/2643134.'
- en: '^([9](ch04.html#ch04fn9-marker)) At Google, software is typically built from
    the HEAD of a common repository, which causes all dependencies to be updated automatically
    with every build. See Potvin, Rachel, and Josh Levenberg. 2016\. “Why Google Stores
    Billions of Lines of Code in a Single Repository.” *Communications of the ACM*
    59(7): 78–87\. [*https://oreil.ly/jXTZM*](https://oreil.ly/jXTZM).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '^([9](ch04.html#ch04fn9-marker)) At Google, software is typically built from
    the HEAD of a common repository, which causes all dependencies to be updated automatically
    with every build. See Potvin, Rachel, and Josh Levenberg. 2016\. “Why Google Stores
    Billions of Lines of Code in a Single Repository.” *Communications of the ACM*
    59(7): 78–87\. [*https://oreil.ly/jXTZM*](https://oreil.ly/jXTZM).'
- en: '^([10](ch04.html#ch04fn10-marker)) See the discussion of tactical programming
    versus strategic programming in Ousterhout, John. 2018\. *A Philosophy of Software
    Design*. Palo Alto, CA: Yaknyam Press. [Martin Fowler](https://oreil.ly/Lc2eY)
    makes similar observations.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '^([10](ch04.html#ch04fn10-marker)) See the discussion of tactical programming
    versus strategic programming in Ousterhout, John. 2018\. *A Philosophy of Software
    Design*. Palo Alto, CA: Yaknyam Press. [Martin Fowler](https://oreil.ly/Lc2eY)
    makes similar observations.'
- en: '^([11](ch04.html#ch04fn11-marker)) See [RFC 2235](https://oreil.ly/UIlV6) and
    Leiner, Barry M. et al. 2009\. “A Brief History of the Internet.” *ACM SIGCOMM
    Computer Communication Review* 39(5): 22–31\. doi:10.1145/1629607.1629613.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '^([11](ch04.html#ch04fn11-marker)) See [RFC 2235](https://oreil.ly/UIlV6) and
    Leiner, Barry M. et al. 2009\. “A Brief History of the Internet.” *ACM SIGCOMM
    Computer Communication Review* 39(5): 22–31\. doi:10.1145/1629607.1629613.'
- en: '^([12](ch04.html#ch04fn12-marker)) Baran, Paul. 1964\. “On Distributed Communications
    Networks.” *IEEE Transactions on Communications Systems* 12(1): 1–9\. doi:10.1109/TCOM.1964.1088883.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '^([12](ch04.html#ch04fn12-marker)) Baran, Paul. 1964\. “On Distributed Communications
    Networks.” *IEEE Transactions on Communications Systems* 12(1): 1–9\. doi:10.1109/TCOM.1964.1088883.'
- en: '^([13](ch04.html#ch04fn13-marker)) Roberts, Lawrence G., and Barry D. Wessler.
    1970\. “Computer Network Development to Achieve Resource Sharing.” *Proceedings
    of the 1970 Spring Joint Computing Conference*: 543–549\. doi:10.1145/1476936.1477020.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '^([13](ch04.html#ch04fn13-marker)) Roberts, Lawrence G., and Barry D. Wessler.
    1970\. “Computer Network Development to Achieve Resource Sharing.” *Proceedings
    of the 1970 Spring Joint Computing Conference*: 543–549\. doi:10.1145/1476936.1477020.'
- en: '^([14](ch04.html#ch04fn14-marker)) Felt, Adrienne Porter, Richard Barnes, April
    King, Chris Palmer, Chris Bentzel, and Parisa Tabriz. 2017\. “Measuring HTTPS
    Adoption on the Web.” *Proceedings of the 26th USENIX Conference on Security Symposium*:
    1323–1338\. [*https://oreil.ly/G1A9q*](https://oreil.ly/G1A9q).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ^([14](ch04.html#ch04fn14-marker)) 费尔特，阿德里安·波特，理查德·巴恩斯，艾普里尔·金，克里斯·帕尔默，克里斯·本策尔和帕里萨·塔布里兹。2017年。
    “测量网络上的HTTPS采用情况。” *第26届USENIX安全研讨会论文集*：1323–1338。[*https://oreil.ly/G1A9q*](https://oreil.ly/G1A9q)。

- en: Chapter 7\. Design for a Changing Landscape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。为不断变化的环境设计
- en: By Maya Kaczorowski, John Lunney, and Deniz Pecel
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Maya Kaczorowski、John Lunney和Deniz Pecel
- en: with Jen Barnason, Peter Duff, and Emily Stark
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与Jen Barnason、Peter Duff和Emily Stark合作
- en: '“Change is the only constant” is a maxim^([1](ch07.html#ch07fn1)) that certainly
    holds true for software: as the number (and variety) of devices we use increases
    every year, so too does the number of library and application vulnerabilities.
    Any device or application is potentially susceptible to remote exploit, data leakage,
    botnet takeover, or other headline-grabbing scenarios.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “变化是唯一不变的”是一个至理名言，对于软件来说绝对是如此：随着我们每年使用的设备数量（和种类）的增加，图书馆和应用程序的漏洞数量也在增加。任何设备或应用程序都有可能受到远程利用、数据泄露、僵尸网络接管或其他引人注目的情景的影响。
- en: At the same time, the security and privacy expectations of users and regulators
    continue to rise, requiring stricter controls like enterprise-specific access
    restrictions and authentication systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，用户和监管机构对安全和隐私的期望不断提高，要求实施更严格的控制，如企业特定的访问限制和认证系统。
- en: To respond to this shifting landscape of vulnerabilities, expectations, and
    risks, you need to be able to change your infrastructure frequently and quickly,
    while also maintaining a highly reliable service—not an easy feat. Achieving this
    balance often boils down to deciding when, and how quickly, to roll out a change.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这种不断变化的漏洞、期望和风险，您需要能够频繁快速地改变您的基础设施，同时保持高度可靠的服务——这并不容易。实现这种平衡通常归结为决定何时以及多快地推出变更。
- en: Types of Security Changes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全变更类型
- en: 'There are many kinds of changes you might make to improve your security posture
    or the resilience of your security infrastructure—for example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会做出许多种改变，以改善您的安全姿态或安全基础设施的弹性，例如：
- en: Changes in response to security incidents (see [Chapter 18](ch18.html#oneeight_recovery_and_aftermath))
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对安全事件做出的变更（见[第18章](ch18.html#oneeight_recovery_and_aftermath)）
- en: Changes in response to newly discovered vulnerabilities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对新发现的漏洞做出的变更
- en: Product or feature changes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品或功能变更
- en: Internally motivated changes to improve your security posture
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出于内部动机改善您的安全姿态的变更
- en: Externally motivated changes, such as new regulatory requirements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部动机的变更，如新的监管要求
- en: Some types of security-motivated changes require additional considerations.
    If you’re rolling out a feature optionally as a first step toward making it mandatory,
    you’ll need to collect sufficient feedback from early adopters and thoroughly
    test your initial instrumentation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些类型的出于安全考虑的变更需要额外的考虑。如果你正在推出一个可选功能作为迈向强制性的第一步，你需要收集足够的早期采用者反馈，并彻底测试你的初始工具。
- en: If you’re considering a change to a dependency—for example, a vendor or third-party
    code dependency—you’ll need to make sure the new solution meets your security
    requirements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在考虑对依赖项进行更改，例如供应商或第三方代码依赖项，您需要确保新解决方案符合您的安全要求。
- en: Designing Your Change
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计您的变更
- en: 'Security changes are subject to the same basic reliability requirements and
    release engineering principles as any other software changes; for more information,
    see [Chapter 4](ch04.html#design_tradeoffs) in this book and [Chapter 8 in the
    SRE book](https://landing.google.com/sre/sre-book/chapters/release-engineering/).
    The timeline for rolling out security changes may differ (see [“Different Changes:
    Different Speeds, Different Timelines”](#different_changes_different_speedscomma)),
    but the overall process should follow the same best practices.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安全变更受到与任何其他软件变更相同的基本可靠性要求和发布工程原则的约束；有关更多信息，请参阅本书中的[第4章](ch04.html#design_tradeoffs)和[SRE书中的第8章](https://landing.google.com/sre/sre-book/chapters/release-engineering/)。推出安全变更的时间表可能有所不同（请参阅[“不同的变更：不同的速度，不同的时间表”](#different_changes_different_speedscomma)），但整体流程应遵循相同的最佳实践。
- en: 'All changes should have the following characteristics:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有变更都应具有以下特征：
- en: Incremental
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式
- en: Make changes that are as small and standalone as possible. Avoid the temptation
    to tie a change to unrelated improvements, such as refactoring code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 进行尽可能小而独立的变更。避免将变更与不相关的改进（如重构代码）联系在一起的诱惑。
- en: Documented
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 记录
- en: 'Describe both the “how” and the “why” of your change so others can understand
    the change and the relative urgency of the rollout. Your documentation might include
    any or all of the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 描述您的变更的“如何”和“为什么”，以便他人能够理解变更和推出的相对紧急性。您的文档可能包括以下任何或所有内容：
- en: Requirements
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Systems and teams in scope
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受影响的系统和团队
- en: Lessons learned from a proof of concept
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从概念验证中学到的经验
- en: Rationale for decisions (in case plans need to be reevaluated)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策的基础（以防需要重新评估计划）
- en: Points of contact for all teams involved
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有涉及的团队的联系点
- en: Tested
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: Test your security change with unit tests and—where possible—integration tests
    (for more information on testing, see [Chapter 13](ch13.html#onethree_testing_code)).
    Complete a peer review to gain a measure of confidence that the change will work
    in production.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单元测试和（在可能的情况下）集成测试来测试您的安全变更（有关测试的更多信息，请参阅[第13章](ch13.html#onethree_testing_code)）。完成同行评审，以获得变更在生产环境中能够正常工作的信心。
- en: Isolated
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离
- en: Use feature flags to isolate changes from one another and avoid release incompatibility;
    for more information, see [Chapter 16 in the SRE workbook](https://landing.google.com/sre/workbook/chapters/canarying-releases/#separating-components-that-change-at-different-rates).
    The underlying binary should exhibit no change in behavior when the feature is
    turned off.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用功能标志来隔离彼此的变更，并避免发布不兼容性；有关更多信息，请参阅[SRE工作手册中的第16章](https://landing.google.com/sre/workbook/chapters/canarying-releases/#separating-components-that-change-at-different-rates)。当关闭功能时，底层二进制应该不会表现出任何行为上的变化。
- en: Qualified
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 合格的
- en: Roll out your change with your normal binary release process, proceeding through
    stages of qualification before receiving production or user traffic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您正常的二进制发布流程推出您的变更，在接收生产或用户流量之前，通过资格的各个阶段。
- en: Staged
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 分阶段
- en: Roll out your change gradually, with instrumentation for canarying. You should
    be able to see differences in behavior before and after your change.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步推出你的变更，并进行金丝雀测试的仪器化。你应该能够在变更前后看到行为上的差异。
- en: These practices suggest taking a “slow and steady” approach to rollout. In our
    experience, the conscious tradeoff between speed and safety is worthwhile. You
    don’t want to risk creating a much larger problem like widespread downtime or
    data loss by rolling out a broken change.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些做法建议采取“缓慢而稳定”的推出方式。根据我们的经验，速度和安全之间的有意的权衡是值得的。你不希望通过推出一个有问题的变更来冒险制造一个更大的问题，比如广泛的停机或数据丢失。
- en: Architecture Decisions to Make Changes Easier
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使变更更容易的架构决策
- en: How can you architect your infrastructure and processes to be responsive to
    the inevitable changes you’ll face? Here we discuss some strategies that enable
    you to flex your system and roll out changes with minimal friction, which also
    lead to building a culture of security and reliability (discussed in [Chapter 21](ch21.html#twoone_building_a_culture_of_security_a)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如何设计你的基础架构和流程，以应对你将面临的不可避免的变化？在这里，我们讨论了一些策略，使你能够灵活地调整系统并推出变化，同时也有助于建立安全可靠的文化（在[第21章](ch21.html#twoone_building_a_culture_of_security_a)中讨论）。
- en: Keep Dependencies Up to Date and Rebuild Frequently
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持依赖项最新并频繁重新构建
- en: Making sure your code points to the latest versions of code dependencies helps
    make your system less susceptible to new vulnerabilities. Keeping references to
    dependencies up to date is particularly important for open source projects that
    change often, like OpenSSL or the Linux kernel. Many large open source projects
    have well-established security vulnerability response and remediation plans that
    clarify when a new release contains a critical security patch, and will backport
    the fix to supported versions. If your dependencies are up to date, it’s likely
    you can apply a critical patch directly instead of needing to merge with a backlog
    of changes or apply multiple patches.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的代码指向代码依赖的最新版本有助于使你的系统不太容易受到新的漏洞的影响。保持对依赖项的引用最新对于经常更改的开源项目尤为重要，比如OpenSSL或Linux内核。许多大型开源项目都有建立良好的安全漏洞响应和修复计划，澄清了新发布是否包含关键安全补丁，并将修复补丁迁移到受支持的版本。如果你的依赖项是最新的，你很可能可以直接应用关键补丁，而不需要合并一大堆变更或应用多个补丁。
- en: New releases and their security patches won’t make it into your environment
    until you rebuild. Frequently rebuilding and redeploying your environment means
    that you’ll be ready to roll out a new version when you need to—and that an emergency
    rollout can pick up the latest changes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 新发布及其安全补丁在你的环境中不会生效，直到你重新构建。频繁重新构建和部署你的环境意味着当你需要时你将准备好推出新版本，并且紧急推出可以获取最新的变更。
- en: Release Frequently Using Automated Testing
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自动化测试频繁发布
- en: Basic SRE principles recommend cutting and rolling out releases regularly to
    facilitate emergency changes. By splitting one large release into many smaller
    ones, you ensure that each release contains fewer changes, which are therefore
    less likely to require rollback. For a deeper exploration of this topic, see the
    “virtuous cycle” depicted in [Figure 16-1 in the SRE workbook](https://landing.google.com/sre/workbook/chapters/canarying-releases/#the-virtuous-cycle-of-ci-cd).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的SRE原则建议定期切割和推出发布，以促进紧急变更。通过将一个大的发布分割成许多较小的发布，你确保每个发布包含的变更更少，因此更不太可能需要回滚。有关这个主题的更深入探讨，请参见SRE
    workbook中的“善行循环”（https://landing.google.com/sre/workbook/chapters/canarying-releases/#the-virtuous-cycle-of-ci-cd）。
- en: When each release contains fewer code changes, it’s easier to understand what
    changed and pinpoint potential issues. When you need to roll out a security change,
    you can be more confident about the expected outcome.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当每个发布包含更少的代码变更时，更容易理解发生了什么变化并找出潜在问题。当你需要推出安全变更时，你可以更加自信地预期结果。
- en: To take full advantage of frequent releases, automate their testing and validation.
    This allows good releases to be pushed automatically while preventing deficient
    releases from reaching production. Automated testing also gives you additional
    confidence when you need to push out fixes that protect against critical vulnerabilities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用频繁的发布，自动化它们的测试和验证。这样可以自动推送良好的发布，同时防止不足的发布进入生产环境。自动化测试还可以在需要推出修复以防止关键漏洞时给你额外的信心。
- en: Similarly, by using containers^([2](ch07.html#ch07fn3)) and microservices,^([3](ch07.html#ch07fn4))
    you can reduce the surface area you need to patch, establish regular release processes,
    and simplify your understanding of system vulnerabilities.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过使用容器^([2](ch07.html#ch07fn3))和微服务^([3](ch07.html#ch07fn4))，你可以减少需要修补的表面积，建立定期发布流程，并简化你对系统漏洞的理解。
- en: Use Containers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用容器
- en: Containers decouple the binaries and libraries your application needs from the
    underlying host OS. Because each application is packaged with its own dependencies
    and libraries, the host OS does not need to include them, so it can be smaller.
    As a result, applications are more portable and you can secure them independently.
    For example, you can patch a kernel vulnerability in the host operating system
    without having to change your application container.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 容器将应用程序所需的二进制文件和库与底层主机操作系统解耦。因为每个应用程序都打包了自己的依赖和库，所以主机操作系统不需要包含它们，因此可以更小。因此，应用程序更具可移植性，你可以独立地对其进行安全保护。例如，你可以在主机操作系统中修补内核漏洞，而无需更改应用程序容器。
- en: Containers are meant to be immutable, meaning they don’t change after they’re
    deployed—instead of SSHing into a machine, you rebuild and redeploy the whole
    image. Because containers are short-lived, they’re rebuilt and redeployed quite
    often.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的设计是不可变的，这意味着它们在部署后不会改变——而不是通过SSH进入机器，你重新构建和部署整个镜像。因为容器的寿命很短，它们经常被重新构建和部署。
- en: Rather than patching live containers, you patch the images in your container
    registry. This means that you can roll out a fully patched container image as
    one unit, making the patch rollout process the same as your (very frequent) code
    rollout process—complete with monitoring, canarying, and testing. As a result,
    you can patch more often.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与其对活动容器进行修补，不如对容器注册表中的镜像进行修补。这意味着您可以将一个完全打了补丁的容器镜像作为一个单元进行部署，使补丁的部署过程与您（非常频繁的）代码部署过程相同，包括监控、金丝雀发布和测试。因此，您可以更频繁地进行补丁。
- en: 'As these changes roll out to each task, the system seamlessly moves serving
    traffic to another instance; see “Case Study 4: Running Hundreds of Microservices
    on a Shared Platform” in [Chapter 7 of the SRE book](https://landing.google.com/sre/workbook/chapters/simplicity/).
    You can achieve similar results and avoid downtime while patching with blue/green
    deployments; see [Chapter 16 in the SRE workbook](https://landing.google.com/sre/workbook/chapters/canarying-releases/).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这些变化应用到每个任务中，系统会无缝地将服务流量转移到另一个实例；参见[《SRE书》第7章中的“案例研究4：在共享平台上运行数百个微服务”](https://landing.google.com/sre/workbook/chapters/simplicity/)。您可以通过蓝/绿部署实现类似的结果，并在修补时避免停机；参见[《SRE工作手册》第16章](https://landing.google.com/sre/workbook/chapters/canarying-releases/)。
- en: You can also use containers to detect and patch newly discovered vulnerabilities.
    Since containers are immutable, they provide content addressability. In other
    words, you actually know what’s running in your environment—for example, which
    images you’ve deployed. If you previously deployed a fully patched image that
    happens to be susceptible to a new vulnerability, you can use your registry to
    identify the susceptible versions and apply patches, rather than scanning your
    production clusters directly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用容器来检测和修补新发现的漏洞。由于容器是不可变的，它们提供内容可寻址性。换句话说，您实际上知道在您的环境中运行什么，例如，您部署了哪些镜像。如果您之前部署了一个完全打了补丁的镜像，恰好容易受到新漏洞的影响，您可以使用您的注册表来识别易受影响的版本并应用补丁，而不是直接扫描您的生产集群。
- en: To reduce the need for this kind of ad hoc patching, you should monitor the
    age of containers running in production and redeploy regularly enough to ensure
    that old containers aren’t running. Similarly, to avoid redeploying older, unpatched
    images, you should enforce that only recently built containers can be deployed
    in production.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少这种临时修补的需求，您应该监视生产环境中运行的容器的年龄，并定期重新部署，以确保旧容器不再运行。同样，为了避免重新部署较旧的未打补丁的镜像，您应该强制执行只有最近构建的容器才能在生产环境中部署。
- en: Use Microservices
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用微服务
- en: An ideal system architecture is easily scalable, provides visibility into system
    performance, and allows you to manage each potential bottleneck between services
    in your infrastructure. Using a microservices architecture, you can split workloads
    into smaller, more manageable units to facilitate maintenance and discovery. As
    a result, you can independently scale, load balance, and perform rollouts in each
    microservice, which means you have more flexibility to make infrastructure changes.
    Since each service handles requests separately, you can use several defenses independently
    and sequentially, providing defense in depth (see [“Defense in Depth”](ch08.html#defense_in_depth)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的系统架构易于扩展，提供对系统性能的可见性，并允许您管理基础架构中服务之间的每个潜在瓶颈。使用微服务架构，您可以将工作负载分割为更小、更易管理的单元，以便进行维护和发现。因此，您可以独立扩展、负载平衡和在每个微服务中执行部署，这意味着您可以更灵活地进行基础架构更改。由于每个服务都单独处理请求，您可以独立和顺序地使用多种防御措施，提供深度防御（见[“深度防御”](ch08.html#defense_in_depth)）。
- en: 'Microservices also naturally facilitate limited or zero trust networking, meaning
    that your system doesn’t inherently trust a service just because it’s located
    in the same network (see [Chapter 6](ch06.html#design_for_understandability)).
    Rather than using a perimeter-based security model with untrusted external versus
    trusted internal traffic, microservices use a more heterogeneous notion of trust
    inside the perimeter: internal traffic may have different levels of trust. Current
    trends are moving toward an increasingly segmented network. As dependence on a
    single network perimeter, like a firewall, is removed, the network can be further
    segmented by services. At the extreme end, a network can implement microservice-level
    segmentation with no inherent trust between services.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务还自然地促进了有限或零信任的网络，这意味着您的系统并不会因为一个服务位于同一网络中就本能地信任它（见[第6章](ch06.html#design_for_understandability)）。与使用基于边界的安全模型不同，该模型将不受信任的外部流量与受信任的内部流量进行区分，微服务使用更多元化的信任概念在边界内部：内部流量可能具有不同级别的信任。当前的趋势是朝着越来越分段化的网络发展。随着对单一网络边界（如防火墙）的依赖被消除，网络可以通过服务进一步分段。在极端情况下，网络可以实现微服务级别的分段，服务之间没有固有的信任关系。
- en: A secondary consequence of using microservices is the convergence of security
    tools, so that some processes, tools, and dependencies can be reused across multiple
    teams. As your architecture scales, it might make sense to consolidate your efforts
    to address shared security requirements—for example, by using common cryptographic
    libraries or common monitoring and alerting infrastructure. That way, you can
    split critical security services into separate microservices that are updated
    and managed by a small number of responsible parties. It’s important to note that
    achieving the security advantages of microservices architectures requires restraint
    to ensure that the services are as simple as possible while still maintaining
    the desired security properties.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用微服务的一个次要后果是安全工具的收敛，因此一些流程、工具和依赖关系可以在多个团队之间重复使用。随着架构的扩展，整合您的努力以解决共享的安全需求可能是有意义的，例如，使用常见的加密库或常见的监控和警报基础设施。这样，您可以将关键的安全服务拆分为单独的微服务，由少数负责方更新和管理。重要的是要注意，实现微服务架构的安全优势需要克制，以确保服务尽可能简单，同时仍保持所需的安全属性。
- en: Using a microservices architecture and development process allows teams to address
    security issues early in the development and deployment lifecycle—when it’s less
    costly to make changes—in a standardized way. As a result, developers can achieve
    secure outcomes while spending less time on security.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用微服务架构和开发流程允许团队在开发和部署生命周期的早期阶段解决安全问题——在进行更改成本较低的时候——以标准化的方式。因此，开发人员可以在花费较少时间处理安全性的同时实现安全的结果。
- en: 'Example: Google’s frontend design'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：谷歌的前端设计
- en: 'Google’s frontend design uses microservices to provide resilience and defense
    in depth.^([4](ch07.html#ch07fn5)) Separating the frontend and backend into different
    layers has many advantages: Google Front End (GFE) serves as a frontend layer
    to most Google services, implemented as a microservice, so these services aren’t
    directly exposed to the internet. GFE also terminates traffic for incoming HTTP(S),
    TCP, and TLS proxies; provides DDoS attack countermeasures; and routes and load
    balances traffic to Google Cloud services.^([5](ch07.html#ch07fn6))'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的前端设计使用微服务提供弹性和深度防御。将前端和后端分开成不同的层有许多优势：Google Front End（GFE）作为大多数谷歌服务的前端层，实现为微服务，因此这些服务不直接暴露在互联网上。GFE还终止了传入HTTP(S)、TCP和TLS代理的流量；提供了DDoS攻击对策；并将流量路由和负载平衡到谷歌云服务。
- en: 'GFE allows for independent partitioning of frontend and backend services, which
    has benefits in terms of scalability, reliability, agility, and security:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: GFE允许独立分区前端和后端服务，这在可伸缩性、可靠性、灵活性和安全性方面都有好处：
- en: Global load balancing helps move traffic between GFE and backends. For example,
    we can redirect traffic during a datacenter outage, reducing mitigation time.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局负载平衡有助于在GFE和后端之间移动流量。例如，我们可以在数据中心故障期间重定向流量，减少缓解时间。
- en: Backend and frontend layers can have several layers within themselves. Because
    each layer is a microservice, we can load balance each layer. As a result, it’s
    relatively easy to add capacity, make general changes, or apply rapid changes
    to each microservice.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端和前端层内部可以有几个层。因为每个层都是一个微服务，我们可以对每个层进行负载平衡。因此，相对容易增加容量，进行一般性更改或对每个微服务应用快速更改。
- en: If a service becomes overloaded, GFE can serve as a mitigation point by dropping
    or absorbing connections before the load reaches the backends. This means that
    not every layer in a microservices architecture needs its own load protection.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果服务过载，GFE可以作为缓解点，在负载达到后端之前丢弃或吸收连接。这意味着微服务架构中并非每个层都需要自己的负载保护。
- en: 'Adoption of new protocols and security requirements is relatively straightforward.
    GFE can handle IPv6 connections even if some backends aren’t yet ready for them.
    GFE also simplifies certificate management by serving as the termination point
    for various common services, like SSL.^([6](ch07.html#ch07fn7)) For example, when
    a [vulnerability](https://oreil.ly/XDPI2) was discovered in the implementation
    of SSL renegotiations, GFE’s control for limiting these renegotiations protected
    all the services behind it. Rapid [Application Layer Transport Security](https://oreil.ly/IRkjI)
    encryption adoption also illustrates how a microservices architecture facilitates
    change adoption: Google’s security team integrated the ALTS library into its RPC
    library to handle service credentials, which enabled wide adoption without a significant
    burden on individual development teams.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新协议和安全要求的采用相对简单。即使一些后端还没有准备好，GFE也可以处理IPv6连接。GFE还通过作为各种常见服务的终止点来简化证书管理，比如SSL。例如，当发现SSL重新协商的实现中存在漏洞时，GFE的控制限制了这些重新协商，保护了其后面的所有服务。快速的应用层传输安全加密也说明了微服务架构如何促进变化的采用：谷歌的安全团队将ALTS库集成到其RPC库中，以处理服务凭据，从而实现了广泛的采用，而对个别开发团队的负担不大。
- en: In today’s cloud world, you can achieve benefits similar to those described
    here by using a microservices architecture, building layers of security controls,
    and managing cross-service communications with a service mesh. For example, you
    might separate request processing from the configuration for managing request
    processing. The industry refers to this type of deliberate split as *separation
    of the data plane* (the requests) *and the control plane* (the configuration).
    In this model, the data plane provides the actual data processing in the system,
    typically handling load balancing, security, and observability. The control plane
    provides policy and configuration to the data plane services, thereby providing
    a manageable and scalable control surface.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的云世界中，您可以通过使用微服务架构、构建安全控制层和使用服务网格来实现类似于此处描述的好处。例如，您可以将请求处理与管理请求处理的配置分开。行业将这种有意的分离称为*数据平面*（请求）*和控制平面*（配置）。在这种模型中，数据平面提供系统中的实际数据处理，通常处理负载平衡、安全性和可观察性。控制平面为数据平面服务提供策略和配置，从而提供可管理和可扩展的控制表面。
- en: 'Different Changes: Different Speeds, Different Timelines'
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的更改：不同的速度，不同的时间轴
- en: 'Not all changes occur on the same timelines or at the same speed. Several factors
    influence how quickly you might want to make a change:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有更改都在相同的时间轴上或以相同的速度发生。有几个因素影响您可能希望进行更改的速度：
- en: Severity
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 严重性
- en: Vulnerabilities are discovered every day, but not all of them are critical,
    actively being exploited, or applicable to your particular infrastructure. When
    you *do* hit that trifecta, you likely want to release a patch as soon as possible.
    Accelerated timelines are disruptive and more likely to break systems. Sometimes
    speed is necessary, but it’s generally safer for a change to happen slowly so
    you can ensure sufficient product security and reliability. (Ideally, you can
    apply a critical security patch independently—that way, you can apply the patch
    quickly without unnecessarily accelerating any other in-flight rollouts.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每天都会发现漏洞，但并非所有漏洞都是关键的、正在被积极利用的，或者适用于您特定的基础设施。当您遇到这种情况时，您可能希望尽快发布补丁。加速的时间表会造成混乱，并更有可能破坏系统。有时速度是必要的，但一般来说，变化发生得越慢越安全，这样您就可以确保足够的产品安全性和可靠性。（理想情况下，您可以独立应用关键安全补丁，这样您就可以快速应用补丁，而不会不必要地加速其他正在进行的推出。）
- en: Dependent systems and teams
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖系统和团队
- en: Some system changes may be dependent on other teams that need to implement new
    policies or enable a particular feature prior to rollout. Your change may also
    depend on an external party—for example, if you need to receive a patch from a
    vendor, or if clients need to be patched before your server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一些系统变化可能取决于其他团队，他们需要在推出之前实施新政策或启用特定功能。您的变化也可能取决于外部方面，例如，如果您需要从供应商那里接收补丁，或者如果客户需要在您的服务器之前打补丁。
- en: Sensitivity
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 敏感性
- en: The sensitivity of your change may affect when you can deploy it to production.
    A nonessential change that improves an organization’s overall security posture
    isn’t necessarily as urgent as a critical patch. You can roll out that nonessential
    change more gradually—for example, team by team. Depending on other factors, making
    the change may not be worth the risk—for example, you may not want to roll out
    a nonurgent change during critical production windows like a holiday shopping
    event, where changes are otherwise tightly controlled.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您的变化的敏感性可能会影响您何时可以将其部署到生产环境中。改进组织整体安全状况的非必要变化并不一定像关键补丁那样紧急。您可以更逐渐地推出这种非必要的变化，例如逐个团队。根据其他因素，进行变化可能不值得冒风险——例如，您可能不希望在关键的生产时间窗口内推出非紧急变化，比如假日购物活动期间，那里的变化通常是受严格控制的。
- en: Deadline
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 截止日期
- en: Some changes have a finite deadline. For example, a regulatory change might
    have a specified compliance date, or you may need to apply a patch before a news
    embargo (see the following sidebar) disclosing a vulnerability drops.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些变化有一个有限的截止日期。例如，监管变化可能有指定的合规日期，或者您可能需要在披露漏洞之前（请参见下面的侧边栏）应用补丁。
- en: There is no hard-and-fast rule for determining the speed of a particular change—a
    change that requires a quick configuration change and rollout in one organization
    may take months in another organization. While a single team may be able to make
    a given change according to a specific timeline, there may be a long tail for
    your organization to fully adopt the change.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 确定特定变化速度没有硬性规定——一个组织可能需要快速进行配置更改和推出，而另一个组织可能需要数月时间。虽然单个团队可能能够按照特定时间表进行特定变化，但您的组织可能需要很长时间才能完全采纳这种变化。
- en: 'In the following sections, we discuss three different time horizons for change
    and include examples to show what each has looked like at Google:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将讨论变化的三种不同时间范围，并举例说明谷歌的情况：
- en: A short-term change in reaction to a new security vulnerability
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对新安全漏洞的短期变化反应
- en: A medium-term change, where new product adoption could happen gradually
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中期变化，新产品采用可能会逐渐发生
- en: A long-term change for regulatory reasons, where Google had to build new systems
    in order to implement the change
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出于监管原因的长期变化，谷歌必须构建新系统以实施变化
- en: 'Short-Term Change: Zero-Day Vulnerability'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 短期变化：零日漏洞
- en: Newly discovered vulnerabilities often require short-term action. A *zero-day
    vulnerability* is one that is known by at least some attackers, but that hasn’t
    been disclosed publicly or discovered by the targeted infrastructure provider.
    Typically, a patch either isn’t available yet or hasn’t been widely applied.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 新发现的漏洞通常需要短期行动。*零日漏洞*是已知至少部分攻击者知道的漏洞，但尚未公开披露或被针对的基础设施提供者发现。通常，补丁要么尚未可用，要么尚未广泛应用。
- en: There are a variety of ways to find out about new vulnerabilities that might
    affect your environment, including regular code reviews, internal code scanning
    (see [“Sanitize Your Code”](ch12.html#sanitize_your_code)), fuzzing (see [“Fuzz
    Testing”](ch13.html#fuzz_testing)), external scans like penetration tests and
    infrastructure scans, and bug bounty programs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以了解可能影响您环境的新漏洞，包括定期代码审查、内部代码扫描（参见[“清理您的代码”](ch12.html#sanitize_your_code)）、模糊测试（参见[“模糊测试”](ch13.html#fuzz_testing)）、外部扫描如渗透测试和基础设施扫描，以及漏洞赏金计划。
- en: In the context of short-term changes, we’ll focus on vulnerabilities where Google
    learned about the vulnerability on day zero. Although Google is often involved
    in embargoed vulnerability responses—for example, when developing patches—a short-term
    change for a zero-day vulnerability is common behavior for most organizations
    in the industry.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在短期变化的背景下，我们将重点放在谷歌在零日得知漏洞的情况。尽管谷歌通常参与封锁漏洞响应，例如在开发补丁时，对于零日漏洞的短期变化是行业中大多数组织的常见行为。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Although zero-day vulnerabilities get a lot of attention (both externally and
    within the organization), they’re not necessarily the vulnerabilities that are
    most exploited by attackers. Before you tackle a same-day zero-day vulnerability
    response, make sure you’re patched for the “top hits” to cover critical vulnerabilities
    from recent years.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管零日漏洞受到了很多关注（无论是外部还是内部），但它们不一定是攻击者最经常利用的漏洞。在处理当天零日漏洞之前，请确保您已经为近年来的“热门”漏洞打了补丁。
- en: 'When you discover a new vulnerability, triage it to determine its severity
    and impact. For example, a vulnerability that allows remote code execution may
    be considered critical. But the impact to your organization might be very difficult
    to determine: Which systems use this particular binary? Is the affected version
    deployed in production? Where possible, you’ll also want to establish ongoing
    monitoring and alerting to determine if the vulnerability is being actively exploited.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发现一个新的漏洞时，要对其进行分类，以确定其严重程度和影响。例如，允许远程代码执行的漏洞可能被认为是关键的。但对你的组织的影响可能非常难以确定：哪些系统使用这个特定的二进制文件？受影响的版本是否部署在生产环境中？在可能的情况下，你还需要建立持续的监控和警报，以确定漏洞是否正在被积极利用。
- en: To take action, you need to obtain a *patch*—a new version of the affected package
    or library with a fix applied. Begin by verifying that the patch actually addresses
    the vulnerability. It can be useful to do this using a working exploit. However,
    be aware that even if you can’t trigger the vulnerability with the exploit, your
    system might still be vulnerable (recall that the absence of evidence is not evidence
    of absence). For example, the patch you’ve applied might address only one possible
    exploit of a larger class of vulnerabilities.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要采取行动，你需要获取一个*补丁*——一个应用了修复的受影响软件包或库的新版本。首先要验证补丁是否真的解决了漏洞。使用一个有效的利用工具来做这件事可能是有用的。但要注意，即使你无法使用利用工具触发漏洞，你的系统可能仍然是有漏洞的（请记住，没有证据并不意味着没有证据）。例如，你应用的补丁可能只解决了一个更大类别的漏洞中的一个可能的利用。
- en: Once you’ve verified your patch, roll it out—ideally in a test environment.
    Even on an accelerated timeline, a patch should be rolled out gradually like any
    other production change—using the same testing, canarying, and other tools—on
    the order of hours or days.^([7](ch07.html#ch07fn8)) A gradual rollout allows
    you to catch potential issues early, as the patch may have an unexpected effect
    on your applications. For example, an application using an API you were unaware
    of may impact performance characteristics or cause other errors.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦验证了你的补丁，就将其推出——最好是在测试环境中。即使在加速的时间表上，补丁也应该像任何其他生产变更一样逐渐推出——使用相同的测试、金丝雀发布和其他工具——大约需要几个小时或几天的时间。逐步推出可以让你及早发现潜在问题，因为补丁可能会对你的应用产生意想不到的影响。例如，使用你不知道的API的应用可能会影响性能特征或引起其他错误。
- en: Sometimes you can’t directly fix the vulnerability. In this case, the best course
    of action is to mitigate the risk by limiting or otherwise restricting access
    to the vulnerable components. This mitigation may be temporary until a patch is
    available, or permanent if you can’t apply the patch to your system—for example,
    because of performance requirements. If suitable mitigations are already in place
    to secure your environment, you may not even need to take any further action.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你无法直接修复漏洞。在这种情况下，最好的做法是通过限制或限制对易受攻击的组件的访问来减轻风险。这种减轻可能是临时的，直到补丁可用，或者是永久的，如果你无法将补丁应用到你的系统上——例如，因为性能要求。如果已经有适当的减轻措施来保护你的环境，你甚至可能不需要采取进一步的行动。
- en: For more details on incident response, see [Chapter 17](ch17.html#oneseven_crisis_management).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关事件响应的更多细节，请参见[第17章](ch17.html#oneseven_crisis_management)。
- en: 'Example: Shellshock'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：Shellshock
- en: On the morning of September 24, 2014, Google Security learned about a [publicly
    disclosed](https://oreil.ly/mQFJj), remotely exploitable vulnerability in [bash](https://oreil.ly/qbTqD)
    that trivially allowed code execution on affected systems. The vulnerability disclosure
    was quickly followed by exploits in the wild, starting the same day.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年9月24日早上，谷歌安全团队得知了一个[公开披露](https://oreil.ly/mQFJj)的、可以远程利用的漏洞，这个漏洞在[shell](https://oreil.ly/qbTqD)上轻松地允许在受影响的系统上执行代码。漏洞披露很快就被野外利用所跟随，从同一天开始。
- en: The [original report](https://oreil.ly/4l2W4) had some muddled technical details
    and didn’t clearly address the status of the embargo on discussing the issue.
    This report, in addition to the rapid discovery of several similar vulnerabilities,
    caused confusion about the nature and exploitability of the attack. Google’s Incident
    Response team initiated its Black Swan protocol to address an exceptional vulnerability
    and coordinated a [large-scale response](https://oreil.ly/v6DeI) to do the following:^([8](ch07.html#ch07fn10))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始报告](https://oreil.ly/4l2W4)有一些混乱的技术细节，并没有清楚地说明对讨论这个问题的禁运的状态。这份报告，再加上几个类似漏洞的迅速发现，导致了对攻击的性质和可利用性的困惑。谷歌的事件响应团队启动了其黑天鹅协议，以应对一个特殊的漏洞，并协调了[大规模的响应](https://oreil.ly/v6DeI)来做以下事情：^([8](ch07.html#ch07fn10))'
- en: Identify the systems in scope and the relative risk level for each
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定范围内的系统和每个系统的相对风险级别
- en: Communicate internally to all teams that were potentially affected
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部向所有可能受到影响的团队通报
- en: Patch all vulnerable systems as quickly as possible
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽快修补所有有漏洞的系统
- en: Communicate our actions, including remediation plans, externally to partners
    and customers
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部向合作伙伴和客户通报我们的行动，包括补救计划
- en: We were not aware of the issue before public disclosure, so we treated it as
    a zero-day vulnerability that necessitated emergency mitigation. In this case,
    a patched version of bash was already available.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在公开披露之前不知道这个问题，所以我们将其视为需要紧急减轻的零日漏洞。在这种情况下，bash的修补版本已经可用。
- en: 'The team assessed the risk to different systems and acted accordingly:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 团队评估了不同系统的风险，并相应地采取了行动。
- en: We deemed a huge number of Google production servers to be low risk. These servers
    were easy to patch with an automated rollout. Once servers passed sufficient validation
    and testing, we patched them much faster than usual, rather than in long phases.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们认为大量的谷歌生产服务器风险较低。这些服务器很容易通过自动化发布进行修补。一旦服务器经过足够的验证和测试，我们会比通常更快地对其进行修补，而不是长时间分阶段进行。
- en: We deemed a large number of Googler workstations to be higher risk. Fortunately,
    these workstations were easy to patch quickly.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们认为大量的谷歌工作站风险更高。幸运的是，这些工作站很容易快速修补。
- en: A small number of nonstandard servers and inherited infrastructure were deemed
    high risk and needed manual intervention. We sent notifications to each team detailing
    the follow-up actions they were required to take, which allowed us to scale the
    effort to multiple teams and easily track progress.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 少量非标准服务器和继承基础设施被认为存在高风险，需要手动干预。我们向每个团队发送通知，详细说明他们需要采取的后续行动，这使我们能够将努力扩展到多个团队，并轻松跟踪进展。
- en: In parallel, the team developed software to detect vulnerable systems within
    Google’s network perimeter. We used this software to complete the remaining patch
    work needed, and added this functionality to Google’s standard security monitoring.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，团队开发了软件来检测谷歌网络范围内的易受攻击系统。我们使用这个软件完成了剩余的补丁工作，并将这个功能添加到了谷歌的标准安全监控中。
- en: 'What we did (and didn’t) do well during this response effort offers a number
    of lessons for other teams and organizations:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这次应对工作中做得好（和不好）提供了许多其他团队和组织的教训：
- en: '*Standardize software distribution to the greatest extent possible*, so that
    patching is the easy and simple choice for remediation. This also requires service
    owners to understand and accept the risk of choosing a nonstandard, nonsupported
    distribution. A service owner should be responsible for maintaining and patching
    an alternative option.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*尽可能标准化软件分发*，这样补丁就成了简单的选择。这还要求服务所有者理解和接受选择非标准、不受支持分发的风险。服务所有者应负责维护和打补丁替代选项。'
- en: '*Use public distribution standards*—ideally, the patch you need to roll out
    will already be in the right format. That way, your team can start validating
    and testing the patch quickly, rather than needing to rework the patch to address
    your specific environment.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用公共分发标准*——理想情况下，你需要推出的补丁已经是正确的格式。这样，你的团队可以开始快速验证和测试补丁，而不需要重新制定补丁以解决你特定的环境。'
- en: '*Ensure that you can accelerate your mechanism to push changes for emergency
    changes* like zero-day vulnerabilities. This mechanism should allow for faster
    than usual validation before full rollout to the affected systems. We don’t necessarily
    recommend that you skip validating that your environment still functions—you must
    balance this step against the need to mitigate the exploit.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保你可以加速推动紧急变更的机制*，比如零日漏洞。这个机制应该允许在向受影响系统全面推出之前进行比平时更快的验证。我们不一定建议你跳过验证你的环境仍然正常运行的步骤——你必须在需要减轻利用的需求之间平衡这一步骤。'
- en: '*Make sure that you have monitoring to track the progress of your rollout,
    that you identify unpatched systems, and that you identify where you’re still
    vulnerable*. If you already have tooling to identify whether a vulnerability is
    currently being exploited in your environment, it may help you decide to slow
    down or speed up based on your current risk.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保你有监控来跟踪你的推出进度，识别未打补丁的系统，以及识别你仍然存在漏洞的地方*。如果你已经有工具来识别漏洞是否正在被利用，它可能会帮助你决定根据你当前的风险放缓或加速。'
- en: '*Prepare external communications as early in your response efforts as possible*.
    You don’t want to get bogged down in internal PR approvals when the media is calling
    for a response.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽早准备外部沟通，尽可能在应对工作的早期。当媒体要求回应时，你不希望在内部公关批准中被拖延。
- en: '*Draft a reusable incident or vulnerability response plan* (see [Chapter 17](ch17.html#oneseven_crisis_management))
    ahead of time, including language for external communications. If you’re not sure
    what you need, start with the postmortem of a previous event.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*提前起草可重复使用的事件或漏洞响应计划*（见[第17章](ch17.html#oneseven_crisis_management)），包括外部沟通的语言。如果你不确定你需要什么，可以从以前事件的事后总结开始。'
- en: '*Know which systems are nonstandard or need special attention*. By keeping
    track of outliers, you’ll know which systems might need proactive notifications
    and patching assistance. (If you standardize software distribution per our advice
    in bullet one, outliers should be limited.)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*了解哪些系统是非标准的或需要特别关注*。通过跟踪离群值，你将知道哪些系统可能需要积极通知和补丁协助。（如果你按照我们在第一条建议的标准化软件分发，离群值应该是有限的。）'
- en: 'Medium-Term Change: Improvement to Security Posture'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中期变化：改善安全状况
- en: Security teams often implement changes to improve an environment’s overall security
    posture and reduce risk. These proactive changes are driven by internal and external
    requirements and deadlines, and rarely need to be rolled out suddenly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 安全团队经常实施改变以提高环境的整体安全状况并减少风险。这些积极的改变是由内部和外部的要求和截止日期驱动的，很少需要突然推出。
- en: When planning for changes to your security posture, you need to figure out which
    teams and systems are affected and determine the best place to start. Following
    the SRE principles outlined in [“Designing Your Change”](#designing_your_change),
    put together an action plan for gradual rollout. Each phase should include success
    criteria that must be met before moving to the next phase.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划安全状况变更时，你需要弄清楚哪些团队和系统受到影响，并确定最佳的开始地点。遵循[“设计你的变更”](#designing_your_change)中概述的SRE原则，制定逐步推出的行动计划。每个阶段都应包括必须在进入下一个阶段之前满足的成功标准。
- en: Systems or teams affected by security changes can’t necessarily be represented
    as a percentage of a rollout. You can instead phase a rollout according to who
    is affected and what changes should be made.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 受安全变更影响的系统或团队不能必然表示为推出的百分比。相反，你可以根据受影响的人和需要进行的变更来分阶段推出。
- en: 'In terms of who is affected, roll out your change group by group, where a group
    might be a development team, system, or set of end users. For example, you might
    begin by rolling out a change for device policies to users who are frequently
    on the road, like your sales team. Doing so allows you to quickly test the most
    common cases and obtain real-world feedback. There are two competing philosophies
    when it comes to rollout populations:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在受影响的人员方面，逐组推出您的变更，其中一组可能是一个开发团队、系统或一组最终用户。例如，您可以开始向经常在外出的用户（如销售团队）推出设备策略的变更。这样可以让您快速测试最常见的情况，并获得真实的反馈。在推出人员方面有两种相互竞争的哲学：
- en: Start with the easiest use case, where you’ll get the most traction and prove
    value.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从最容易的用例开始，这样你将获得最大的动力并证明价值。
- en: Start with the hardest use case, where you’ll find the most bugs and edge cases.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从最困难的用例开始，这样你将找到最多的错误和边缘情况。
- en: When you’re still seeking buy-in from the organization, it makes sense to start
    with the easiest use case. If you have leadership support and investment up front,
    it’s more valuable to find implementation bugs and pain points early on. In addition
    to organizational concerns, you should consider which strategy will lead to the
    greatest risk reduction, both in the short and the long term. In all cases, a
    successful proof of concept helps determine how to best move forward. The team
    making the change should also have to live through it, “eating their own dogfood,”
    so that they understand the user experience.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当您仍在寻求组织的支持时，从最容易的用例开始是有意义的。如果您在一开始就得到了领导支持和投资，那么尽早发现实施错误和痛点就更有价值。除了组织上的考虑，您还应考虑哪种策略将在短期和长期内带来最大的风险降低。在所有情况下，成功的概念验证有助于确定如何最好地前进。进行变更的团队还必须经历这一过程，“吃自己的狗粮”，以便他们了解用户体验。
- en: You might also be able to roll out the change itself incrementally. For example,
    you may be able to implement progressively more stringent requirements, or the
    change could initially be opt-in, rather than mandatory. Where possible, you should
    also consider rolling out a change as a dry run in an alerting or auditing mode
    before switching to an enforcement mode—that way, users can experience how they’ll
    be affected before the change is mandatory. This allows you to find users or systems
    that you’ve improperly identified as in scope, as well as users or systems for
    whom achieving compliance will be particularly difficult.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还可以逐步推出变更本身。例如，您可以逐渐实施更严格的要求，或者变更最初可以选择加入，而不是强制性的。在可能的情况下，您还应考虑在警报或审计模式下进行变更的试运行，然后再切换到执行模式——这样，用户可以在变更强制执行之前体验到他们将受到的影响。这样可以帮助您找到错误地确定为受影响范围内的用户或系统，以及对于他们来说，达到合规性将特别困难的用户或系统。
- en: 'Example: Strong second-factor authentication using FIDO security keys'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：使用FIDO安全密钥进行强大的双因素认证
- en: Phishing is a significant security concern at Google. Although we have widely
    implemented second-factor authentication using one-time passwords (OTPs), OTPs
    are still susceptible to interception as part of a phishing attack. We assume
    that even the most sophisticated users are well intentioned and well prepared
    to deal with phishing, but still susceptible to account takeovers due to confusing
    user interfaces or user error. To address this risk, starting in 2011, we investigated
    and tested several stronger two-factor authentication (2FA) methods.^([9](ch07.html#ch07fn11))
    We eventually chose universal two-factor (U2F) hardware security tokens because
    of their security and usability properties. Implementing security keys for Google’s
    large and globally distributed employee population required building custom integrations
    and coordinating en masse enrollment.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 钓鱼是Google的一个重大安全问题。尽管我们已广泛实施了使用一次性密码（OTPs）的双因素认证，但OTP仍然容易在钓鱼攻击中被截取。我们假设即使是最复杂的用户也是出于善意并且做好了应对钓鱼的准备，但仍然容易受到由于混乱的用户界面或用户错误而导致的账户接管。为了解决这一风险，从2011年开始，我们调查和测试了几种更强大的双因素认证（2FA）方法。我们最终选择了通用双因素（U2F）硬件安全令牌，因为它们具有安全性和可用性属性。为了为Google庞大的全球分布的员工群体实施安全密钥，需要构建定制集成并协调大规模注册。
- en: Evaluating potential solutions and our final choice was part of the change process
    itself. Up front, we defined security, privacy, and usability requirements. We
    then validated potential solutions with users to understand what was changing,
    get real-world feedback, and measure the impact of the change on day-to-day workflows.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 评估潜在解决方案和我们最终的选择是变更过程的一部分。一开始，我们定义了安全、隐私和可用性要求。然后，我们与用户一起验证潜在的解决方案，以了解正在发生的变化，获得真实的反馈，并衡量变化对日常工作流程的影响。
- en: In addition to security and privacy requirements, the potential solution had
    to meet usability requirements to facilitate seamless adoption, also critical
    for building a culture of security and reliability (see [Chapter 21](ch21.html#twoone_building_a_culture_of_security_a)).
    2FA needed to be easy—fast and “brainless” enough to make using it incorrectly
    or insecurely difficult. This requirement was particularly critical for SREs—in
    case of outages, 2FA couldn’t slow down response processes. Additionally, internal
    developers needed to be able to easily integrate the 2FA solution into their websites
    through simple APIs. In terms of ideal usability requirements, we wanted an efficient
    solution that scaled for users across multiple accounts and didn’t entail additional
    hardware, and that was physically effortless, easy to learn, and easy to recover
    if lost.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安全和隐私要求，潜在的解决方案还必须满足可用性要求，以促进无缝采用，这对于建立安全和可靠性文化至关重要（见[第21章](ch21.html#twoone_building_a_culture_of_security_a)）。双因素认证需要简单易用——快速和“无脑”到足以使错误或不安全地使用它变得困难。这一要求对于SREs尤为重要——在发生故障时，双因素认证不能减慢响应流程。此外，内部开发人员需要能够通过简单的API轻松地将双因素认证解决方案集成到他们的网站中。在理想的可用性要求方面，我们希望找到一个高效的解决方案，适用于跨多个帐户的用户，并且不需要额外的硬件，而且在物理上轻松、易学、易于找回。
- en: After evaluating several options, we co-designed [FIDO security keys](https://oreil.ly/UHbVu).
    Though these keys did not meet all of our ideal requirements, in initial pilots
    security keys decreased the total authentication time and had a negligible authentication
    failure rate.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we had a solution, we had to roll out security keys to all users and deprecate
    OTP support across Google. We began rolling out the security keys in 2013\. To
    ensure wide adoption, enrollment was self-service:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Initially, many users opted into security keys voluntarily because the keys
    were simpler to use than the existing OTP tools—they didn’t have to type in a
    code from their phone or use a physical OTP device. Users were given “nano” security
    keys that could stay in the USB drives of their laptops.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To obtain a security key, a user could go to any TechStop location in any office.^([10](ch07.html#ch07fn12))
    (Distributing the devices to global offices was complicated, requiring legal teams
    for export compliance and customs import requirements.)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users enrolled their security keys via a self-service registration website.
    TechStops provided assistance for the very first adopters and people who needed
    additional help. Users needed to use the existing OTP system the first time they
    authenticated, so keys were trusted on first use (TOFU).
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users could enroll multiple security keys so they wouldn’t need to worry about
    losing their key. This approach increased the overall cost, but was strongly aligned
    with our goal of not making the user carry additional hardware.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team did encounter some issues, like out-of-date firmware, during rollout.
    When possible, we approached these issues in a self-service manner—for example,
    by allowing users to update security key firmware themselves.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Making security keys accessible to users was only half the problem, though.
    Systems using OTPs also needed to convert to using security keys. In 2013, many
    applications did not natively support this recently developed technology. The
    team first focused on supporting applications used daily by Googlers, like internal
    code review tools and dashboards. Where security keys were not supported (for
    example, in the case of some hardware device certificate management and third-party
    web applications), Google worked directly with the vendor to request and add support.
    We then had to deal with the long tail of applications. Since all OTPs were centrally
    generated, we could figure out which application to target next by tracking the
    clients making OTP requests.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: In 2015, the team focused on completing the rollout and deprecating the OTP
    service. We sent users reminders when they used an OTP instead of a security key,
    and eventually blocked access via OTP. Though we had dealt with most of the long
    tail of OTP application needs, there were still a few exceptions, such as mobile
    device setup. For these cases, we created a web-based OTP generator for exceptional
    circumstances. Users were required to verify their identity with their security
    key—a reasonable failure mode with a slightly higher time burden. We successfully
    completed the company-wide rollout of security keys in 2015.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'This experience provided several generally applicable lessons, relevant for
    building a culture of security and reliability (see [Chapter 21](ch21.html#twoone_building_a_culture_of_security_a)):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the solution you choose works for all users.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: It was critical that the 2FA solution was accessible so that visually impaired
    users weren’t excluded.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Make the change easy to learn and as effortless as possible.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: This especially applies if the solution is more user-friendly than the initial
    situation! This is particularly important for an action or change you expect a
    user to perform frequently, where a little bit of friction can lead to a significant
    user burden.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Make the change self-service in order to minimize the burden on a central IT
    team.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: For a widespread change that affects all users in everyday activities, it is
    important that they can easily enroll, unenroll, and troubleshoot issues.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Give the user tangible proof that the solution works and is in their best interest.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Clearly explain the impact of the change in terms of security and risk reduction,
    and provide an opportunity for them to offer feedback.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Make the feedback loop on policy noncompliance as fast as possible.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: This feedback loop can be an authentication failure, a system error, or an email
    reminder. Letting the user know that their action was not in line with the desired
    policy within minutes or hours allows them to take action to fix the issue.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Track progress and determine how to address the long tail.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: By examining user requests for OTPs by application, we could identify which
    applications to focus on next. Use dashboards to track progress and identify whether
    alternative solutions with similar security properties can work for the long tail
    of use cases.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Long-Term Change: External Demand'
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations, you either have or need much more time to roll out a change—for
    example, an internally driven change that requires significant architectural or
    system changes, or a broader industry-wide regulatory change. These changes may
    be motivated or restricted by external deadlines or requirements, and might take
    several years to implement.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: When taking on a massive, multiyear effort, you need to clearly define and measure
    progress against your goal. Documentation is particularly critical, both to ensure
    you take necessary design considerations into account (see [“Designing Your Change”](#designing_your_change))
    and to maintain continuity. Individuals working on the change today might leave
    the company and need to hand off their work. Keeping documentation up to date
    with the latest plan and status is important for sustaining ongoing leadership
    support.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: To measure ongoing progress, establish appropriate instrumentation and dashboarding.
    Ideally, a configuration check or test can measure a change automatically, removing
    the need to have a human in the loop. Just as you strive for significant test
    coverage for code in your infrastructure, you should aim for compliance check
    coverage for systems affected by the change. To scale this coverage effectively,
    this instrumentation should be self-serve, allowing teams to implement both the
    change and the instrumentation. Tracking these results transparently helps motivate
    users and simplifies communications and internal reporting. Rather than duplicating
    work, you should also use this single source of truth for executive communications.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Conducting any large-scale, long-term change in an organization while maintaining
    continued leadership support is difficult. To sustain momentum over time, the
    individuals making these changes need to stay motivated. Establishing finite goals,
    tracking progress, and demonstrating significant examples of impact can help teams
    finish the marathon. Implementation will always have a long tail, so figure out
    a strategy that makes the most sense for your situation. If a change is not required
    (by regulation, or for other reasons), achieving 80% or 90% adoption can have
    a measurable impact on reducing security risk, and should therefore be considered
    a success.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Increasing HTTPS usage'
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTPS adoption on the web has increased dramatically in the last decade, driven
    by the concerted efforts of the Google Chrome team, [Let’s Encrypt](https://letsencrypt.org),
    and other organizations. HTTPS provides important confidentiality and integrity
    guarantees for users and websites, and is critical to the web ecosystem’s success—it’s
    now required as part of HTTP/2.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'To promote HTTPS use across the web, we conducted extensive research to build
    a strategy, contacted site owners using a variety of outreach channels, and set
    up powerful incentives for them to migrate. Long-term, ecosystem-wide change requires
    a thoughtful strategy and significant planning. We used a data-driven approach
    to determine the best way to reach each stakeholder group:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: We gathered data about current HTTPS usage worldwide to select target regions.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We surveyed end users to understand how they perceived the HTTPS UI in browsers.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We measured site behavior to identify web platform features that could be restricted
    to HTTPS to protect user privacy.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used case studies to understand developer concerns about HTTPS and the types
    of tooling we could build to help.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This wasn’t a one-time effort: we continued to monitor metrics and gather data
    over a multiyear period, adjusting our strategy when necessary. For example, as
    we gradually rolled out Chrome warnings for insecure pages over a period of years,
    we monitored user behavior telemetry to ensure that the UI changes didn’t cause
    unexpected negative effects (for example, a dip in retention or engagement with
    the web).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Overcommunicating was key to success. Before each change, we used every available
    outreach channel: blogs, developer mailing lists, press, Chrome help forums, and
    relationships with partners. This approach maximized our reach so site owners
    weren’t surprised that they were being pushed to move to HTTPS. We also tailored
    our outreach regionally—for example, devoting special attention to Japan when
    we realized that HTTPS adoption was lagging there because of slow uptake among
    top sites.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, we focused on creating and emphasizing incentives to provide a business
    reason to migrate to HTTPS. Even security-minded developers had trouble convincing
    their organizations unless they could tie the migration to a business case. For
    example, enabling HTTPS allows websites to use web platform features like [Service
    Worker](https://oreil.ly/W5t4I), a background script that enables offline access,
    push notifications, and periodic background sync. Such features, which are restricted
    to HTTPS websites, improve performance and availability—and may have a direct
    impact on a business’s bottom line. Organizations were more willing to devote
    resources to moving to HTTPS when they felt that the move was aligned with their
    business interests.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in [Figure 7-1](#percentage_of_https_browsing_time_by_ch), Chrome
    users across platforms now spend over 90% of their time on HTTPS sites, whereas
    previously this figure was as low as 70% for Chrome users on Windows and 37% for
    Chrome on Android. Countless people from many organizations—web browser vendors,
    certificate authorities, and web publishers—contributed to this increase. These
    organizations coordinated through standards bodies, research conferences, and
    open communication about the challenges and successes that each faced. Chrome’s
    role in this shift produced important lessons about contributing to ecosystem-wide
    change:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Understand the ecosystem before committing to a strategy.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: We based our strategy on quantitative and qualitative research, focusing on
    a broad set of stakeholders including web developers and end users in different
    countries and on different devices.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Overcommunicate to maximize reach.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: We used a variety of outreach channels to reach the widest range of stakeholders.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Tie security changes to business incentives.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Organizational leaders were more amenable to HTTPS migration when they could
    see the business reasons.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Build an industry consensus.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Multiple browser vendors and organizations supported the web’s migration to
    HTTPS simultaneously; developers saw HTTPS as an industry-wide trend.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Percentage of HTTPS browsing time on Chrome by platform](assets/bsrs_0701.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1\. Percentage of HTTPS browsing time on Chrome by platform
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Complications: When Plans Change'
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best-laid plans of security and SRE often go awry. There are many reasons
    you may either need to accelerate a change or slow it down.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, you need to accelerate a change based upon external factors—typically,
    due to a vulnerability that’s actively being exploited. In this case, you might
    want to speed up your rollout to patch your systems as quickly as possible. Be
    cautious: speeding up and breaking systems isn’t necessarily better for the security
    and reliability of your systems. Consider whether you can change the order of
    rollouts to cover certain higher-risk systems sooner, or otherwise remove attackers’
    access by rate limiting operations or taking a particularly critical system offline.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: You may also decide to slow down a change. This approach is usually due to an
    issue with a patch, such as a higher than expected error rate or other rollout
    failures. If slowing down a change doesn’t address the issue, or you can’t roll
    out fully without negatively impacting your system or users, then rolling back,
    debugging the issue, and rolling out again is a painful but cautious approach.
    You may also be able to slow down a change based on updated business requirements—for
    example, changes to internal deadlines or delays in industry standards. (What
    do you mean, TLS 1.0 is still in use?!)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'In the best-case scenario, your plans change before you start implementing
    them. In response, you just need to create new plans! Here are some potential
    reasons to change your plans, and corresponding tactics for doing so:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: You might need to delay a change based on external factors.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re not able to start patching as soon as the embargo lifts (see [“Different
    Changes: Different Speeds, Different Timelines”](#different_changes_different_speedscomma)),
    work with the vulnerability team to see if any other systems are in your situation,
    and if it’s possible to change the timeline. Either way, make sure you have communications
    ready to inform affected users of your plan.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: You might need to speed up a change based on a public announcement.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: For a vulnerability under embargo, you may have to wait for a public announcement
    before patching. Your timeline might change if the announcement leaks, if an exploit
    is made publicly available, or if the vulnerability is exploited in the wild.
    In this case, you’ll want to start patching sooner rather than later. You should
    have an action plan at every stage for what to do if the embargo is broken.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: You might not be severely impacted.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: If a vulnerability or change primarily affects public web-facing services, and
    your organization has a very limited number of such services, you probably don’t
    need to rush to patch your entire infrastructure. Patch what’s affected, and slow
    down the rate at which you apply patches to other areas of your system.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: You might be dependent on external parties.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Most organizations depend on third parties to distribute patched packages and
    images for vulnerabilities, or rely on software and hardware delivery as part
    of an infrastructure change. If a patched OS isn’t available or the hardware you
    need is on backorder, there’s likely not much you can do. You’ll probably have
    to start your change later than originally intended.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Growing Scope—Heartbleed'
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In December 2011, support for SSL/TLS’s heartbeat feature was added to OpenSSL,
    along with an [unrecognized bug](https://xkcd.com/1354) that allowed a server
    or client to access 64 KB of another server or client’s private memory. In April
    2014, the bug was codiscovered by a Googler, Neel Mehta, and an engineer working
    for Codenomicon (a cybersecurity company); both reported it to the OpenSSL project.
    The OpenSSL team committed a code change to fix the bug and formulated a plan
    to publicly disclose it. In a move that surprised many in the security community,
    Codenomicon made a public announcement and launched the explanatory website *[heartbleed.com](http://heartbleed.com)*.
    This first use of a clever name and logo caused unexpectedly large media interest.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: With early access to the patch, which was under embargo, and ahead of the planned
    public disclosure, Google infrastructure teams had already quietly patched a small
    number of key externally facing systems that directly handled TLS traffic. However,
    no other internal teams knew about the issue.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Once the bug became publicly known, exploits were developed quickly in frameworks
    such as [Metasploit](https://www.metasploit.com). Facing an accelerated timeline,
    many more Google teams now needed to patch their systems in a hurry. Google’s
    security team used automated scanning to uncover additional vulnerable systems,
    and notified affected teams with instructions to patch and to track their progress.
    The memory disclosure meant that private keys could be leaked, which meant that
    a number of services needed key rotation. The security team notified affected
    teams and tracked their progress in a central spreadsheet.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Heartbleed illustrates a number of important lessons:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Plan for the worst-case scenario of the embargo breaking or being lifted early.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: While responsible disclosure is ideal, accidents (and cute logos that spur media
    interest) can happen. Do as much pre-work as possible, and move quickly to patch
    the most vulnerable systems regardless of disclosure agreements (which necessitate
    internal secrecy about embargoed information). If you can obtain a patch ahead
    of time, you may be able to deploy it before a public announcement. When that
    isn’t possible, you should still be able to test and validate your patch to ensure
    a smooth rollout process.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Prepare for rapid deployment at scale.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Use continuous builds to ensure you can recompile anytime, with a canary strategy
    to validate without destruction.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Regularly rotate your encryption keys and other secrets.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[Key rotation](https://oreil.ly/TFb4b) is a best practice to limit the potential
    blast radius of a key compromise. Practice this operation regularly and confirm
    that your systems still work as intended; see [Chapter 9 in the SRE workbook](https://landing.google.com/sre/workbook/chapters/incident-response/)
    for details. By doing so, you ensure that swapping out any compromised keys won’t
    be a Herculean effort.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have a communication channel to your end users—both internal and
    external.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: When a change fails or causes unexpected behavior, you need to be able to provide
    updates quickly.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Distinguishing between different kinds of security changes is critically important
    so that affected teams know what’s expected of them and how much support you can
    offer.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Next time you’re tasked with making a security change in your infrastructure,
    take a deep breath and create a plan. Start small or find volunteers willing to
    test the change. Have a feedback loop to understand what’s not working for users,
    and make the change self-service. If plans change, don’t panic—just don’t be surprised,
    either.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Design strategies such as frequent rollouts, containerization, and microservices
    make both proactive improvements and emergency mitigation easier, while a layered
    approach makes for few and well-managed external surface areas. Thoughtful design
    and ongoing documentation, both with an eye toward change, keep your system healthy,
    make your team’s workload more manageable, and—as you’ll see in the next chapter—lead
    to greater resilience.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch07.html#ch07fn1-marker)) Widely attributed to [Heraclitus of Ephesus](https://oreil.ly/SUdXz).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '^([2](ch07.html#ch07fn3-marker)) For more information on containers, see the
    blog post [“Exploring Container Security”](https://oreil.ly/i9DTQ) by Dan Lorenc
    and Maya Kaczorowski. See also Burns, Brendan et al. 2016\. “Borg, Omega, and
    Kubernetes: Lessons Learned from Three Container-Management Systems Over a Decade.”
    *ACM Queue* 14(1). [*https://oreil.ly/tDKBJ*](https://oreil.ly/tDKBJ).'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '^([3](ch07.html#ch07fn4-marker)) For more information on microservices, see
    “Case Study 4: Running Hundreds of Microservices on a Shared Platform” in [Chapter
    7 of the SRE book](https://landing.google.com/sre/workbook/chapters/simplicity/).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch07.html#ch07fn5-marker)) See [Chapter 2 in the SRE book](https://landing.google.com/sre/sre-book/chapters/production-environment/).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch07.html#ch07fn6-marker)) See the [”Encryption in Transit in Google Cloud”
    whitepaper](https://oreil.ly/kZQNh) for more information.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: ^([6](ch07.html#ch07fn7-marker)) Ibid.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: ^([7](ch07.html#ch07fn8-marker)) See the discussion of gradual and staged rollouts
    in [Chapter 27 of the SRE book](https://landing.google.com/sre/sre-book/chapters/reliable-product-launches/).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: ^([8](ch07.html#ch07fn10-marker)) See also the [YouTube video](https://oreil.ly/boGtL)
    of the panel discussion about this event.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '^([9](ch07.html#ch07fn11-marker)) See Lang, Juan et al. 2016\. “Security Keys:
    Practical Cryptographic Second Factors for the Modern Web.” *Proceedings of the
    2016 International Conference on Financial Cryptography and Data Security*: 422–440\.
    [*https://oreil.ly/S2ZMU*](https://oreil.ly/S2ZMU).'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: ^([10](ch07.html#ch07fn12-marker)) TechStops are Google’s IT helpdesks, described
    in a [blog post](https://oreil.ly/BWn0-) by Jesus Lugo and Lisa Mauck.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL

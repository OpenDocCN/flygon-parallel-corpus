- en: Chapter 10\. Mitigating Denial-of-Service Attacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。减轻拒绝服务攻击
- en: By Damian Menscher
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：Damian Menscher
- en: with Vitaliy Shipitsyn and Betsy Beyer‎
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与Vitaliy Shipitsyn和Betsy Beyer一起
- en: 'Security practitioners often think about the systems they protect in terms
    of *attack* and *defense*. But in a typical denial-of-service attack, economics
    offers more helpful terms: the adversary attempts to cause the *demand* for a
    particular service to exceed the *supply* of that service’s capacity.^([1](ch10.html#ch10fn1))
    The end result is that the service is left with insufficient capacity to serve
    its legitimate users. The organization must then decide whether to incur even
    greater expenses by attempting to absorb the attack, or to suffer downtime (and
    corresponding financial losses) until the attack stops.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安全从业者通常从*攻击*和*防御*的角度考虑他们保护的系统。但在典型的拒绝服务攻击中，经济学提供了更有用的术语：对手试图导致对特定服务的*需求*超过该服务容量的*供应*。^([1](ch10.html#ch10fn1))
    最终结果是服务容量不足以为其合法用户提供服务。组织随后必须决定是承担更大的费用来吸收攻击，还是遭受停机时间（以及相应的财务损失），直到攻击停止。
- en: While some industries are more frequently targeted by DoS attacks than others,
    any service may be attacked in this way. *DoS extortion*, a financial attack in
    which the adversary threatens to disrupt a service unless paid, strikes relatively
    indiscriminately.^([2](ch10.html#ch10fn2))
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些行业比其他行业更经常成为DoS攻击的目标，但任何服务都可能以这种方式受到攻击。*DoS勒索*是一种金融攻击，对手威胁要破坏服务，除非付款，相对不加选择地打击。^([2](ch10.html#ch10fn2))
- en: Strategies for Attack and Defense
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击和防御策略
- en: Attackers and defenders have limited resources, which they must use efficiently
    to achieve their goals. When formulating a defensive strategy, it’s helpful to
    start by understanding your adversary’s strategy so you can find weaknesses in
    your defenses before they do. With this understanding, you can construct defenses
    for known attacks and can design systems with the flexibility to quickly mitigate
    novel attacks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者和防御者资源有限，必须有效地利用资源来实现其目标。在制定防御策略时，了解对手的策略是有帮助的，这样您就可以在他们之前找到防御的弱点。有了这种理解，您可以构建已知攻击的防御，并设计具有灵活性的系统，以快速减轻新型攻击。
- en: Attacker’s Strategy
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击者的策略
- en: An attacker must focus on efficiently using their limited resources to exceed
    the capacity of their target. A clever adversary may be able to disrupt the services
    of a more powerful opponent.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者必须专注于有效地利用有限的资源来超过其目标的容量。聪明的对手可能能够破坏更强大对手的服务。
- en: 'A typical service has several dependencies. Consider the flow of a typical
    user request:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 典型服务有几个依赖关系。考虑一个典型用户请求的流程：
- en: A DNS query provides the IP address of the server that should receive the user’s
    traffic.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNS查询提供应该接收用户流量的服务器的IP地址。
- en: The network carries the request to the service frontends.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络将请求传递到服务前端。
- en: The service frontends interpret the user request.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务前端解释用户请求。
- en: Service backends provide database functionality for custom responses.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务后端为自定义响应提供数据库功能。
- en: An attack that can successfully disrupt any of those steps will disrupt the
    service. Most novice attackers will attempt to send a flood of application requests
    or network traffic. A more sophisticated attacker may generate requests that are
    more costly to answer—for example, by abusing the search functionality present
    on many websites.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 成功破坏这些步骤中的任何一个的攻击将破坏服务。大多数新手攻击者将尝试发送一大堆应用程序请求或网络流量。更复杂的攻击者可能会生成更昂贵的请求来回答 - 例如，滥用许多网站上存在的搜索功能。
- en: Because a single machine is rarely sufficient to disrupt a large service (which
    is often backed by multiple machines), a determined adversary will develop tools
    for harnessing the power of many machines in what’s called a *distributed denial-of-service*
    (DDoS) attack. To carry out a DDoS attack, the attacker can either compromise
    vulnerable machines and join them together into a *botnet*, or launch an *amplification
    attack*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因为单台机器很少足以破坏大型服务（通常由多台机器支持），决心的对手将开发工具，利用许多机器的力量进行所谓的*分布式拒绝服务*（DDoS）攻击。要执行DDoS攻击，攻击者可以利用易受攻击的机器并将它们组合成*僵尸网络*，或发动*放大攻击*。
- en: Defender’s Strategy
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防御者的策略
- en: A well-resourced defender can absorb attacks simply by overprovisioning their
    entire stack, but only at great cost. Datacenters full of power-hungry machines
    are expensive, and provisioning always-on capacity to absorb the largest attacks
    is infeasible. While automatic scaling may be an option for services built on
    a cloud platform with ample capacity, defenders typically need to utilize other
    cost-effective approaches to protect their services.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 资源充足的防御者可以通过过度配置整个堆栈来吸收攻击，但代价很大。充满耗电量的机器的数据中心很昂贵，而为吸收最大攻击而提供始终开启的容量是不可行的。虽然自动扩展可能是具有充足容量的云平台上构建的服务的选项，但防御者通常需要利用其他成本效益的方法来保护其服务。
- en: When figuring out your best DoS defense strategy, you need to take engineering
    time into account—you should prioritize strategies that have the greatest impact.
    While it’s tempting to focus on addressing yesterday’s outage, recency bias can
    result in rapidly changing priorities. Instead, we recommend using a threat model
    approach to concentrate your efforts on the weakest link in the dependency chain.
    You can compare threats according to the number of machines an attacker would
    need to control in order to cause user-visible disruption.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定最佳的DoS防御策略时，您需要考虑工程时间 - 您应该优先考虑具有最大影响的策略。虽然专注于解决昨天的故障很诱人，但最近的偏见可能导致迅速变化的优先事项。相反，我们建议使用威胁模型方法，集中精力解决依赖链中的最薄弱环节。您可以根据攻击者需要控制的机器数量来比较威胁，以造成用户可见的破坏。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: We use the term *DDoS* to refer to DoS attacks that are effective only because
    of their distributed nature, and that use either a large botnet or an amplification
    attack. We use the term *DoS* to refer to attacks that could be sourced from a
    single host. The distinction is relevant when designing defenses, as you can often
    deploy DoS defenses at the application layer, while DDoS defenses frequently utilize
    filtering within the infrastructure.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用术语*DDoS*来指代仅因其分布式性质而有效的DoS攻击，以及使用大型僵尸网络或放大攻击。我们使用术语*DoS*来指代可能源自单个主机的攻击。在设计防御时，这种区别是相关的，因为您通常可以在应用层部署DoS防御，而DDoS防御通常利用基础设施内的过滤器。
- en: Designing for Defense
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为防御而设计
- en: An ideal attack focuses all its power on a single constrained resource, such
    as network bandwidth, application server CPU or memory, or a backend service like
    a database. Your goal should be to protect each of these resources in the most
    efficient way possible.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的攻击会将所有力量集中在单一受限资源上，例如网络带宽、应用服务器CPU或内存，或者像数据库这样的后端服务。您的目标应该是以最有效的方式保护这些资源。
- en: 'As attack traffic makes its way deeper into the system, it becomes both more
    focused and more expensive to mitigate. Therefore, layered defenses, whereby each
    layer protects the layer behind it, are an essential design feature. Here we examine
    the design choices that lead to defendable systems in two major layers: shared
    infrastructure and the individual service.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 随着攻击流量深入系统，它变得更加集中和更加昂贵，因此，分层防御，即每一层保护其后面的层，是一种必不可少的设计特征。在这里，我们将研究导致两个主要层中的可防御系统的设计选择：共享基础设施和个体服务。
- en: Defendable Architecture
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可防御的架构
- en: Most services share some common infrastructure, such as peering capacity, network
    load balancers, and application load balancers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务共享一些常见的基础设施，例如对等容量、网络负载均衡器和应用负载均衡器。
- en: The shared infrastructure is a natural place to provide shared defenses. Edge
    routers can throttle high-bandwidth attacks, protecting the backbone network.
    Network load balancers can throttle packet-flooding attacks to protect the application
    load balancers. Application load balancers can throttle application-specific attacks
    before the traffic reaches service frontends.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 共享基础设施是提供共享防御的自然场所。边缘路由器可以限制高带宽攻击，保护骨干网络。网络负载均衡器可以限制数据包洪泛攻击，以保护应用负载均衡器。应用负载均衡器可以在流量到达服务前端之前限制特定于应用程序的攻击。
- en: Layering defenses tends to be cost-effective, since you only need to capacity-plan
    inner layers for styles of DoS attacks that can breach the defenses of outer layers.
    Eliminating attack traffic as early as possible conserves both bandwidth and processing
    power. For example, by deploying ACLs at the network edge, you can drop suspicious
    traffic before it has a chance to consume the bandwidth of the internal network.
    Deploying caching proxies near the network edge can similarly provide significant
    cost savings, while also reducing latency for legitimate users.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 分层防御往往是具有成本效益的，因为您只需要为内部层的DoS攻击风格进行容量规划，这些攻击风格可以突破外部层的防御。尽早消除攻击流量既节省了带宽，也节省了处理能力。例如，通过在网络边缘部署ACL，您可以在流量有机会消耗内部网络带宽之前丢弃可疑流量。在网络边缘附近部署缓存代理也可以提供显着的成本节约，同时还可以减少合法用户的延迟。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Stateful firewall rules are often not an appropriate first line of defense for
    production systems that receive inbound connections.^([5](ch10.html#ch10fn5))
    An adversary can conduct a *state exhaustion attack*, in which a large number
    of unused connections fill the memory of a firewall with connection tracking enabled.
    Instead, use router ACLs to restrict traffic to the necessary ports without introducing
    a stateful system to the data path.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有状态的防火墙规则通常不适合作为接收入站连接的生产系统的第一道防线。^([5](ch10.html#ch10fn5))对手可以进行*状态耗尽攻击*，其中大量未使用的连接填满了启用了连接跟踪的防火墙的内存。相反，使用路由器ACL来限制流量到必要的端口，而不会引入有状态的系统到数据路径中。
- en: Implementing defenses in shared infrastructure also provides a valuable economy
    of scale. While it may not be cost-effective to provision significant defense
    capabilities for any individual service, shared defenses allow you to cover a
    broad range of services while provisioning only once. For example, [Figure 10-1](#a_ddos_attack_on_a_news_site_protected)
    shows how an attack targeting one site produced an amount of traffic that was
    much higher than normal for that site, but was still manageable when compared
    to the amount of traffic received by all of the sites protected by [Project Shield](https://projectshield.withgoogle.com).
    Commercial DoS mitigation services use a similar bundling approach to provide
    a cost-effective solution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在共享基础设施中实施防御也提供了有价值的规模经济。虽然为任何个体服务提供重要的防御能力可能不具有成本效益，但共享防御可以让您一次性覆盖广泛的服务。例如，[图10-1](#a_ddos_attack_on_a_news_site_protected)显示了一次针对一个站点的攻击产生的流量量远高于该站点的正常流量，但与[Project
    Shield](https://projectshield.withgoogle.com)保护的所有站点接收到的流量相比，仍然是可以管理的。商业DoS缓解服务使用类似的捆绑方法来提供成本效益的解决方案。
- en: '![A DDoS attack on a site protected by Project Shield, as seen from (top) the
    perspective of the individual site, and (bottom) the perspective of the Project
    Shield load balancers](assets/bsrs_1001.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![通过Project Shield保护的站点遭受的DDoS攻击，从（上）个体站点的角度和（下）Project Shield负载均衡器的角度看](assets/bsrs_1001.png)'
- en: Figure 10-1\. A DDoS attack on a site protected by Project Shield, as seen from
    (top) the perspective of the individual site, and (bottom) the perspective of
    the Project Shield load balancers
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-1\. 通过Project Shield保护的站点遭受的DDoS攻击，从（上）个体站点的角度和（下）Project Shield负载均衡器的角度看
- en: A particularly large DDoS attack could overwhelm the capacity of a datacenter,
    much as a magnifying glass can harness the power of the sun to ignite a fire.
    Any defense strategy must ensure that the power achieved by a distributed attack
    cannot be focused onto any single component. You can use network and application
    load balancers to continually monitor incoming traffic and spread the traffic
    to the nearest datacenter that has available capacity, preventing this type of
    overload.^([6](ch10.html#ch10fn6))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 特别大规模的DDoS攻击可能会压倒数据中心的容量，就像放大镜可以利用太阳的能量点燃火一样。任何防御策略都必须确保分布式攻击所达到的能力不能集中到任何单一组件上。您可以使用网络和应用负载均衡器不断监视传入流量，并将流量传送到最近具有可用容量的数据中心，防止这种类型的过载。
- en: You can defend shared infrastructure without relying on a reactive system by
    using [*anycast*](https://oreil.ly/m0HRU), a technique in which an IP address
    is announced from multiple locations. Using this technique, each location attracts
    traffic from nearby users. As a result, a distributed attack will be dispersed
    across locations all over the world, and therefore can’t focus its power on any
    single datacenter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用*anycast*来保护共享基础设施，而不依赖于一种被动系统，这是一种技术，其中一个IP地址从多个位置宣布。使用这种技术，每个位置都会吸引附近用户的流量。因此，分布式攻击将分散到世界各地的位置，并且因此无法将其能力集中到任何单一数据中心。
- en: Defendable Services
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可防御服务
- en: 'Website or application design can have a significant impact on the defense
    posture of a service. Although ensuring that the service degrades gracefully in
    overload conditions provides the best defense, several simple changes can be made
    to improve resilience to attack and allow for significant cost savings in normal
    operation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 网站或应用程序设计可能会对服务的防御姿态产生重大影响。尽管确保服务在过载条件下能够优雅地降级提供了最佳的防御，但可以进行几项简单的更改来提高对攻击的弹性，并在正常运行中实现显着的成本节约：
- en: Utilize caching proxies
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 利用缓存代理
- en: Using the `Cache-Control` and related headers can permit repeated requests for
    content to be served by proxies, without the need for every request to hit the
    application backend. This applies to most static images, and may even apply to
    the home page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Cache-Control`和相关标头可以允许代理重复请求内容，而无需每个请求都命中应用程序后端。这适用于大多数静态图像，甚至适用于主页。
- en: Avoid unnecessary application requests
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 避免不必要的应用程序请求
- en: Every request consumes server resources, so it’s best to minimize the number
    of requests needed. If a web page contains several small icons, it is more efficient
    to serve them all in a single (larger) image, a technique known as *spriting*.^([7](ch10.html#ch10fn7))
    As a side benefit, reducing the number of requests real users make to the service
    will reduce false positives when identifying malicious bots.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每个请求都会消耗服务器资源，因此最好尽量减少所需的请求次数。如果一个网页包含多个小图标，最好将它们全部放在一个（较大的）图像中，这种技术称为*图像合并*。作为一个附带好处，减少真实用户对服务的请求次数将减少在识别恶意机器人时的误报。
- en: Minimize egress bandwidth
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化出口带宽
- en: While traditional attacks attempt to saturate ingress bandwidth, it’s possible
    for an attack to saturate your bandwidth by requesting a large resource. Resizing
    images to be only as large as necessary will conserve egress bandwidth and reduce
    page load times for users. Rate limiting or deprioritizing unavoidably large responses
    is another option.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然传统攻击试图饱和入口带宽，但攻击也可能通过请求大资源来饱和您的带宽。将图像调整为所需大小将节省出口带宽，并减少用户的页面加载时间。限制速率或降低不可避免的大型响应也是另一种选择。
- en: Mitigating Attacks
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减轻攻击
- en: While a defendable architecture provides the ability to withstand many DoS attacks,
    you may also need active defenses to mitigate large or sophisticated attacks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可防御的架构提供了抵御许多DoS攻击的能力，但您可能还需要积极的防御来减轻大规模或复杂的攻击。
- en: Monitoring and Alerting
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控和警报
- en: 'Outage resolution time is dominated by two factors: mean time to detection
    (MTTD) and mean time to repair (MTTR). A DoS attack may cause server CPU utilization
    to spike, or the application to run out of memory while queueing requests. To
    rapidly diagnose the root cause, you need to monitor the request rate in addition
    to CPU and memory usage.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 停机解决时间由两个因素主导：检测到故障的平均时间（MTTD）和修复故障的平均时间（MTTR）。DoS攻击可能会导致服务器CPU利用率飙升，或者应用程序在排队请求时耗尽内存。为了快速诊断根本原因，您需要监视请求速率以及CPU和内存使用情况。
- en: Alerting on unusually high request rates can give the incident response team
    a clear indication of an attack. However, make sure that your pager alerts are
    actionable. If the attack is not causing user-facing harm, it is often best to
    simply absorb it. We recommend alerting only when demand exceeds service capacity
    and automated DoS defenses have engaged.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对异常高的请求速率发出警报可以清楚地指示事件响应团队遭受了攻击。但是，请确保您的警报是可操作的。如果攻击没有对用户造成实质性伤害，通常最好是吸收它。我们建议只在需求超过服务容量并且自动DoS防御已经启动时发出警报。
- en: The principle of alerting only when human action may be required applies equally
    to network-layer attacks. Many synflood attacks can be absorbed, but may warrant
    an alert if syncookies are triggered.^([8](ch10.html#ch10fn8)) Similarly, high-bandwidth
    attacks are only page-worthy if a link becomes saturated.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在可能需要人工干预时才发出警报的原则同样适用于网络层攻击。许多synflood攻击可以被吸收，但如果触发了syncookies，则可能需要发出警报。类似地，高带宽攻击只有在链接饱和时才值得关注。
- en: Graceful Degradation
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优雅降级
- en: If absorbing an attack isn’t feasible, you should reduce the user-facing impact
    to the extent possible.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果吸收攻击是不可行的，您应尽量减少对用户的影响。
- en: During a large attack you can use network ACLs to throttle suspicious traffic,
    providing an effective switch to immediately limit attack traffic. It’s important
    to not block suspicious traffic all the time, so you can retain visibility into
    your system and minimize the risk of impacting legitimate traffic that matches
    the attack signature. Because a clever adversary may simulate legitimate traffic,
    throttles may not be sufficient. In addition, you can use quality-of-service (QoS)
    controls to prioritize critical traffic. Using a lower QoS for less-important
    traffic like batch copies can release bandwidth to higher QoS queues if needed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模攻击期间，您可以使用网络ACL来限制可疑流量，提供有效的开关以立即限制攻击流量。重要的是不要一直阻止可疑流量，这样您可以保持对系统的可见性，并最小化影响与攻击特征匹配的合法流量的风险。因为聪明的对手可能模拟合法流量，所以限制可能不足够。此外，您可以使用服务质量（QoS）控件来优先处理关键流量。对于像批量复制这样不太重要的流量使用较低的QoS可以在需要时释放带宽到更高的QoS队列。
- en: 'In case of overload, applications can also revert to a degraded mode. For example,
    Google deals with overload in the following ways:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在超载的情况下，应用程序也可以退回到降级模式。例如，Google处理超载的方式有：
- en: Blogger serves in read-only mode, disabling comments.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 博客服务以只读模式提供，禁用评论。
- en: Web Search continues serving with a reduced feature set.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web搜索继续提供带有减少功能集的服务。
- en: DNS servers answer as many requests as they can, but are designed to not crash
    under any amount of load.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS服务器会尽可能回答尽可能多的请求，但设计上不会在任何负载下崩溃。
- en: For more ideas on handling overload, see [Chapter 8](ch08.html#design_for_resilience).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关处理超载的更多想法，请参见[第8章](ch08.html#design_for_resilience)。
- en: A DoS Mitigation System
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DoS缓解系统
- en: Automated defenses, such as throttling the top IP addresses or serving a JavaScript
    or CAPTCHA challenge, can quickly and consistently mitigate an attack. This gives
    the incident response team time to understand the problem and determine if a custom
    mitigation is warranted.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 自动防御，例如限制前几个IP地址或提供JavaScript或CAPTCHA挑战，可以快速而一致地缓解攻击。这使得事件响应团队有时间了解问题，并确定是否需要自定义缓解措施。
- en: 'An automated DoS mitigation system can be divided into two components:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 自动DoS缓解系统可以分为两个组件：
- en: Detection
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 检测
- en: The system must have visibility into the incoming traffic, with as much detail
    as possible. This may require statistical sampling at all endpoints, with aggregation
    up to a central control system. The control system identifies anomalies that may
    indicate attacks, while working in conjunction with load balancers that understand
    service capacity to determine if a response is warranted.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 系统必须对传入流量有尽可能详细的可见性。这可能需要在所有端点进行统计抽样，并将其汇总到一个中央控制系统。控制系统识别可能表明攻击的异常情况，同时与了解服务容量的负载均衡器一起确定是否需要响应。
- en: Response
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 响应
- en: The system must have the ability to implement a defense mechanism—for example,
    by providing a set of IP addresses to block.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 系统必须具有实施防御机制的能力，例如，提供一组要阻止的IP地址。
- en: In any large-scale system, false positives (and false negatives) are unavoidable.
    This is especially true when blocking by IP address, as it is common for multiple
    devices to share a single network address (e.g., when network address translation
    is used). To minimize the collateral damage to other users behind the same IP
    address, you can utilize a CAPTCHA to allow real users to bypass application-level
    blocks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何大规模系统中，误报（和误报）是不可避免的。当通过IP地址阻止时，尤其如此，因为多个设备共享单个网络地址是很常见的（例如，在使用网络地址转换时）。为了最小化对相同IP地址后面的其他用户造成的附带损害，您可以利用CAPTCHA来允许真实用户绕过应用程序级别的阻止。
- en: You must also consider the failure modes of your DoS mitigation system—problems
    might be triggered by an attack, a configuration change, an unrelated infrastructure
    outage, or some other cause.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须考虑DoS缓解系统的故障模式 - 问题可能由攻击，配置更改，不相关的基础设施故障或其他原因触发。
- en: The DoS mitigation system must itself be resilient to attack. Accordingly, it
    should avoid dependencies on production infrastructure that may be impacted by
    DoS attacks. This advice extends beyond the service itself, to the incident response
    team’s tools and communications procedures. For example, since Gmail or Google
    Docs might be impacted by DoS attacks, Google has backup communication methods
    and playbook storage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: DoS缓解系统本身必须对攻击具有弹性。因此，它应避免依赖可能受到DoS攻击影响的生产基础设施。这些建议不仅适用于服务本身，还适用于事件响应团队的工具和通信程序。例如，由于Gmail或Google
    Docs可能会受到DoS攻击的影响，Google拥有备用通信方法和playbook存储。
- en: Attacks often result in immediate outages. While graceful degradation reduces
    the impact of an overloaded service, it’s best if the DoS mitigation system can
    respond in seconds rather than minutes. This characteristic creates a natural
    tension with the best practice of deploying changes slowly to guard against outages.
    As a tradeoff, we canary all changes (including automated responses) on a subset
    of our production infrastructure before deploying them everywhere. That canary
    can be quite brief—in some cases as little as 1 second!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击通常会导致立即中断。虽然优雅降级可以减少过载服务的影响，但最好的情况是DoS缓解系统可以在几秒钟而不是几分钟内做出响应。这种特性与缓慢部署变更的最佳实践产生自然的紧张关系，以防止中断。作为一种权衡，我们可以在我们的生产基础设施的子集上对所有变更（包括自动响应）进行金丝雀测试，然后再将其部署到所有地方。金丝雀测试可能非常简短
    - 在某些情况下可能只有1秒钟！
- en: If the central controller fails, we don’t want to either fail closed (as that
    would block all traffic, leading to an outage) or fail open (as that would let
    an ongoing attack through). Instead, we fail static, meaning the policy does not
    change. This allows the control system to fail during an attack (which has actually
    happened at Google!) without resulting in an outage. Because we fail static, the
    DoS engine doesn’t have to be as highly available as the frontend infrastructure,
    thus lowering the costs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果中央控制器失败，我们不希望出现关闭失败（因为这将阻止所有流量，导致故障）或者开放失败（因为这将让正在进行的攻击通过）。相反，我们失败静态，这意味着策略不会改变。这允许控制系统在攻击期间失败（这实际上在Google发生过！）而不会导致故障。因为我们失败静态，DoS引擎不必像前端基础设施那样高度可用，从而降低成本。
- en: Strategic Response
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 战略性响应
- en: 'When responding to an outage, it’s tempting to be purely reactive and attempt
    to filter the current attack traffic. While fast, this approach may not be optimal.
    Attackers may give up after their first attempt fails, but what if they don’t?
    An adversary has unlimited opportunities to probe defenses and construct bypasses.
    A strategic response avoids informing the adversary’s analysis of your systems.
    As an example, we once received an attack that was trivially identified by its
    `User-Agent: I AM BOTNET`*.* If we simply dropped all traffic with that string,
    we’d be teaching our adversary to use a more plausible `User-Agent`, like `Chrome`.
    Instead, we enumerated the IPs sending that traffic, and intercepted *all* of
    their requests with CAPTCHAs for a period of time. This approach made it harder
    for the adversary to use [A/B testing](https://oreil.ly/xuQrD) to learn how we
    isolated the attack traffic. It also proactively blocked their botnet, even if
    they modified it to send a different `User-Agent`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '在应对故障时，很容易纯粹是被动的，并尝试过滤当前的攻击流量。虽然快速，但这种方法可能并不是最佳的。攻击者可能在第一次尝试失败后放弃，但如果他们不放弃呢？对手有无限的机会来探测防御并构建绕过。战略性的响应避免通知对手对您的系统的分析。例如，我们曾经收到一个攻击，它通过其`User-Agent:
    I AM BOTNET`*.*轻松识别。如果我们简单地丢弃所有带有该字符串的流量，我们将教会我们的对手使用更合理的`User-Agent`，比如`Chrome`。相反，我们列举了发送该流量的IP，并拦截了他们一段时间内的*所有*请求，使用验证码。这种方法使对手更难使用[A/B测试](https://oreil.ly/xuQrD)来了解我们如何隔离攻击流量。即使他们修改为发送不同的`User-Agent`，它也会主动阻止他们的僵尸网络。'
- en: An understanding of your adversary’s capabilities and goals can guide your defenses.
    A small amplification attack suggests that your adversary may be limited to a
    single server from which they can send spoofed packets, while an HTTP DDoS attack
    fetching the same page repeatedly indicates they likely have access to a botnet.
    But sometimes the “attack” is unintentional—your adversary may simply be trying
    to scrape your website at an unsustainable rate. In that case, your best solution
    may be to ensure that the website is not easily scraped.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 了解对手的能力和目标可以指导您的防御。小型放大攻击表明您的对手可能仅限于可以发送伪造数据包的单个服务器，而重复获取同一页面的HTTP DDoS攻击表明他们可能可以访问僵尸网络。但有时“攻击”是无意的-您的对手可能只是试图以不可持续的速度抓取您的网站。在这种情况下，您最好的解决方案可能是确保网站不容易被抓取。
- en: 'Finally, remember that you are not alone—others are facing similar threats.
    Consider working with other organizations to improve your defenses and response
    capabilities: DoS mitigation providers can scrub some types of traffic, network
    providers can perform upstream filtering, and the network operator community can
    identify and filter attack sources.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请记住您并不孤单-其他人也面临类似的威胁。考虑与其他组织合作，以改善您的防御和响应能力：DoS缓解提供商可以清除某些类型的流量，网络提供商可以执行上游过滤，网络运营商社区可以识别和过滤攻击源。
- en: Dealing with Self-Inflicted Attacks
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理自我造成的攻击
- en: During the adrenaline rush of a major outage, the natural response is to focus
    on the goal of defeating your adversary. But what if there is no adversary to
    defeat? There are some other common causes for a sudden increase in traffic.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在主要故障的肾上腺素飙升期间，自然反应是专注于打败对手的目标。但如果没有对手可以打败呢？突然增加流量的一些其他常见原因。
- en: User Behavior
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户行为
- en: Most of the time, users make independent decisions and their behavior averages
    out into a smooth demand curve. However, external events can synchronize their
    behavior. For example, if a nighttime earthquake wakes up everyone in a population
    center, they may suddenly turn to their devices to search for safety information,
    post to social media, or check in with friends. These concurrent actions can cause
    services to receive a sudden increase in usage, like the traffic spike shown in
    [Figure 10-2](#web_trafficcomma_measured_in_http_reque).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，用户做出独立的决定，他们的行为平均成为平滑的需求曲线。然而，外部事件可以同步他们的行为。例如，如果夜间地震唤醒了人口中的每个人，他们可能会突然转向他们的设备搜索安全信息，发布到社交媒体，或者与朋友联系。这些同时的行动可能导致服务接收到突然增加的使用，就像[图10-2](#web_trafficcomma_measured_in_http_reque)中显示的流量峰值一样。
- en: '![Web traffic, measured in HTTP requests per second, reaching Google infrastructure
    serving users in the San Francisco Bay Area when a magnitude 4.5 earthquake hit
    the region on October 14, 2019](assets/bsrs_1002.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![2019年10月14日发生4.5级地震时，测量每秒HTTP请求达到谷歌基础设施的网络流量，为旧金山湾区的用户提供服务](assets/bsrs_1002.png)'
- en: Figure 10-2\. Web traffic, measured in HTTP requests per second, reaching Google
    infrastructure serving users in the San Francisco Bay Area when a magnitude 4.5
    earthquake hit the region on October 14, 2019
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-2。当2019年10月14日发生4.5级地震时，测量每秒HTTP请求达到谷歌基础设施的网络流量，为旧金山湾区的用户提供服务
- en: 'We addressed this “attack” with a design change: we launched a feature that
    suggests word completions as you type.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设计更改来解决这种“攻击”：我们推出了一个功能，当您输入时会建议单词完成。
- en: Client Retry Behavior
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端重试行为
- en: Some “attacks” are unintentional, and are simply caused by misbehaving software.
    If a client expects to fetch a resource from your server, and the server returns
    an error, what happens? The developer may think a retry is appropriate, leading
    to a loop if the server is still serving errors. If many clients are caught in
    this loop, the resulting demand makes recovering from the outage difficult.^([9](ch10.html#ch10fn9))
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一些“攻击”是无意的，只是由于软件的不当行为。如果客户端期望从服务器获取资源，而服务器返回错误，会发生什么？开发人员可能认为重试是合适的，如果服务器仍在提供错误，就会导致循环。如果许多客户端陷入这种循环，由此产生的需求会使从停机中恢复变得困难。^([9](ch10.html#ch10fn9))
- en: Client software should be carefully designed to avoid tight retry loops. If
    a server fails, the client may retry, but should implement exponential backoff—for
    example, doubling the wait period each time an attempt fails. This approach limits
    the number of requests to the server, but on its own is not sufficient—an outage
    can synchronize all clients, causing repeated bursts of high traffic. To avoid
    synchronous retries, each client should wait for a random duration, called *jitter*.
    At Google, we implement exponential backoff with jitter in most of our client
    software.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端软件应该被精心设计以避免紧密的重试循环。如果服务器失败，客户端可能会重试，但应该实现指数退避——例如，每次尝试失败时等待时间加倍。这种方法限制了对服务器的请求次数，但单独使用是不够的——停机会同步所有客户端，导致高流量的重复突发。为了避免同步重试，每个客户端应该等待一个随机的持续时间，称为*抖动*。在谷歌，我们在大多数客户端软件中实现了带有抖动的指数退避。
- en: 'What can you do if you don’t control the client? This is a common concern for
    people operating authoritative DNS servers. If they suffer an outage, the resulting
    retry rate from legitimate recursive DNS servers can cause a significant increase
    in traffic—often around 30x normal usage. This demand can make it difficult to
    recover from the outage and often thwarts attempts to find its root cause: operators
    may think a DDoS attack is the cause rather than a symptom. In this scenario,
    the best option is to simply answer as many requests as you can, while keeping
    the server healthy via upstream request throttling. Each successful response will
    allow a client to escape its retry loop, and the problem will soon be resolved.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不能控制客户端会怎么办？这是运营权威DNS服务器的人们的一个常见关注点。如果他们遭受停机，合法递归DNS服务器的重试率可能会导致流量显著增加——通常是正常使用量的30倍左右。这种需求会使从停机中恢复变得困难，并经常挫败找到其根本原因的尝试：运营商可能认为DDoS攻击是原因，而不是症状。在这种情况下，最好的选择是简单地回答尽可能多的请求，同时通过上游请求限流保持服务器的健康。每个成功的响应都将允许客户端摆脱其重试循环，问题很快就会得到解决。
- en: Conclusion
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Every online service should prepare for DoS attacks, even if they don’t consider
    themselves a likely target. Each organization has a limit of traffic it can absorb,
    and the defender’s task is to mitigate attacks that exceed deployed capacity in
    the most efficient way possible.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每个在线服务都应该为DoS攻击做好准备，即使他们认为自己不太可能成为目标。每个组织都有它可以吸收的流量上限，防御者的任务是以最有效的方式减轻超出部署能力的攻击。
- en: It’s important to remember the economic constraints of your DoS defenses. Simply
    absorbing an attack is rarely the most inexpensive approach. Instead, utilize
    cost-effective mitigation techniques, starting in the design phase. When under
    attack, consider all of your options, including blocking a problematic hosting
    provider (which may include a small number of real users) or suffering a short-term
    outage and explaining the situation to your users. Also remember that the “attack”
    may be unintentional.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住你的DoS防御的经济约束。简单地吸收攻击很少是最廉价的方法。相反，利用成本效益的缓解技术，从设计阶段开始。在遭受攻击时，考虑所有选项，包括阻止有问题的托管提供商（可能包括少量真实用户）或遭受短期停机并向用户解释情况。还要记住，“攻击”可能是无意的。
- en: Implementing defenses at each layer of the serving stack requires collaboration
    with several teams. For some teams, DoS defense may not be a top priority. To
    gain their support, focus on the cost savings and organizational simplifications
    a DoS mitigation system can provide. Capacity planning can focus on real user
    demand, rather than needing to absorb the largest attacks at every layer of the
    stack. Filtering known malicious requests using a web application firewall (WAF)
    allows the security team to focus on novel threats. If you discover application-level
    vulnerabilities, the same system can block exploitation attempts, allowing the
    developers team time to prepare a patch.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务堆栈的每一层实施防御措施需要与几个团队合作。对于一些团队来说，DoS防御可能不是首要任务。为了获得他们的支持，要关注DoS缓解系统可以提供的成本节约和组织简化。容量规划可以专注于真实用户需求，而不需要在堆栈的每一层吸收最大规模的攻击。使用Web应用程序防火墙（WAF）过滤已知的恶意请求，允许安全团队专注于新型威胁。如果发现应用程序级别的漏洞，同样的系统可以阻止利用尝试，让开发团队有时间准备补丁。
- en: Through careful preparation, you can determine the functionality and failure
    modes of your service on your own terms—not those of an adversary.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细的准备，你可以按照自己的条件确定服务的功能和故障模式，而不是对手的条件。
- en: ^([1](ch10.html#ch10fn1-marker)) For the sake of discussion, we’ll focus on
    the common case, where the attacker doesn’t have physical access and a backhoe
    or knowledge of a crashing bug.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.html#ch10fn1-marker)) 为了讨论的方便，我们将专注于常见情况，即攻击者没有物理接触和挖掘机，也不知道崩溃漏洞。
- en: ^([2](ch10.html#ch10fn2-marker)) Some extortionists will launch a small “demonstration
    attack” to motivate their target to pay. In nearly all cases, these attackers
    have no ability to generate a larger attack, and will not make further threats
    if their demands are ignored.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch10.html#ch10fn2-marker)) 一些勒索者会发动小规模的“示范攻击”来促使目标付款。几乎所有情况下，这些攻击者没有能力发动更大规模的攻击，如果他们的要求被忽视，他们也不会再做进一步的威胁。
- en: '^([3](ch10.html#ch10fn3-marker)) See Rossow, Christian. 2014\. “Amplification
    Hell: Revisiting Network Protocols for DDoS Abuse.” *Proceedings of the 21st Annual
    Network and Distributed System Security Symposium*. doi:10.14722/ndss.2014.23233.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '（3）参见Rossow, Christian. 2014. “Amplification Hell: Revisiting Network Protocols
    for DDoS Abuse.” *Proceedings of the 21st Annual Network and Distributed System
    Security Symposium*. doi:10.14722/ndss.2014.23233.'
- en: '^([4](ch10.html#ch10fn4-marker)) TCP-based protocols can also be exploited
    for this type of attack. For a discussion, see Kührer, Mark et al. 2014\. “Hell
    of a Handshake: Abusing TCP for Reflective Amplification DDoS Attacks.” *Proceedings
    of the 8th USENIX Workshop on Offensive Technologies*. [*https://oreil.ly/0JCPP*](https://oreil.ly/0JCPP).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '（4）基于TCP的协议也可以被利用进行这种类型的攻击。有关讨论，请参见Kührer, Mark等人。2014. “Hell of a Handshake:
    Abusing TCP for Reflective Amplification DDoS Attacks.” *Proceedings of the 8th
    USENIX Workshop on Offensive Technologies*. [*https://oreil.ly/0JCPP*](https://oreil.ly/0JCPP).'
- en: ^([5](ch10.html#ch10fn5-marker)) Stateful firewalls, which perform connection
    tracking, are best used to protect servers that originate outbound traffic.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: （5）有状态防火墙，执行连接跟踪，最适合用于保护发起出站流量的服务器。
- en: ^([6](ch10.html#ch10fn6-marker)) They may also drop traffic if the service is
    in global overload.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: （6）如果服务处于全局超载状态，它们也可能会丢弃流量。
- en: ^([7](ch10.html#ch10fn7-marker)) One of our service designs used rounded corners
    for all UI elements. In its initial form, the browser fetched images for each
    of the four corners. By changing the site to download a circle and then splitting
    the image client-side, we saved 10 million requests/day.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: （7）我们的一个服务设计为所有UI元素使用了圆角。在最初的形式中，浏览器为每个角都获取了图像。通过更改站点以下载一个圆形，然后在客户端分割图像，我们每天节省了1000万个请求。
- en: ^([8](ch10.html#ch10fn8-marker)) In a synflood attack, TCP connection requests
    are sent at a high rate, but without completing the handshake. If the receiving
    server doesn’t implement a defense mechanism, it will run out of memory to track
    all the inbound connections. A common defense is to use syncookies, which provide
    a stateless mechanism to validate new connections.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: （8）在synflood攻击中，TCP连接请求以高速发送，但不完成握手。如果接收服务器没有实施防御机制，它将耗尽内存来跟踪所有入站连接。常见的防御是使用syncookies，提供一种无状态机制来验证新连接。
- en: ^([9](ch10.html#ch10fn9-marker)) See [Chapter 22 in the SRE book](https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: （9）请参阅[SRE书中的第22章](https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/)。

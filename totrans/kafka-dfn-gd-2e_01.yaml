- en: Foreword to the First Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s an exciting time for Apache Kafka. Kafka is being used by tens of thousands
    of organizations, including over a third of the Fortune 500 companies. It’s among
    the fastest-growing open source projects and has spawned an immense ecosystem
    around it. It’s at the heart of a movement toward managing and processing streams
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: So where did Kafka come from? Why did we build it? And what exactly is it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Kafka got its start as an internal infrastructure system we built at LinkedIn.
    Our observation was really simple: there were lots of databases and other systems
    built to *store* data, but what was missing in our architecture was something
    that would help us to handle the continuous *flow* of data. Prior to building
    Kafka, we experimented with all kinds of off-the-shelf options, from messaging
    systems to log aggregation and ETL tools, but none of them gave us what we wanted.'
  prefs: []
  type: TYPE_NORMAL
- en: We eventually decided to build something from scratch. Our idea was that instead
    of focusing on holding piles of data like our relational databases, key-value
    stores, search indexes, or caches, we would focus on treating data as a continually
    evolving and ever-growing stream and build a data system—and indeed a data architecture—oriented
    around that idea.
  prefs: []
  type: TYPE_NORMAL
- en: This idea turned out to be even more broadly applicable than we expected. Though
    Kafka got its start powering real-time applications and data flow behind the scenes
    of a social network, you can now see it at the heart of next-generation architectures
    in every industry imaginable. Big retailers are reworking their fundamental business
    processes around continuous data streams, car companies are collecting and processing
    real-time data streams from internet-connected cars, and banks are rethinking
    their fundamental processes and systems around Kafka as well.
  prefs: []
  type: TYPE_NORMAL
- en: So what is this Kafka thing all about? How does it compare to the systems you
    already know and use?
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve come to think of Kafka as a *streaming platform*: a system that lets
    you publish and subscribe to streams of data, store them, and process them, and
    that is exactly what Apache Kafka is built to be. Getting used to this way of
    thinking about data might be a little different than what you’re used to, but
    it turns out to be an incredibly powerful abstraction for building applications
    and architectures. Kafka is often compared to a couple of existing technology
    categories: enterprise messaging systems, big data systems like Hadoop, and data
    integration or ETL tools. Each of these comparisons has some validity but also
    falls a little short.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kafka is like a messaging system in that it lets you publish and subscribe
    to streams of messages. In this way, it is similar to products like ActiveMQ,
    RabbitMQ, IBM’s MQSeries, and other products. But even with these similarities,
    Kafka has a number of core differences from traditional messaging systems that
    make it another kind of animal entirely. Here are the big three differences: first,
    it works as a modern distributed system that runs as a cluster and can scale to
    handle all the applications in even the most massive of companies. Rather than
    running dozens of individual messaging brokers, hand wired to different apps,
    this lets you have a central platform that can scale elastically to handle all
    the streams of data in a company. Second, Kafka is a true storage system built
    to store data for as long as you might like. This has huge advantages in using
    it as a connecting layer as it provides real delivery guarantees—its data is replicated,
    persistent, and can be kept around as long as you like. Finally, the world of
    stream processing raises the level of abstraction quite significantly. Messaging
    systems mostly just hand out messages. The stream processing capabilities in Kafka
    let you compute derived streams and datasets dynamically off of your streams with
    far less code. These differences make Kafka enough of its own thing that it doesn’t
    really make sense to think of it as “yet another queue.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another view on Kafka—and one of our motivating lenses in designing and building
    it—was to think of it as a kind of real-time version of Hadoop. Hadoop lets you
    store and periodically process file data at a very large scale. Kafka lets you
    store and continuously process streams of data, also at a large scale. At a technical
    level, there are definitely similarities, and many people see the emerging area
    of stream processing as a superset of the kind of batch processing people have
    done with Hadoop and its various processing layers. What this comparison misses
    is that the use cases that continuous, low-latency processing opens up are quite
    different from those that naturally fall on a batch processing system. Whereas
    Hadoop and big data targeted analytics applications, often in the data warehousing
    space, the low-latency nature of Kafka makes it applicable for the kind of core
    applications that directly power a business. This makes sense: events in a business
    are happening all the time, and the ability to react to them as they occur makes
    it much easier to build services that directly power the operation of the business,
    feed back into customer experiences, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The final area Kafka gets compared to is ETL or data integration tools. After
    all, these tools move data around, and Kafka moves data around. There is some
    validity to this as well, but I think the core difference is that Kafka has inverted
    the problem. Rather than a tool for scraping data out of one system and inserting
    it into another, Kafka is a platform oriented around real-time streams of events.
    This means that not only can it connect off-the-shelf applications and data systems,
    it can also power custom applications built to trigger off of these same data
    streams. We think this architecture centered around streams of events is a really
    important thing. In some ways these flows of data are the most central aspect
    of a modern digital company, as important as the cash flows you’d see in a financial
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to combine these three areas—to bring all the streams of data together
    across all the use cases—is what makes the idea of a streaming platform so appealing
    to people.
  prefs: []
  type: TYPE_NORMAL
- en: Still, all of this is a bit different, and learning how to think and build applications
    oriented around continuous streams of data is quite a mindshift if you are coming
    from the world of request/response-style applications and relational databases.
    This book is absolutely the best way to learn about Kafka, from internals to APIs,
    written by some of the people who know it best. I hope you enjoy reading it as
    much as I have!
  prefs: []
  type: TYPE_NORMAL
- en: Jay Kreps
  prefs: []
  type: TYPE_NORMAL
- en: Cofounder and CEO at Confluent
  prefs: []
  type: TYPE_NORMAL

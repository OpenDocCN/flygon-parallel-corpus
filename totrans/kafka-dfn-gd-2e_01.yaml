- en: Foreword to the First Edition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《第一版前言》
- en: It’s an exciting time for Apache Kafka. Kafka is being used by tens of thousands
    of organizations, including over a third of the Fortune 500 companies. It’s among
    the fastest-growing open source projects and has spawned an immense ecosystem
    around it. It’s at the heart of a movement toward managing and processing streams
    of data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Kafka现在是一个令人兴奋的时刻。Kafka被成千上万的组织使用，包括三分之一的财富500强公司。它是增长最快的开源项目之一，并在其周围产生了庞大的生态系统。它是处理和管理数据流的核心。
- en: So where did Kafka come from? Why did we build it? And what exactly is it?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Kafka是从哪里来的？我们为什么要构建它？它到底是什么？
- en: 'Kafka got its start as an internal infrastructure system we built at LinkedIn.
    Our observation was really simple: there were lots of databases and other systems
    built to *store* data, but what was missing in our architecture was something
    that would help us to handle the continuous *flow* of data. Prior to building
    Kafka, we experimented with all kinds of off-the-shelf options, from messaging
    systems to log aggregation and ETL tools, but none of them gave us what we wanted.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka最初是我们在LinkedIn构建的内部基础设施系统。我们的观察非常简单：有很多数据库和其他系统用于*存储*数据，但在我们的架构中缺少的是能帮助我们处理连续*流*数据的东西。在构建Kafka之前，我们尝试过各种现成的选项，从消息传递系统到日志聚合和ETL工具，但没有一个能给我们想要的东西。
- en: We eventually decided to build something from scratch. Our idea was that instead
    of focusing on holding piles of data like our relational databases, key-value
    stores, search indexes, or caches, we would focus on treating data as a continually
    evolving and ever-growing stream and build a data system—and indeed a data architecture—oriented
    around that idea.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终决定从零开始构建一些东西。我们的想法是，我们不会像关系数据库、键值存储、搜索索引或缓存那样专注于保存大量数据，而是会把数据视为不断发展和不断增长的流，并构建一个围绕这个想法的数据系统，确实是一个数据架构。
- en: This idea turned out to be even more broadly applicable than we expected. Though
    Kafka got its start powering real-time applications and data flow behind the scenes
    of a social network, you can now see it at the heart of next-generation architectures
    in every industry imaginable. Big retailers are reworking their fundamental business
    processes around continuous data streams, car companies are collecting and processing
    real-time data streams from internet-connected cars, and banks are rethinking
    their fundamental processes and systems around Kafka as well.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法的适用范围比我们预期的要广泛得多。尽管Kafka最初是用于支持社交网络背后的实时应用程序和数据流，但现在你可以看到它成为各行各业下一代架构的核心。大型零售商正在围绕持续的数据流重新制定他们的基本业务流程，汽车公司正在收集和处理来自互联网汽车的实时数据流，银行也正在围绕Kafka重新思考他们的基本流程和系统。
- en: So what is this Kafka thing all about? How does it compare to the systems you
    already know and use?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Kafka到底是什么？它与你已经了解和使用的系统有什么不同呢？
- en: 'We’ve come to think of Kafka as a *streaming platform*: a system that lets
    you publish and subscribe to streams of data, store them, and process them, and
    that is exactly what Apache Kafka is built to be. Getting used to this way of
    thinking about data might be a little different than what you’re used to, but
    it turns out to be an incredibly powerful abstraction for building applications
    and architectures. Kafka is often compared to a couple of existing technology
    categories: enterprise messaging systems, big data systems like Hadoop, and data
    integration or ETL tools. Each of these comparisons has some validity but also
    falls a little short.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始把Kafka看作是一个*流平台*：一个让你发布和订阅数据流、存储它们并处理它们的系统，这正是Apache Kafka的构建目标。习惯这种关于数据的思维方式可能与你习惯的有些不同，但事实证明，这是构建应用程序和架构的一种非常强大的抽象。Kafka经常与几个现有的技术类别进行比较：企业消息传递系统、大数据系统如Hadoop以及数据集成或ETL工具。每种比较都有一定的有效性，但也有些不足。
- en: 'Kafka is like a messaging system in that it lets you publish and subscribe
    to streams of messages. In this way, it is similar to products like ActiveMQ,
    RabbitMQ, IBM’s MQSeries, and other products. But even with these similarities,
    Kafka has a number of core differences from traditional messaging systems that
    make it another kind of animal entirely. Here are the big three differences: first,
    it works as a modern distributed system that runs as a cluster and can scale to
    handle all the applications in even the most massive of companies. Rather than
    running dozens of individual messaging brokers, hand wired to different apps,
    this lets you have a central platform that can scale elastically to handle all
    the streams of data in a company. Second, Kafka is a true storage system built
    to store data for as long as you might like. This has huge advantages in using
    it as a connecting layer as it provides real delivery guarantees—its data is replicated,
    persistent, and can be kept around as long as you like. Finally, the world of
    stream processing raises the level of abstraction quite significantly. Messaging
    systems mostly just hand out messages. The stream processing capabilities in Kafka
    let you compute derived streams and datasets dynamically off of your streams with
    far less code. These differences make Kafka enough of its own thing that it doesn’t
    really make sense to think of it as “yet another queue.”'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka就像一个消息系统，它让你发布和订阅消息流。在这方面，它类似于ActiveMQ、RabbitMQ、IBM的MQSeries和其他产品。但即使有这些相似之处，Kafka与传统消息系统有一些核心区别，使它成为另一种完全不同的动物。以下是三个重大区别：首先，它作为一个现代分布式系统运行，作为一个集群，并且可以扩展以处理即使是最庞大的公司中的所有应用程序。与运行数十个个体消息代理不同，手动连接到不同的应用程序，这让你拥有一个可以弹性扩展以处理公司中所有数据流的中央平台。其次，Kafka是一个真正的存储系统，可以存储数据，时间长短由你决定。这在使用它作为连接层时有巨大优势，因为它提供了真正的传递保证——它的数据是复制的、持久的，并且可以保存多长时间都可以。最后，流处理的世界显著提高了抽象级别。消息系统主要只是分发消息。Kafka中的流处理功能让你可以使用更少的代码动态计算派生流和数据集。这些差异使Kafka成为自己的东西，所以把它看作“又一个队列”并不是很有意义。
- en: 'Another view on Kafka—and one of our motivating lenses in designing and building
    it—was to think of it as a kind of real-time version of Hadoop. Hadoop lets you
    store and periodically process file data at a very large scale. Kafka lets you
    store and continuously process streams of data, also at a large scale. At a technical
    level, there are definitely similarities, and many people see the emerging area
    of stream processing as a superset of the kind of batch processing people have
    done with Hadoop and its various processing layers. What this comparison misses
    is that the use cases that continuous, low-latency processing opens up are quite
    different from those that naturally fall on a batch processing system. Whereas
    Hadoop and big data targeted analytics applications, often in the data warehousing
    space, the low-latency nature of Kafka makes it applicable for the kind of core
    applications that directly power a business. This makes sense: events in a business
    are happening all the time, and the ability to react to them as they occur makes
    it much easier to build services that directly power the operation of the business,
    feed back into customer experiences, and so on.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对Kafka的另一种看法——也是我们在设计和构建时的动力之一——是将其视为Hadoop的实时版本。Hadoop允许你以非常大的规模存储和定期处理文件数据。Kafka允许你以同样大的规模存储和持续处理数据流。在技术层面上，确实存在相似之处，许多人认为流处理的新兴领域是对人们使用Hadoop及其各种处理层进行的批处理的超集。这种比较忽略了连续、低延迟处理开放的用例与自然落在批处理系统上的用例是完全不同的。Hadoop和大数据针对的是分析应用程序，通常是在数据仓库领域，而Kafka的低延迟特性使其适用于直接支持业务的核心应用程序。这是有道理的：企业中的事件一直在发生，能够在事件发生时对其做出反应，使得构建直接支持业务运营、反馈客户体验等服务变得更加容易。
- en: The final area Kafka gets compared to is ETL or data integration tools. After
    all, these tools move data around, and Kafka moves data around. There is some
    validity to this as well, but I think the core difference is that Kafka has inverted
    the problem. Rather than a tool for scraping data out of one system and inserting
    it into another, Kafka is a platform oriented around real-time streams of events.
    This means that not only can it connect off-the-shelf applications and data systems,
    it can also power custom applications built to trigger off of these same data
    streams. We think this architecture centered around streams of events is a really
    important thing. In some ways these flows of data are the most central aspect
    of a modern digital company, as important as the cash flows you’d see in a financial
    statement.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka最后被比较的领域是ETL或数据集成工具。毕竟，这些工具移动数据，而Kafka也移动数据。这也有一定的合理性，但我认为核心区别在于Kafka颠倒了问题。Kafka不是一个用于从一个系统中抓取数据并将其插入另一个系统的工具，而是一个围绕实时事件流的平台。这意味着它不仅可以连接现成的应用程序和数据系统，还可以为基于这些数据流触发的自定义应用程序提供动力。我们认为围绕事件流的这种架构是非常重要的。在某种程度上，这些数据流与现代数字公司最核心的方面一样重要，就像财务报表中看到的现金流一样重要。
- en: The ability to combine these three areas—to bring all the streams of data together
    across all the use cases—is what makes the idea of a streaming platform so appealing
    to people.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将这三个领域结合起来，将所有用例中的所有数据流汇聚在一起的能力，使得流平台的概念对人们非常有吸引力。
- en: Still, all of this is a bit different, and learning how to think and build applications
    oriented around continuous streams of data is quite a mindshift if you are coming
    from the world of request/response-style applications and relational databases.
    This book is absolutely the best way to learn about Kafka, from internals to APIs,
    written by some of the people who know it best. I hope you enjoy reading it as
    much as I have!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，所有这些都有点不同，学习如何思考和构建围绕持续数据流的应用程序，如果你来自请求/响应式应用程序和关系数据库的世界，这是一个相当大的思维转变。这本书绝对是了解Kafka的最佳途径，从内部到API，由一些最了解它的人撰写。我希望你和我一样享受阅读它！
- en: Jay Kreps
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Jay Kreps
- en: Cofounder and CEO at Confluent
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Confluent联合创始人兼首席执行官

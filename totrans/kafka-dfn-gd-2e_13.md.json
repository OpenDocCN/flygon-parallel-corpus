["```java\nlisteners=EXTERNAL://:9092,INTERNAL://10.0.0.2:9093,BROKER://10.0.0.2:9094\nadvertised.listeners=EXTERNAL://broker1.example.com:9092,INTERNAL://broker1.local:9093,BROKER://broker1.local:9094\nlistener.security.protocol.map=EXTERNAL:SASL_SSL,INTERNAL:SSL,BROKER:SSL\ninter.broker.listener.name=BROKER\n```", "```java\nsecurity.protocol=SASL_SSL\nbootstrap.servers=broker1.example.com:9092,broker2.example.com:9092\n```", "```java\n$keytool-genkeypair-keyalgRSA-keysize2048-keystoreserver.ca.p12\\\n -storetype PKCS12 -storepass server-ca-password -keypass server-ca-password  \\ -alias ca -dname \"CN=BrokerCA\" -ext bc=ca:true -validity 365 ![1](assets/1.png)$keytool-export-fileserver.ca.crt-keystoreserver.ca.p12\\\n -storetype PKCS12 -storepass server-ca-password -alias ca -rfc ![2](assets/2.png)\n```", "```java\n$keytool-genkey-keyalgRSA-keysize2048-keystoreserver.ks.p12\\\n -storepass server-ks-password -keypass server-ks-password -alias server   \\ -storetype PKCS12 -dname \"CN=Kafka,O=Confluent,C=GB\" -validity 365 ![1](assets/1.png)$keytool-certreq-fileserver.csr-keystoreserver.ks.p12-storetypePKCS12\\\n -storepass server-ks-password -keypass server-ks-password -alias server ![2](assets/2.png)$keytool-gencert-infileserver.csr-outfileserver.crt\\\n -keystore server.ca.p12 -storetype PKCS12 -storepass server-ca-password   \\ -alias ca -ext SAN=DNS:broker1.example.com -validity 365 ![3](assets/3.png)$catserver.crtserver.ca.crt>serverchain.crt$keytool-importcert-fileserverchain.crt-keystoreserver.ks.p12\\\n -storepass server-ks-password -keypass server-ks-password -alias server   \\ -storetype PKCS12 -noprompt ![4](assets/4.png)\n```", "```java\n$ keytool -import -file server.ca.crt -keystore server.ts.p12 \\\n -storetype PKCS12 -storepass server-ts-password -alias server -noprompt\n```", "```java\n$ keytool -import -file server.ca.crt -keystore client.ts.p12 \\\n -storetype PKCS12 -storepass client-ts-password -alias ca -noprompt\n```", "```java\n#Generateself-signedCAkey-pairforclientskeytool -genkeypair -keyalg RSA -keysize 2048 -keystore client.ca.p12         \\\n -storetype PKCS12 -storepass client-ca-password -keypass client-ca-password \\ -alias ca -dname CN=ClientCA -ext bc=ca:true -validity 365 ![1](assets/1.png)keytool -export -file client.ca.crt -keystore client.ca.p12  -storetype PKCS12 \\\n -storepass client-ca-password -alias ca -rfc #Createkeystoreforclientskeytool -genkey -keyalg RSA -keysize 2048 -keystore client.ks.p12           \\\n -storepass client-ks-password -keypass client-ks-password -alias client   \\ -storetype PKCS12 -dname \"CN=Metrics App,O=Confluent,C=GB\" -validity 365 ![2](assets/2.png)keytool -certreq -file client.csr -keystore client.ks.p12 -storetype PKCS12 \\\n -storepass client-ks-password -keypass client-ks-password -alias client keytool -gencert -infile client.csr -outfile client.crt                     \\\n -keystore client.ca.p12 -storetype PKCS12 -storepass client-ca-password   \\ -alias ca -validity 365 cat client.crt client.ca.crt > clientchain.crt keytool -importcert -file clientchain.crt -keystore client.ks.p12           \\\n -storepass client-ks-password -keypass client-ks-password -alias client   \\ -storetype PKCS12 -noprompt ![3](assets/3.png)#AddclientCAcertificatetobroker'struststorekeytool -import -file client.ca.crt -keystore server.ts.p12 -alias client \\\n -storetype PKCS12 -storepass server-ts-password -noprompt ![4](assets/4.png)\n```", "```java\nssl.keystore.location=/path/to/server.ks.p12\nssl.keystore.password=server-ks-password\nssl.key.password=server-ks-password\nssl.keystore.type=PKCS12\nssl.truststore.location=/path/to/server.ts.p12\nssl.truststore.password=server-ts-password\nssl.truststore.type=PKCS12\nssl.client.auth=required\n```", "```java\nssl.truststore.location=/path/to/client.ts.p12\nssl.truststore.password=client-ts-password\nssl.truststore.type=PKCS12\nssl.keystore.location=/path/to/client.ks.p12\nssl.keystore.password=client-ks-password\nssl.key.password=client-ks-password\nssl.keystore.type=PKCS12\n```", "```java\n$ bin/kafka-configs.sh --bootstrap-server localhost:9092     \\\n --command-config admin.props                               \\\n --entity-type brokers --entity-name 0 --alter --add-config \\\n 'listener.name.external.ssl.keystore.location=/path/to/server.ks.p12'\n```", "```java\nsasl.enabled.mechanisms=GSSAPI\nlistener.name.external.gssapi.sasl.jaas.config=\\ ![1](assets/1.png)\n  com.sun.security.auth.module.Krb5LoginModule required \\\n    useKeyTab=true storeKey=true     \\\n    keyTab=\"/path/to/broker1.keytab\" \\ ![2](assets/2.png)\n    principal=\"kafka/broker1.example.com@EXAMPLE.COM\"; ![3](assets/3.png)\n```", "```java\nsasl.mechanism.inter.broker.protocol=GSSAPI\nsasl.kerberos.service.name=kafka\n```", "```java\nsasl.mechanism=GSSAPI\nsasl.kerberos.service.name=kafka ![1](assets/1.png)\nsasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \\\n    useKeyTab=true storeKey=true   \\\n    keyTab=\"/path/to/alice.keytab\" \\\n    principal=\"Alice@EXAMPLE.COM\"; ![2](assets/2.png)\n```", "```java\nsasl.enabled.mechanisms=PLAIN\nsasl.mechanism.inter.broker.protocol=PLAIN\nlistener.name.external.plain.sasl.jaas.config=\\\n  org.apache.kafka.common.security.plain.PlainLoginModule required \\\n    username=\"kafka\" password=\"kafka-password\" \\ ![1](assets/1.png)\n    user_kafka=\"kafka-password\" \\\n    user_Alice=\"Alice-password\"; ![2](assets/2.png)\n```", "```java\nsasl.mechanism=PLAIN\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule \\\n    required username=\"Alice\" password=\"Alice-password\";\n```", "```java\npublicclassPasswordVerifierextendsPlainServerCallbackHandler{privatefinalList<String>passwdFiles=newArrayList<>();![1](assets/1.png)@Overridepublicvoidconfigure(Map<String,?>configs,Stringmechanism,List<AppConfigurationEntry>jaasEntries){Map<String,?>loginOptions=jaasEntries.get(0).getOptions();Stringfiles=(String)loginOptions.get(\"password.files\");![2](assets/2.png)Collections.addAll(passwdFiles,files.split(\",\"));}@Overrideprotectedbooleanauthenticate(Stringuser,char[]password){returnpasswdFiles.stream()![3](assets/3.png).anyMatch(file->authenticate(file,user,password));}privatebooleanauthenticate(Stringfile,Stringuser,char[]password){try{Stringcmd=String.format(\"htpasswd -vb %s %s %s\",![4](assets/4.png)file,user,newString(password));returnRuntime.getRuntime().exec(cmd).waitFor()==0;}catch(Exceptione){returnfalse;}}}\n```", "```java\nlistener.name.external.plain.sasl.jaas.config=\\\n    org.apache.kafka.common.security.plain.PlainLoginModule required \\\n    password.files=\"/path/to/htpassword.props,/path/to/oldhtpassword.props\";\nlistener.name.external.plain.sasl.server.callback.handler.class=\\\n    com.example.PasswordVerifier\n```", "```java\n@Overridepublicvoidhandle(Callback[]callbacks)throwsIOException{Propertiesprops=Utils.loadProps(passwdFile);![1](assets/1.png)PasswordConfigconfig=newPasswordConfig(props);Stringuser=config.getString(\"username\");Stringpassword=config.getPassword(\"password\").value();![2](assets/2.png)for(Callbackcallback:callbacks){if(callbackinstanceofNameCallback)((NameCallback)callback).setName(user);elseif(callbackinstanceofPasswordCallback){((PasswordCallback)callback).setPassword(password.toCharArray());}}}privatestaticclassPasswordConfigextendsAbstractConfig{staticConfigDefCONFIG=newConfigDef().define(\"username\",STRING,HIGH,\"User name\").define(\"password\",PASSWORD,HIGH,\"User password\");![3](assets/3.png)PasswordConfig(Propertiesprops){super(CONFIG,props,false);}}\n```", "```java\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule \\\n  required file=\"/path/to/credentials.props\";\nsasl.client.callback.handler.class=com.example.PasswordProvider\n```", "```java\n$ bin/kafka-configs.sh --zookeeper localhost:2181 --alter --add-config \\\n 'SCRAM-SHA-512=[iterations=8192,password=Alice-password]'            \\\n --entity-type users --entity-name Alice\n```", "```java\nsasl.enabled.mechanisms=SCRAM-SHA-512\nsasl.mechanism.inter.broker.protocol=SCRAM-SHA-512\nlistener.name.external.scram-sha-512.sasl.jaas.config=\\\n  org.apache.kafka.common.security.scram.ScramLoginModule required \\\n    username=\"kafka\" password=\"kafka-password\"; ![1](assets/1.png)\n```", "```java\nsasl.mechanism=SCRAM-SHA-512\nsasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule \\\n  required username=\"Alice\" password=\"Alice-password\";\n```", "```java\n$ bin/kafka-configs.sh --zookeeper localhost:2181 --alter --delete-config \\\n  'SCRAM-SHA-512' --entity-type users --entity-name Alice\n```", "```java\nsasl.enabled.mechanisms=OAUTHBEARER\nsasl.mechanism.inter.broker.protocol=OAUTHBEARER\nlistener.name.external.oauthbearer.sasl.jaas.config=\\\n  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule \\\n    required unsecuredLoginStringClaim_sub=\"kafka\"; ![1](assets/1.png)\n```", "```java\nsasl.mechanism=OAUTHBEARER\nsasl.jaas.config=\\\n  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule \\\n    required unsecuredLoginStringClaim_sub=\"Alice\"; ![1](assets/1.png)\n```", "```java\n@Overridepublicvoidhandle(Callback[]callbacks)throwsUnsupportedCallbackException{OAuthBearerTokentoken=null;for(Callbackcallback:callbacks){if(callbackinstanceofOAuthBearerTokenCallback){token=acquireToken();![1](assets/1.png)((OAuthBearerTokenCallback)callback).token(token);}elseif(callbackinstanceofSaslExtensionsCallback){![2](assets/2.png)((SaslExtensionsCallback)callback).extensions(processExtensions(token));}elsethrownewUnsupportedCallbackException(callback);}}\n```", "```java\n@Overridepublicvoidhandle(Callback[]callbacks)throwsUnsupportedCallbackException{for(Callbackcallback:callbacks){if(callbackinstanceofOAuthBearerValidatorCallback){OAuthBearerValidatorCallbackcb=(OAuthBearerValidatorCallback)callback;try{cb.token(validatedToken(cb.tokenValue()));![1](assets/1.png)}catch(OAuthBearerIllegalTokenExceptione){OAuthBearerValidationResultr=e.reason();cb.error(errorStatus(r),r.failureScope(),r.failureOpenIdConfig());}}elseif(callbackinstanceofOAuthBearerExtensionsValidatorCallback){OAuthBearerExtensionsValidatorCallbackecb=(OAuthBearerExtensionsValidatorCallback)callback;ecb.inputExtensions().map().forEach((k,v)->ecb.valid(validateExtension(k,v)));![2](assets/2.png)}else{thrownewUnsupportedCallbackException(callback);}}}\n```", "```java\n$bin/kafka-delegation-tokens.sh--bootstrap-serverlocalhost:9092\\\n --command-config admin.props --create --max-life-time-period -1  \\ --renewer-principal User:Bob ![1](assets/1.png)$bin/kafka-delegation-tokens.sh--bootstrap-serverlocalhost:9092\\ ![2](assets/2.png) --command-config admin.props --renew --renew-time-period -1 --hmac c2VjcmV0\n```", "```java\nsasl.mechanism=SCRAM-SHA-512\nsasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule \\\n  required tokenauth=\"true\" username=\"MTIz\" password=\"c2VjcmV0\"; ![1](assets/1.png)\n```", "```java\nauthorizer.class.name=kafka.security.authorizer.AclAuthorizer\n```", "```java\nUser:Alice has Allow permission for Write to Prefixed Topic:customer from 192.168.0.1\n```", "```java\n$bin/kafka-acls.sh--add--cluster--operationClusterAction\\\n --authorizer-properties zookeeper.connect=localhost:2181    \\ ![1](assets/1.png) --allow-principal User:kafka $bin/kafka-acls.sh--bootstrap-serverlocalhost:9092\\\n --command-config admin.props --add --topic customerOrders \\ ![2](assets/2.png) --producer --allow-principal User:Alice $bin/kafka-acls.sh--bootstrap-serverlocalhost:9092\\\n --command-config admin.props --add --resource-pattern-type PREFIXED \\ ![3](assets/3.png) --topic customer --operation Read --allow-principal User:Bob\n```", "```java\nsuper.users=User:Carol;User:Admin\nallow.everyone.if.no.acl.found=true\n```", "```java\npublicclassCustomAuthorizerextendsAclAuthorizer{privatestaticfinalSet<Short>internalOps=Utils.mkSet(CREATE_ACLS.id,DELETE_ACLS.id);privatestaticfinalStringinternalListener=\"INTERNAL\";@OverridepublicList<AuthorizationResult>authorize(AuthorizableRequestContextcontext,List<Action>actions){if(!context.listenerName().equals(internalListener)&&![1](assets/1.png)internalOps.contains((short)context.requestType()))returnCollections.nCopies(actions.size(),DENIED);elsereturnsuper.authorize(context,actions);![2](assets/2.png)}}\n```", "```java\nclassRbacAuthorizerextendsAclAuthorizer{@volatileprivatevargroups=Map.empty[KafkaPrincipal,Set[KafkaPrincipal]].withDefaultValue(Set.empty)![1](assets/1.png)@volatileprivatevarroles=Map.empty[KafkaPrincipal,Set[KafkaPrincipal]].withDefaultValue(Set.empty)![2](assets/2.png)overridedefauthorize(context:AuthorizableRequestContext,actions:util.List[Action]):util.List[AuthorizationResult]={valprincipals=groups(context.principal)+context.principalvalallPrincipals=principals.flatMap(roles)++principals![3](assets/3.png)valcontexts=allPrincipals.map(authorizeContext(context,_))actions.asScala.map{action=>valauthorized=contexts.exists(super.authorize(_,List(action).asJava).get(0)==ALLOWED)if(authorized)ALLOWEDelseDENIED![4](assets/4.png)}.asJava}privatedefauthorizeContext(context:AuthorizableRequestContext,contextPrincipal:KafkaPrincipal):AuthorizableRequestContext={newAuthorizableRequestContext{![5](assets/5.png)overridedefprincipal()=contextPrincipaloverridedefclientId()=context.clientIdoverridedefrequestType()=context.requestTypeoverridedefrequestVersion()=context.requestVersionoverridedefcorrelationId()=context.correlationIdoverridedefsecurityProtocol()=context.securityProtocoloverridedeflistenerName()=context.listenerNameoverridedefclientAddress()=context.clientAddress}}}\n```", "```java\n$bin/kafka-acls.sh--bootstrap-serverlocalhost:9092\\\n --command-config admin.props --add --topic customer --producer \\ --resource-pattern-type PREFIXED --allow-principal Group:Sales ![1](assets/1.png)$bin/kafka-acls.sh--bootstrap-serverlocalhost:9092\\\n --command-config admin.props --add --cluster --operation Alter \\ --allow-principal=Role:Operator ![2](assets/2.png)\n```", "```java\nDEBUG Principal = User:Alice is Allowed Operation = Write from host = 127.0.0.1 on resource = Topic:LITERAL:customerOrders for request = Produce with resourceRefCount = 1 (kafka.authorizer.logger)\nINFO Principal = User:Mallory is Denied Operation = Describe from host = 10.0.0.13 on resource = Topic:LITERAL:customerOrders for request = Metadata with resourceRefCount = 1 (kafka.authorizer.logger)\n```", "```java\nDEBUG Completed request:RequestHeader(apiKey=PRODUCE, apiVersion=8, clientId=producer-1, correlationId=6) -- {acks=-1,timeout=30000,partitionSizes=[customerOrders-0=15514]},response:{responses=[{topic=customerOrders,partition_responses=[{partition=0,error_code=0,base_offset=13,log_append_time=-1,log_start_offset=0,record_errors=[],error_message=null}]}],throttle_time_ms=0} from connection 127.0.0.1:9094-127.0.0.1:61040-0;totalTime:2.42,requestQueueTime:0.112,localTime:2.15,remoteTime:0.0,throttleTime:0,responseQueueTime:0.04,sendTime:0.118,securityProtocol:SASL_SSL,principal:User:Alice,listener:SASL_SSL,clientInformation:ClientInformation(softwareName=apache-kafka-java, softwareVersion=2.7.0-SNAPSHOT) (kafka.request.logger)\n```", "```java\nServer {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true storeKey=true\n  keyTab=\"/path/to/zk.keytab\"\n  principal=\"zookeeper/zk1.example.com@EXAMPLE.COM\";\n};\n```", "```java\nauthProvider.sasl=org.apache.zookeeper.server.auth.SASLAuthenticationProvider\nkerberos.removeHostFromPrincipal=true\nkerberos.removeRealmFromPrincipal=true\n```", "```java\nClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true storeKey=true\n  keyTab=\"/path/to/broker1.keytab\"\n  principal=\"kafka/broker1.example.com@EXAMPLE.COM\";\n};\n```", "```java\nsecureClientPort=2181\nserverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory\nauthProvider.x509=org.apache.zookeeper.server.auth.X509AuthenticationProvider\nssl.keyStore.location=/path/to/zk.ks.p12\nssl.keyStore.password=zk-ks-password\nssl.keyStore.type=PKCS12\nssl.trustStore.location=/path/to/zk.ts.p12\nssl.trustStore.password=zk-ts-password\nssl.trustStore.type=PKCS12\n```", "```java\nzookeeper.ssl.client.enable=true\nzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty\nzookeeper.ssl.keystore.location=/path/to/zkclient.ks.p12\nzookeeper.ssl.keystore.password=zkclient-ks-password\nzookeeper.ssl.keystore.type=PKCS12\nzookeeper.ssl.truststore.location=/path/to/zkclient.ts.p12\nzookeeper.ssl.truststore.password=zkclient-ts-password\nzookeeper.ssl.truststore.type=PKCS12\n```", "```java\npublicclassGpgProviderimplementsConfigProvider{@Overridepublicvoidconfigure(Map<String,?>configs){}@OverridepublicConfigDataget(Stringpath){try{Stringpassphrase=System.getenv(\"PASSPHRASE\");![1](assets/1.png)Stringdata=Shell.execCommand(![2](assets/2.png)\"gpg\",\"--decrypt\",\"--passphrase\",passphrase,path);Propertiesprops=newProperties();props.load(newStringReader(data));![3](assets/3.png)Map<String,String>map=newHashMap<>();for(Stringname:props.stringPropertyNames())map.put(name,props.getProperty(name));returnnewConfigData(map);}catch(IOExceptione){thrownewRuntimeException(e);![4](assets/4.png)}}@OverridepublicConfigDataget(Stringpath,Set<String>keys){![5](assets/5.png)ConfigDataconfigData=get(path);Map<String,String>data=configData.data().entrySet().stream().filter(e->keys.contains(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));returnnewConfigData(data,configData.ttl());}@Overridepublicvoidclose(){}}\n```", "```java\ngpg --symmetric --output credentials.props.gpg \\\n --passphrase \"$PASSPHRASE\" credentials.props\n```", "```java\nusername=${gpg:/path/to/credentials.props.gpg:username}\npassword=${gpg:/path/to/credentials.props.gpg:password}\nconfig.providers=gpg\nconfig.providers.gpg.class=com.example.GpgProvider\n```", "```java\n$ bin/kafka-configs.sh --zookeeper localhost:2181 --alter \\\n --entity-type brokers --entity-name 0 --add-config      \\\n 'listener.name.external.ssl.keystore.password=server-ks-password,password.encoder.secret=encoder-secret'\n```"]
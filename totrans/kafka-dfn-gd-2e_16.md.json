["```java\npublic class WordCountExample {\n\n    public static void main(String[] args) throws Exception{\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG,\n          \"wordcount\"); ![1](assets/1.png)\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,\n          \"localhost:9092\"); ![2](assets/2.png)\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,\n          Serdes.String().getClass().getName()); ![3](assets/3.png)\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,\n          Serdes.String().getClass().getName());\n```", "```java\nStreamsBuilder builder = new StreamsBuilder(); ![1](assets/1.png)\n\nKStream<String, String> source =\n  builder.stream(\"wordcount-input\");\n\nfinal Pattern pattern = Pattern.compile(\"\\\\W+\");\n\nKStream<String, String> counts  = source.flatMapValues(value->\n  Arrays.asList(pattern.split(value.toLowerCase()))) ![2](assets/2.png)\n        .map((key, value) -> new KeyValue<String,\n           String>(value, value))\n        .filter((key, value) -> (!value.equals(\"the\"))) ![3](assets/3.png)\n        .groupByKey() ![4](assets/4.png)\n        .count().mapValues(value->\n           Long.toString(value)).toStream();![5](assets/5.png)\ncounts.to(\"wordcount-output\"); ![6](assets/6.png)\n```", "```java\nKafkaStreams streams = new KafkaStreams(builder.build(), props); ![1](assets/1.png)\n\nstreams.start(); ![2](assets/2.png)\n\n// usually the stream application would be running forever,\n// in this example we just let it run for some time and stop\nThread.sleep(5000L);\n\nstreams.close(); ![3](assets/3.png)\n```", "```java\nProperties props = new Properties();\nprops.put(StreamsConfig.APPLICATION_ID_CONFIG, \"stockstat\");\nprops.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, Constants.BROKER);\nprops.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,\n  Serdes.String().getClass().getName());\nprops.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,\n  TradeSerde.class.getName());\n```", "```java\nstatic public final class TradeSerde extends WrapperSerde<Trade> {\n    public TradeSerde() {\n        super(new JsonSerializer<Trade>(),\n          new JsonDeserializer<Trade>(Trade.class));\n    }\n}\n```", "```java\nKStream<Windowed<String>, TradeStats> stats = source\n    .groupByKey() ![1](assets/1.png)\n    .windowedBy(TimeWindows.of(Duration.ofMillis(windowSize))\n                           .advanceBy(Duration.ofSeconds(1))) ![2](assets/2.png)\n    .aggregate( ![3](assets/3.png)\n        () -> new TradeStats(),\n        (k, v, tradestats) -> tradestats.add(v), ![4](assets/4.png)\n        Materialized.<String, TradeStats, WindowStore<Bytes, byte[]>>\n            as(\"trade-aggregates\") ![5](assets/5.png)\n           .withValueSerde(new TradeStatsSerde())) ![6](assets/6.png)\n    .toStream() ![7](assets/7.png)\n    .mapValues((trade) -> trade.computeAvgPrice()); ![8](assets/8.png)\n\nstats.to(\"stockstats-output\",\n    Produced.keySerde(\n      WindowedSerdes.timeWindowedSerdeFrom(String.class, windowSize))); ![9](assets/9.png)\n```", "```java\nKStream<Integer, PageView> views =\n    builder.stream(Constants.PAGE_VIEW_TOPIC,\n      Consumed.with(Serdes.Integer(), new PageViewSerde())); ![1](assets/1.png)\nKStream<Integer, Search> searches =\n    builder.stream(Constants.SEARCH_TOPIC,\n      Consumed.with(Serdes.Integer(), new SearchSerde()));\nKTable<Integer, UserProfile> profiles =\n    builder.table(Constants.USER_PROFILE_TOPIC,\n      Consumed.with(Serdes.Integer(), new ProfileSerde())); ![2](assets/2.png)\n\nKStream<Integer, UserActivity> viewsWithProfile = views.leftJoin(profiles, ![3](assets/3.png)\n                (page, profile) -> {\n                    if (profile != null)\n                        return new UserActivity(\n                          profile.getUserID(), profile.getUserName(),\n                          profile.getZipcode(), profile.getInterests(),\n                          \"\", page.getPage()); ![4](assets/4.png)\n                    else\n                       return new UserActivity(\n                         -1, \"\", \"\", null, \"\", page.getPage());\n                    });\n\nKStream<Integer, UserActivity> userActivityKStream =\n    viewsWithProfile.leftJoin(searches, ![5](assets/5.png)\n      (userActivity, search) -> {\n          if (search != null)\n              userActivity.updateSearch(search.getSearchTerms()); ![6](assets/6.png)\n          else\n              userActivity.updateSearch(\"\");\n          return userActivity;\n      },\n      JoinWindows.of(Duration.ofSeconds(1)).before(Duration.ofSeconds(0)),  ![7](assets/7.png)\n                    StreamJoined.with(Serdes.Integer(),  ![8](assets/8.png)\n                                      new UserActivitySerde(),\n                                      new SearchSerde()));\n```"]
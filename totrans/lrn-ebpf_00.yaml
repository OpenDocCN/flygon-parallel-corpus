- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the cloud native community and beyond, eBPF has become one of the hottest
    technical topics of recent years. A new generation of [powerful tools and projects](https://ebpf.io/applications)
    in networking, security, observability, and more have been built (and more continue
    to be created) using eBPF as a platform, offering better performance and accuracy
    compared to their predecessors. eBPF-related conferences such as the [eBPF Summit](https://ebpf.io/summit-2022)
    and [Cloud Native eBPF Day](https://oreil.ly/q9-p3) have attracted thousands of
    attendees and viewers, and at the time of this writing, the [eBPF Slack](http://ebpf.io/slack)
    community has more than 14,000 members.
  prefs: []
  type: TYPE_NORMAL
- en: Why is eBPF being selected as the underlying technology for so many infrastructure
    tools? How does it deliver the promised improvements to performance? How is eBPF
    useful in such disparate technical fields, which range from performance tracing
    to network traffic encryption?
  prefs: []
  type: TYPE_NORMAL
- en: This book aims to answer these questions by giving the reader an understanding
    of how eBPF works, as well as providing an introduction to writing eBPF code.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for developers, system administrators, operators, and students
    who are curious about eBPF and want to know more about how it works. It will provide
    a foundation for those who want to explore writing eBPF programs themselves. Since
    eBPF provides a great platform for a whole new generation of instrumentation and
    tooling, there will likely be gainful employment for eBPF developers for some
    years to come.
  prefs: []
  type: TYPE_NORMAL
- en: But you don’t necessarily need to be planning to write eBPF code yourself for
    this book to be useful to you. If you work in operations, security, or any other
    role that involves software infrastructure, you’re likely to come across eBPF-based
    tooling, now or over the next few years. If you understand something about the
    internals of these tools, you’ll be in a better position to use them effectively.
    For example, if you know how events can trigger eBPF programs, you’ll have a better
    mental model for exactly what an eBPF-based tool is really measuring when it shows
    you performance metrics. If you’re an application developer, you might also come
    into contact with some of these eBPF-based tools—for example, if you are performance
    tuning an application, you might use a tool like [Parca](https://www.parca.dev)
    to generate flame graphs showing which functions are taking the most time. If
    you are evaluating security tools, this book will help you understand where eBPF
    shines and how to avoid using it in a naïve way that is less effective against
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you’re not using eBPF tools today, I hope this book will give you interesting
    insights into areas of Linux that you might not have considered before. Most developers
    take the kernel for granted, as they use programming languages with convenient
    higher-level abstractions that allow them to focus on the work of application
    development—which is plenty hard enough! They use tools like debuggers and performance
    analyzers to help them do their job effectively. Knowing the internals of how
    a debugger or performance tool works might be interesting, but it’s not essential.
    Yet, for many of us, it’s fun and fulfilling to go down the rabbit hole to find
    out more.^([1](preface01.html#ch00fn1)) In the same way, most people will use
    eBPF tools without having to worry about how they are built. [Arthur C. Clarke
    wrote](https://oreil.ly/gOV1D) that “any sufficiently advanced technology is indistinguishable
    from magic,” but personally, I like to dig in and find out how the magic trick
    works. You might be like me and feel compelled to explore eBPF programming to
    get a better feel for what is possible with this technology. If so, I think you’ll
    enjoy this book.
  prefs: []
  type: TYPE_NORMAL
- en: What This Book Covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: eBPF continues to evolve at quite a rapid pace, which makes it rather difficult
    to write a comprehensive reference that doesn’t constantly need updating. However,
    there are some fundamentals and basic principles that are unlikely to change significantly,
    and that’s what this book discusses.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html#what_is_ebpf_and_why_is_it_importantque) sets the scene
    by describing why eBPF is so powerful as a technology and explaining how the ability
    to run custom programs in the operating system kernel enables so many exciting
    capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Things become more concrete in [Chapter 2](ch02.html#ebpfapostrophes_quotation_markhello_wor),
    where you’ll see some “Hello World” examples that introduce you to the concepts
    of eBPF programs and maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html#anatomy_of_an_ebpf_program) dives into more detail about
    eBPF programs and how they run in the kernel, and [Chapter 4](ch04.html#the_bpfleft_parenthesisright_parenthesi)
    explores the interface between user space applications and eBPF programs.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the big challenges of eBPF in recent years has been the question of compatibility
    across kernel versions. [Chapter 5](ch05.html#co_recomma_btfcomma_and_libbpf)
    looks at the “compile once, run everywhere” (CO-RE) approach that solves this
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: The verification process is perhaps the most important characteristic that distinguishes
    eBPF from kernel modules. I’ll introduce you to the eBPF verifier in [Chapter 6](ch06.html#the_ebpf_verifier).
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.html#ebpf_program_and_attachment_types) you’ll get an introduction
    to the many different types of eBPF programs and their attachment points. Many
    of those attachment points are within the networking stack, and [Chapter 8](ch08.html#ebpf_for_networking)
    explores the application of eBPF for networking features in more detail. [Chapter 9](ch09.html#ebpf_for_security)
    looks at how eBPF is being used to build security tools.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to write a user space application that interacts with eBPF programs,
    there are many libraries and frameworks available to help. [Chapter 10](ch10.html#ebpf_programming)
    gives an overview of the options for various programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in [Chapter 11](ch11.html#the_future_evolution_of_ebpf) I’ll gaze into
    my crystal ball and tell you about some future developments that are likely to
    unfold in the eBPF world.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisite Knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes you are comfortable with basic shell commands on Linux and
    with the idea of using a compiler to turn source code into an executable program.
    There are some simple example extracts from Makefiles, on the assumption that
    you have at least a minimal understanding of how `make` uses these files.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of code examples in Python, C, and Go. You won’t need in-depth
    knowledge of those languages to get something out of these examples, but you’ll
    get the most out of the book if you are generally happy to read some code. I’m
    also assuming you are familiar with the idea of *pointers*, which identify a memory
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Example Code and Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are lots of code examples in this book. If you want to try them out for
    yourself, you’ll find an accompanying GitHub repository and instructions for installing
    and running the code at [*https://github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf).
  prefs: []
  type: TYPE_NORMAL
- en: I have also included exercises at the end of most of the chapters to help you
    explore eBPF programming by extending the examples or writing your own programs.
  prefs: []
  type: TYPE_NORMAL
- en: Because eBPF is continually evolving, the features available to you depend on
    the kernel version you’re running. Many of the restrictions that apply to earlier
    versions have been lifted or relaxed in later versions. The Iovisor project has
    a useful overview of the [kernel versions in which different BPF features were
    added](https://oreil.ly/SsnEV), and in this book I have attempted to note when
    the particular capabilities I’m describing were added. The examples were tested
    using version 5.15 of the kernel, and at the time of this writing some of the
    popular Linux distributions don’t yet support such a recent kernel version. If
    you’re reading this book shortly after it was published, you might find that some
    of the features won’t work on the Linux kernel your organization uses in production.
  prefs: []
  type: TYPE_NORMAL
- en: Is eBPF Only for Linux?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: eBPF was originally developed for Linux. There’s no particular reason why the
    same approach couldn’t be used in other operating systems too—indeed, Microsoft
    has been developing an [eBPF implementation for Windows](https://oreil.ly/k7AvA).
    I discuss that briefly in [Chapter 11](ch11.html#the_future_evolution_of_ebpf),
    but throughout the rest of the book I focus on the Linux implementation, and all
    the examples will be from Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Learning eBPF*
    by Liz Rice (O’Reilly). Copyright 2023 Vertical Shift Ltd., 978-1-098-13512-6.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](https://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/learning-eBPF*](https://oreil.ly/learning-eBPF).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*https://youtube.com/oreillymedia*](https://youtube.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I would like to thank the many people who have contributed enormously to the
    writing of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: My technical reviewers—Timo Beckers, Jess Males, Quentin Monnet, Kevin Sheldrake,
    and Celeste Stinger—provided detailed, actionable feedback and great ideas for
    improving the examples, for which I’m very grateful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m standing on the shoulders of the giants who built, popularized, and continue
    to maintain eBPF, including Daniel Borkmann, Thomas Graf, Brendan Gregg, Andrii
    Nakryiko, Alexei Starovoitov, and countless others who have contributed not just
    code but also conference talks and blog posts to the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thank you to my talented and lovely colleagues at Isovalent, many of whom are
    eBPF and kernel specialists, from whom I continue to learn so much.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks also to the team at O’Reilly, especially my editor, Rita Fernando, who
    gave me endless support during the writing process, as well as the planning that
    helped keep the book on schedule; and John Devins, for encouraging me to write
    the book in the first place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phil Pearl not only gave helpful feedback on the content, but he also made sure
    I ate and took breaks. I am forever grateful for his support and encouragement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I also want to thank all the wonderful people who, over the years, have taken
    the time to make encouraging comments about my work, whether it’s in person at
    an event or on social media. It’s incredibly inspiring to know that something
    I have written or recorded has helped someone else get to grips with a technical
    concept or has given them the desire to build or write something themselves. Thank
    you!
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](preface01.html#ch00fn1-marker)) At the dotGo Paris conference in 2017,
    [I gave a talk that showed how a debugger works](https://youtu.be/TBrv17QyUE0).
  prefs: []
  type: TYPE_NORMAL

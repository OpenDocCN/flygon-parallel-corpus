- en: Chapter 6\. The eBPF Verifier
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。eBPF验证器
- en: I’ve mentioned the verification step a few times, so you already know that when
    you load an eBPF program into the kernel, this verification process ensures that
    the program is safe. In this chapter we’ll dive into how the verifier works to
    achieve this goal.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经提到了几次验证步骤，因此您已经知道，当您将eBPF程序加载到内核时，此验证过程确保程序是安全的。在本章中，我们将深入探讨验证器如何工作以实现这一目标。
- en: Verification involves checking every possible execution path through the program
    and ensuring that every instruction is safe. The verifier also makes some updates
    to the bytecode to ready it for execution. In this chapter I’ll show some examples
    of verification failures, by starting from an example that works and making modifications
    that render that code invalid to the verifier.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 验证涉及检查程序中的每条可能执行路径，并确保每条指令都是安全的。验证器还对字节码进行了一些更新，以准备执行。在本章中，我将通过从一个有效的示例开始并进行修改来显示一些验证失败的示例，这些修改使该代码对验证器无效。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The example code for this chapter is in the *chapter6* directory of the repository
    at [*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码位于[*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf)存储库的*chapter6*目录中。
- en: This chapter doesn’t attempt to cover every possible check the verifier makes.
    It’s intended to be an overview, with illustrative examples that will help you
    deal with verification errors that you might run into when writing your own eBPF
    code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章并不试图涵盖验证器进行的每种可能检查。它旨在概述，并提供一些示例，这些示例将帮助您处理编写自己的eBPF代码时可能遇到的验证错误。
- en: One thing to bear in mind is that the verifier works on eBPF bytecode, not directly
    on the source. That bytecode depends on the output from the compiler. Because
    of things like compiler optimization, a change in the source code might not always
    result in exactly what you expect in the bytecode, so correspondingly it might
    not give you the result you expect in the verifier’s verdict. For example, the
    verifier will reject unreachable instructions, but the compiler might optimize
    them away before the verifier sees them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的一件事是，验证器是在eBPF字节码上工作的，而不是直接在源代码上工作。该字节码取决于编译器的输出。由于编译器优化等原因，源代码的更改可能并不总是会导致字节码中的预期结果，因此相应地，它可能不会给出您在验证器的判断中所期望的结果。例如，验证器将拒绝不可达指令，但编译器在验证器看到它们之前可能会将它们优化掉。
- en: The Verification Process
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证过程
- en: 'The verifier analyzes the program to assess all possible execution paths. It
    steps through the instructions in order, evaluating them rather than actually
    executing them. As it goes along it keeps track of the state of each register
    in a structure called `bpf_reg_state`. (The registers I’m referring to here are
    the registers from the eBPF virtual machine that you met in [Chapter 3](ch03.html#anatomy_of_an_ebpf_program).)
    This structure includes a field called `bpf_reg_type`, which describes what type
    of value is held in that register. There are several possible types, including
    these:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器分析程序以评估所有可能的执行路径。它按顺序逐步执行指令，而不是实际执行它们。在进行过程中，它在一个称为`bpf_reg_state`的结构中跟踪每个寄存器的状态。（我在这里提到的寄存器是您在[第3章](ch03.html#anatomy_of_an_ebpf_program)中遇到的eBPF虚拟机中的寄存器。）该结构包括一个称为`bpf_reg_type`的字段，描述了该寄存器中保存的值的类型。有几种可能的类型，包括这些：
- en: '`NOT_INIT`, indicating that the register has not yet been set to a value.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOT_INIT`，表示寄存器尚未设置为值。'
- en: '`SCALAR_VALUE`, indicating that the register has been set to a value that doesn’t
    represent a pointer.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCALAR_VALUE`，表示寄存器已设置为不代表指针的值。'
- en: 'Several `PTR_TO_*` types, indicating that the register holds a pointer to something.
    That something could be, for example:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几种`PTR_TO_*`类型，表示寄存器保存指向某物的指针。例如：
- en: '`PTR_TO_CTX`: The register holds a pointer to the context passed as the argument
    to a BPF program.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PTR_TO_CTX`：寄存器保存指向作为BPF程序参数传递的上下文的指针。'
- en: '`PTR_TO_PACKET`: The register points to a network packet (held in the kernel
    as `skb->data`).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PTR_TO_PACKET`：寄存器指向网络数据包（在内核中保存为`skb->data`）。'
- en: '`PTR_TO_MAP_KEY` or `PTR_TO_MAP_VALUE`: I’m sure you can guess what these mean.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PTR_TO_MAP_KEY`或`PTR_TO_MAP_VALUE`：我相信您可以猜到这些意味着什么。'
- en: There are several other `PTR_TO_*` types, and you can find the full set enumerated
    in the [*linux/bpf.h* header file](https://oreil.ly/aWb50).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几种其他`PTR_TO_*`类型，您可以在[*linux/bpf.h*头文件](https://oreil.ly/aWb50)中找到完整的枚举集。
- en: The `bpf_reg_state` structure also keeps track of the range of possible values
    the register might hold. This information is used by the verifier to determine
    when invalid actions are being attempted.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`bpf_reg_state`结构还跟踪寄存器可能保存的可能值范围。验证器使用这些信息来确定何时尝试执行无效操作。'
- en: Each time the verifier comes to a branch, where a decision has to be made on
    whether to carry on in sequence or jump to a different instruction, the verifier
    pushes a copy of the current state of all the registers onto a stack and explores
    one of the possible paths. It continues evaluating the instructions until it reaches
    the return at the end of the program (or reaches the limit on the number of instructions
    it will process, which is currently one million instructions^([1](ch06.html#ch06fn1))),
    at which point it pops a branch off the stack to evaluate next. If it finds an
    instruction that could result in an invalid operation, it fails verification.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每次验证器到达一个分支时，需要决定是按顺序继续还是跳转到不同的指令时，验证器会将当前所有寄存器的当前状态的副本推送到堆栈上，并探索其中一条可能的路径。它继续评估指令，直到达到程序末尾的返回（或达到它将处理的指令数量上限，目前为一百万条指令^([1](ch06.html#ch06fn1))），然后弹出堆栈上的一个分支以进行下一个评估。如果它发现可能导致无效操作的指令，它将无法通过验证。
- en: Verifying every single possibility could get computationally expensive, so in
    practice there are optimizations called *state pruning* that avoid reevaluating
    paths through the program that are essentially equivalent. As it works through
    the program, the verifier records the state of all the registers at certain instructions
    within the program. If it later arrives at the same instruction with registers
    in a matching state, there is no need to continue to verify the rest of that path,
    as it’s already known to be valid.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 验证每一种可能性可能会变得计算昂贵，因此在实践中有一些优化称为*状态修剪*，可以避免重新评估程序中本质上等效的路径。当验证器通过程序工作时，它记录程序内某些指令处所有寄存器的状态。如果它以匹配状态的相同指令到达，就不需要继续验证该路径的其余部分，因为已知它是有效的。
- en: '[Lots of work has gone into optimizing the verifier](https://oreil.ly/pQDES)
    and its pruning process. The verifier used to store pruning state before and after
    each jump instruction, but analysis showed that this results in storing state
    on average every four instructions or so, and the vast majority of these pruning
    states would never get matched. It turned out that it’s more efficient to store
    pruning state every 10 instructions, regardless of branching.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[已经进行了大量工作来优化验证器](https://oreil.ly/pQDES)及其修剪过程。验证器以前在每个跳转指令之前和之后存储修剪状态，但分析表明，这导致平均每四条指令存储一次状态，而其中绝大多数修剪状态永远不会匹配。结果表明，无论分支如何，每10条指令存储修剪状态更有效。'
- en: Note
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more details on how verification works in the [kernel documentation](https://oreil.ly/atNda).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[内核文档](https://oreil.ly/atNda)中阅读有关验证工作原理的更多详细信息。
- en: The Verifier Log
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证器日志
- en: When the verification of a program fails, the verifier generates a log showing
    how it reached the conclusion that the program is invalid. If you’re using `bpftool
    prog load`, the verifier log gets output to stderr. When you’re writing a program
    with *libbpf*, you can use the function `libbpf_set_print()` to set a handler
    that will display (or do something else useful with) any errors. (You’ll see an
    example of this in the *hello-verifier.c* source code for this chapter.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序的验证失败时，验证器会生成一个日志，显示它是如何得出程序无效的结论的。如果您使用`bpftool prog load`，验证器日志将输出到stderr。当您使用*libbpf*编写程序时，您可以使用函数`libbpf_set_print()`来设置一个处理程序，该处理程序将显示（或对任何错误进行其他有用的操作）。（您将在本章的*hello-verifier.c*源代码中看到一个示例。）
- en: Note
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you really want to dig into what the verifier is doing, you can get it to
    generate the log on success as well as on failure. There is a basic example of
    this in the *hello-verifier.c* file too. It involves passing a buffer that will
    hold verifier log contents into the *libbpf* call that loads the program into
    the kernel and then writing the contents of that log to screen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您真的想深入了解验证器的工作原理，可以让它在成功和失败时生成日志。*hello-verifier.c*文件中也有一个基本示例。它涉及将一个将保存验证器日志内容的缓冲区传递给将程序加载到内核中的*libbpf*调用，然后将该日志内容写入屏幕。
- en: 'The verifier log includes a summary of how much work the verifier did, which
    looks something like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器日志包括验证器完成的工作总结，大致如下：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, the verifier processed 61 instructions, including potentially
    processing the same instruction multiple times by arriving at it through different
    paths. Note that the complexity limit of one million is an upper bound on the
    number of instructions in a program; in practice, if there are branches in the
    code, the verifier will process some instructions more than once.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，验证器处理了61条指令，包括通过不同路径到达同一指令可能多次处理相同指令。请注意，一百万的复杂性限制是程序中指令数量的上限；在实践中，如果代码中有分支，验证器将多次处理一些指令。
- en: The total number of states stored was four, which for this simple program matches
    the peak number of stored states. If some of the states had been pruned, the peak
    number might be lower than the total.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的状态总数为4，对于这个简单的程序，这与存储状态的峰值数量相匹配。如果一些状态已被修剪，峰值数量可能低于总数。
- en: 'The log output includes the BPF instructions the verifier has analyzed, along
    with the corresponding C source code lines (if the object file was built with
    the `-g` flag to include debug information) and summaries of verifier state information.
    Here is an example extract of the verifier log relating to the first few lines
    of the program in *hello-verifier.bpf.c*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 日志输出包括验证器分析的BPF指令，以及相应的C源代码行（如果对象文件使用`-g`标志构建以包含调试信息），以及验证器状态信息的摘要。以下是与*hello-verifier.bpf.c*程序的前几行相关的验证器日志的示例提取：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#code_id_6_1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#code_id_6_1)'
- en: The log includes source code lines to make it easier to understand how the output
    relates to the source. This source code is available because the `-g` flag was
    used to build in debug information during the compilation step.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 日志包括源代码行，以便更容易理解输出与源代码的关系。这个源代码是可用的，因为在编译步骤中使用了`-g`标志来构建调试信息。
- en: '[![2](assets/2.png)](#code_id_6_2)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#code_id_6_2)'
- en: Here’s an example of some register state information being output in the log.
    It tells us that at this stage Register 1 contains a map value, Register 6 holds
    the context, and Register 10 is the frame (or stack) pointer where local variables
    are held.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是日志中输出的一些寄存器状态信息的示例。它告诉我们，在这个阶段，寄存器1包含一个映射值，寄存器6保存上下文，寄存器10是保存局部变量的帧（或堆栈）指针。
- en: '[![3](assets/3.png)](#code_id_6_3)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#code_id_6_3)'
- en: This is another example of register state information. Here you can see not
    only the types of values that are held in each (initialized) register, but also
    the range of possible values for Register 2 and Register 3.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个寄存器状态信息的示例。在这里，您不仅可以看到每个（初始化的）寄存器中保存的值的类型，还可以看到寄存器2和寄存器3可能值的范围。
- en: Let’s dig further into the details of this. I said that Register 6 holds the
    context, and the verifier log indicates this with `R6_w=ctx(id=0,off=0,imm=0)`.
    This was set up in the very first line of the bytecode, where Register 1 was copied
    to Register 6\. When an eBPF program is called, Register 1 always holds the context
    argument passed to the program. Why copy it to Register 6? Well, when a BPF helper
    function is called, the arguments to that call are passed in Registers 1 through
    5\. Helper functions don’t modify the contents of Registers 6 through 9, so saving
    the context off into Register 6 means the code can call a helper function without
    losing access to the context.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步了解一下这些细节。我说寄存器6保存上下文，验证器日志用`R6_w=ctx(id=0,off=0,imm=0)`表示了这一点。这是在字节码的第一行中设置的，寄存器1被复制到寄存器6。当调用eBPF程序时，寄存器1始终保存传递给程序的上下文参数。为什么要将其复制到寄存器6呢？嗯，当调用BPF辅助函数时，该调用的参数通过寄存器1到5传递。辅助函数不修改寄存器6到9的内容，因此将上下文保存到寄存器6意味着代码可以调用辅助函数而不会失去对上下文的访问。
- en: Register 0 is used for the return value from a helper function and also for
    the return value from an eBPF program. Register 10 always holds a pointer to the
    eBPF stack frame (and the eBPF program can’t modify it).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 寄存器0用于从辅助函数和eBPF程序中返回值。寄存器10始终保存指向eBPF堆栈帧的指针（eBPF程序不能修改它）。
- en: 'Let’s look at the register state information for Registers 2 and 3 after instruction
    6:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看指令6后寄存器2和3的寄存器状态信息：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Register 2 doesn’t have a minimum value, and the `umax_value` shown here in
    decimal corresponds to 0xFFFFFFFF, which is the largest value that can be held
    in an 8-byte register. In other words, at this point the register could hold any
    of its possible values.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 寄存器2没有最小值，在这里显示的`umax_value`对应于0xFFFFFFFF，这是一个8字节寄存器中可以保存的最大值。换句话说，在这一点上，寄存器可以保存任何可能的值。
- en: In instruction 4, the contents of Register 2 are copied into Register 3, and
    then instruction 5 adds one to that value. Therefore, Register 3 could have any
    value that’s 1 or greater. You can see this in the state information for Register
    3, which has `umin_value` set to `1`, and a `umax_value` of `0xFFFFFFFF`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在指令4中，寄存器2的内容被复制到寄存器3中，然后指令5将该值加1。因此，寄存器3可以具有大于1的任何值。您可以在寄存器3的状态信息中看到这一点，其中`umin_value`设置为`1`，`umax_value`设置为`0xFFFFFFFF`。
- en: 'The verifier uses the information about not just the states of each register,
    but also the range of values each can contain, to determine the possible paths
    through the program. This is also used for the state pruning that I mentioned
    before: if the verifier has been in the same position in the code, with the same
    types and possible ranges of values for each register, there’s no need to evaluate
    this path further. What’s more, if the current state is a subset of a state that
    was seen earlier, it can also be pruned.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器使用有关每个寄存器状态的信息以及每个寄存器可能包含的值范围，来确定程序的可能路径。这也用于我之前提到的状态修剪：如果验证器在代码中的相同位置，具有相同类型和每个寄存器可能值范围的状态，那么就没有必要进一步评估这条路径。而且，如果当前状态是先前看到的状态的子集，那么它也可以被修剪。
- en: Visualizing Control Flow
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化控制流
- en: 'The verifier explores all the possible paths through the eBPF program, and
    if you’re trying to debug an issue, it can be helpful to see those paths for yourself.
    The `bpftool` utility can help with this by producing a control flow graph of
    the program in [DOT format](https://oreil.ly/V-1WN), which you can then convert
    into an image format, like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器探索eBPF程序的所有可能路径，如果您试图调试问题，看到这些路径可能会有所帮助。`bpftool`实用程序可以通过生成程序的[DOT格式](https://oreil.ly/V-1WN)的控制流图来帮助您，然后您可以将其转换为图像格式，就像这样：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This produces a visual representation of the control flow like that shown in
    [Figure 6-1](#extract_from_control_flow_graph_left_pa).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了一个控制流的可视化表示，就像[图6-1](#extract_from_control_flow_graph_left_pa)中所示的那样。
- en: '![Extract from control flow graph (the full image can be found as chapter6/kprobe_exec.png
    in the GitHub repo for this book)](assets/lebp_0601.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![从控制流图中提取（完整图像可以在本书的GitHub存储库的chapter6/kprobe_exec.png中找到）](assets/lebp_0601.png)'
- en: Figure 6-1\. Extract from control flow graph (the full image can be found as
    chapter6/kprobe_exec.png in the [GitHub repo](http://github.com/lizrice/learning-ebpf)
    for this book)
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-1。从控制流图中提取（完整图像可以在本书的[GitHub存储库](http://github.com/lizrice/learning-ebpf)的chapter6/kprobe_exec.png中找到）
- en: Validating Helper Functions
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证辅助函数
- en: You’re not allowed to call directly from eBPF programs to any kernel function
    (unless it has been registered as a kfunc, which you’ll meet in the next chapter),
    but eBPF provides a number of helper functions that enable programs to access
    information from the kernel. There’s a [bpf-helpers manpage](https://oreil.ly/pdLGW)
    that attempts to document them all.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许从eBPF程序直接调用任何内核函数（除非它已经注册为kfunc，这将在下一章中介绍），但是eBPF提供了许多辅助函数，使程序能够访问内核中的信息。有一个[bpf-helpers
    manpage](https://oreil.ly/pdLGW)试图记录它们所有。
- en: 'Different helper functions are valid for different BPF program types. For example,
    the helper function `bpf_get_current_pid_tgid()` retrieves the current user space
    process ID and thread ID, but it doesn’t make sense to call this from an XDP program
    that is triggered by the receipt of a packet at a network interface, because there
    is no user space process involved. You can see an example of this by changing
    the `SEC()` definition for the *hello* eBPF program in *hello-verifier.bpf.c*
    from `kprobe` to `xdp`. On attempting to load this program the verifier output
    gives the following message:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的辅助函数适用于不同的BPF程序类型。例如，辅助函数`bpf_get_current_pid_tgid()`检索当前用户空间进程ID和线程ID，但是从由网络接口接收数据包触发的XDP程序中调用它是没有意义的，因为这里没有涉及用户空间进程。通过将*hello*
    eBPF程序在*hello-verifier.bpf.c*中的`SEC()`定义从`kprobe`更改为`xdp`，可以看到这一点。尝试加载此程序时，验证器输出给出以下消息：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `unknown func` doesn’t mean the function is completely unknown, just that
    it is unknown *for this BPF program type*. (BPF program types are a topic for
    the next chapter; for now you can just think of them as being programs that are
    suitable for attaching to different types of event.)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`unknown func`并不意味着该函数完全未知，只是对于这种BPF程序类型是未知的。（BPF程序类型是下一章的主题；现在你可以将它们视为适用于不同类型事件的程序。）'
- en: Helper Function Arguments
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助函数参数
- en: 'If you look, for example, in [*kernel/bpf/helpers.c*](https://oreil.ly/tjjVR),^([2](ch06.html#ch06fn2))
    you’ll find that each helper function has a `bpf_func_proto` structure similar
    to this example for the helper function `bpf_map_lookup_elem()`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在[*kernel/bpf/helpers.c*](https://oreil.ly/tjjVR)中找到，每个辅助函数都有一个类似于辅助函数`bpf_map_lookup_elem()`的`bpf_func_proto`结构：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This structure defines the constraints for arguments to and return values from
    the helper function. Because the verifier is keeping track of the type of value
    held in each register, it can spot if you try to pass the wrong kind of argument
    to a helper function. For example, try changing the argument to the call to `bpf_map_lookup_elem()`
    in the *hello* program, like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构定义了对辅助函数的参数和返回值的约束。因为验证程序正在跟踪每个寄存器中保存的值的类型，所以它可以发现你尝试向辅助函数传递错误类型的参数。例如，尝试更改*hello*程序中对`bpf_map_lookup_elem()`的调用的参数，如下所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Instead of passing `&my_config`, which is a pointer to a map, this now passes
    `&data`, which is a pointer to a local variable structure. This is valid from
    the compiler’s point of view, so you can build the BPF object file *hello-verifier.bpf.o*,
    but when you try to load the program into the kernel, you’ll see an error like
    this in the verifier log:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`现在不是传递`&my_config`，而是传递`&data`，这是指向本地变量结构的指针。从编译器的角度来看，这是有效的，因此可以构建BPF对象文件*hello-verifier.bpf.o*，但是当你尝试将程序加载到内核时，你会在验证器日志中看到这样的错误：'
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, `fp` stands for *frame pointer*, and it’s the area of memory on the stack
    where local variables are stored. Register 1 was loaded with the address of the
    local variable called `data`, but the function expects a pointer to a map (as
    indicated by the `arg1_type` field in the `bpf_func_proto` structure shown earlier).
    By tracking the types of value stored in each register, the verifier was able
    to spot this discrepancy.`  `# Checking the License
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`fp`代表*frame pointer*，它是存储局部变量的栈上内存区域。寄存器1加载了名为`data`的局部变量的地址，但该函数期望一个指向映射的指针（如前面显示的`bpf_func_proto`结构中的`arg1_type`字段所示）。通过跟踪每个寄存器中存储的值的类型，验证程序能够发现这种差异。`#
    检查许可证
- en: 'The verifier also checks that if you are using a BPF helper function that’s
    licensed under GPL, your program also has a GPL-compatible license. The last line
    in the [Chapter 6](#the_ebpf_verifier) example code *hello-verifier.bpf.c* defines
    a “license” section that holds the string `Dual BSD/GPL`. If you remove this line,
    the output from the verifier will end like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 验证程序还检查，如果你使用的是GPL许可的BPF辅助函数，你的程序也必须具有GPL兼容的许可。[第6章](#the_ebpf_verifier)示例代码*hello-verifier.bpf.c*中的最后一行定义了一个包含字符串`Dual
    BSD/GPL`的“license”部分。如果删除此行，验证程序的输出将以这样结束：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That’s because the `gpl_only` field is set to `true` for the `bpf_probe_read_kernel()`
    helper function. There are other helper functions called earlier in this eBPF
    program, but they are not GPL licensed, so the verifier doesn’t object to their
    use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`bpf_probe_read_kernel()`辅助函数的`gpl_only`字段设置为`true`。在这个eBPF程序中之前调用了其他辅助函数，但它们没有GPL许可，所以验证程序不会反对它们的使用。
- en: The BCC project maintains a [list of helper functions](https://oreil.ly/mCpvB),
    indicating whether they are GPL licensed or not. If you’re interested in more
    details on how helper functions are implemented, there’s a section on this in
    the [BPF and XDP reference guide](https://oreil.ly/kVd6j).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: BCC项目维护着一个[辅助函数列表](https://oreil.ly/mCpvB)，指示它们是否具有GPL许可。如果你对辅助函数的实现细节感兴趣，可以在[BPF和XDP参考指南](https://oreil.ly/kVd6j)中找到相关部分。
- en: Checking Memory Access
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查内存访问
- en: The verifier performs a number of checks to make sure BPF programs only access
    memory they are supposed to have access to.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 验证程序执行了许多检查，以确保BPF程序只访问它们应该访问的内存。
- en: 'For example, when processing a network packet, an XDP program is only permitted
    to access the memory locations that make up that network packet. Most XDP programs
    start with something very similar to the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在处理网络数据包时，XDP程序只允许访问构成该网络数据包的内存位置。大多数XDP程序都以以下非常相似的内容开头：
- en: '[PRE9]``'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]``'
- en: '[PRE10]The `xdp_md` structure passed as the context to the program describes
    the network packet that has been received. The `ctx->data` field within that structure
    is the location in memory where the packet starts, and `ctx->data_end` is the
    last location in the packet. The verifier will ensure that the program doesn’t
    exceed these bounds.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]作为传递给程序的上下文的`xdp_md`结构描述了已接收的网络数据包。该结构中的`ctx->data`字段是数据包开始的内存位置，`ctx->data_end`是数据包的最后位置。验证程序将确保程序不会超出这些边界。'
- en: 'For example, the following program in *hello_verifier.bpf.c* is valid:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*hello_verifier.bpf.c*中的以下程序是有效的：
- en: '[PRE11][PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11][PRE12]'
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: data_end++;
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: data_end++;
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ; data_end++;
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ; data_end++;
- en: '1: (07) r3 += 1'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '1: (07) r3 += 1'
- en: R3 pointer arithmetic on pkt_end prohibited
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: R3禁止在pkt_end上进行指针算术运算
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: if(c<sizeof(message)){ `char``a``=``message``[``c``];` ``bpf_printk``(``"%c"``,``a``);`
    ``}[PRE16]
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果(c<sizeof(message)){ `char``a``=``message``[``c``];` ``bpf_printk``(``"%c"``,``a``);`
    ``}[PRE16]
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: if(c<=sizeof(message)){ `char``a``=``message``[``c``];` ``bpf_printk``(``"%c"``,``a``);`
    ``}[PRE18]
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果(c<=sizeof(message)){ `char``a``=``message``[``c``];` ``bpf_printk``(``"%c"``,``a``);`
    ``}[PRE18]
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: invalid access to map value, value_size=16 off=16 size=1
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对映值的无效访问，value_size=16 off=16 size=1
- en: R2 max value is outside of the allowed memory range
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: R2的最大值超出了允许的内存范围
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ; if (c <= sizeof(message)) {
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果(c <= sizeof(message)) {
- en: '30: (25) if r1 > 0xc goto pc+10                                ![3](assets/3.png)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '30: (25) if r1 > 0xc goto pc+10                                ![3](assets/3.png)'
- en: R0_w=map_value_or_null(id=2,off=0,ks=4,vs=12,imm=0) R1_w=inv(id=0,
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: umax_value=12,var_off=(0x0; 0xf)) R6=ctx(id=0,off=0,imm=0) ...
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: ; char a = message[c];
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '31: (18) r2 = 0xffff800008e00004                               ![2](assets/2.png)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '33: (0f) r2 += r1'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: last_idx 33 first_idx 19
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'regs=2 stack=0 before 31: (18) r2 = 0xffff800008e00004'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'regs=2 stack=0 before 30: (25) if r1 > 0xc goto pc+10'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'regs=2 stack=0 before 29: (61) r1 = *(u32 *)(r8 +0)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '34: (71) r3 = *(u8 *)(r2 +0)                                   ![1](assets/1.png)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: R0_w=map_value_or_null(id=2,off=0,ks=4,vs=12,imm=0) R1_w=invP(id=0,
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: umax_value=12,var_off=(0x0; 0xf)) R2_w=map_value(id=0,off=4,ks=4,vs=16,
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: umax_value=12,var_off=(0x0; 0xf),s32_max_value=15,u32_max_value=15)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: R6=ctx(id=0,off=0,imm=0) ...
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21][PRE22][PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]This will fail the verifier. However, if you put the line with the helper
    function `bpf_printf()` back in, the verifier won’t complain, even though there’s
    no explicit return value set by the source code!'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: This is because Register 0 is also used to hold the return code from a helper
    function. After returning from a helper function in an eBPF program, Register
    0 is no longer uninitialized.[PRE25]# Invalid Instructions
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: As you know from the discussion of the eBPF (virtual) machine in [Chapter 3](ch03.html#anatomy_of_an_ebpf_program),
    eBPF programs consist of a set of bytecode instructions. The verifier checks that
    the instructions in a program are valid bytecode instructions—for example, using
    only known opcodes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: It would be considered a bug in the compiler if it emitted invalid bytecode,
    so you’re not likely to see this kind of verifier error unless you choose (for
    some reason best known to yourself) to write eBPF bytecode by hand. However, there
    have been some instructions added more recently, such as the atomic operations.
    If your compiled bytecode uses these instructions, they would fail verification
    on an older kernel.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Unreachable Instructions
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The verifier also rejects programs that have unreachable instructions. Oftentimes,
    these will get optimized out by the compiler anyway.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I first got interested in eBPF, getting code through the verifier seemed
    like a dark art, where seemingly valid code would get rejected, throwing up what
    seemed to be arbitrary errors. Over time there have been *lots* of improvements
    to the verifier, and in this chapter you’ve seen several examples where the verifier
    log gives hints to help you figure out what the problem is.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: These hints are more helpful when you have a mental model of how the eBPF (virtual)
    machine works, using a set of registers for temporary value storage as it steps
    through an eBPF program. The verifier keeps track of the types and possible range
    of values for each register to ensure that eBPF programs are safe to run.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: If you try writing some eBPF code of your own, you might find yourself needing
    assistance to resolve verifier errors. The [eBPF community Slack channel](http://ebpf.io/slack)
    is a good place to ask for help, and lots of people have also found advice on
    [StackOverflow](https://oreil.ly/nu_0v).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some more ways to cause a verifier error. See if you can correlate
    the verifier log output to the errors you get:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'In [“Checking Memory Access”](#checking_memory_access), you saw the verifier
    rejecting access beyond the end of the global `message` array. In the example
    code there’s a section that accesses the local variable `data.message` in a similar
    way:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]Try adjusting the code to make the same out-by-one mistake by replacing
    the `<` with `<=`, and you’ll see an error message about `invalid variable-offset
    read from stack R2`.[PRE28]*   Find the commented-out loops in *xdp_hello* in
    the example code. Try adding in the first loop that looks like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '42: (18) r1 = 0xffff800008e10009'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '44: (b7) r2 = 11'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '45: (b7) r3 = 8'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '46: (85) call bpf_trace_printk#6'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: R0=inv(id=0) R1_w=map_value(id=0,off=9,ks=4,vs=26,imm=0) R2_w=inv11
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: R3_w=inv8 R6=pkt_end(id=0,off=0,imm=0) R7=pkt(id=0,off=0,r=0,imm=0)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: R3_w=inv8 R6=pkt_end(id=0,off=0,imm=0) R7=pkt(id=0,off=0,r=0,imm=0)
- en: R10=fp0
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: R10=fp0
- en: last_idx 46 first_idx 42
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: last_idx 46 first_idx 42
- en: 'regs=4 stack=0 before 45: (b7) r3 = 8'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: regs=4 stack=0 在45之前：(b7) r3 = 8
- en: 'regs=4 stack=0 before 44: (b7) r2 = 11'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: regs=4 stack=0 在44之前：(b7) r2 = 11
- en: '[PRE31] [PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE31] [PRE32]'
- en: for(inti=0;i<c;i++){ `bpf_printk``(``"Looping %d"``,``i``);` ``}``
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: for(inti=0;i<c;i++){ `bpf_printk``(``"Looping %d"``,``i``);` ``}``
- en: '[PRE33]You should see that the verifier tries to explore this loop to its conclusion,
    but it reaches the instruction complexity limit before it completes (because there
    is no upper bound on the global variable `c`).[PRE34]*   Write a program that
    attaches to a tracepoint. (You may have done this already for the exercises in
    [Chapter 4](ch04.html#the_bpfleft_parenthesisright_parenthesi).) Looking ahead
    to [“Tracepoints”](ch07.html#tracepoints), you can see a structure definition
    for the context argument that starts with these fields:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE33]你应该看到验证器试图探索这个循环直到结束，但在完成之前达到了指令复杂性限制（因为全局变量`c`没有上限）。[PRE34]*编写一个附加到跟踪点的程序。（您可能已经在[第4章](ch04.html#the_bpfleft_parenthesisright_parenthesi)的练习中完成了这个。）预览[“跟踪点”](ch07.html#tracepoints)，您可以看到一个以这些字段开始的上下文参数的结构定义：'
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]Create your own version of a structure that starts like this, and make
    the context argument in your program a pointer to this structure. In the program,
    try accessing any of these fields and see that the verifier fails with `invalid
    bpf_context access`.[PRE37][PRE38][PRE39]``'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE36]创建自己的版本，以这样开始的结构，并使程序中的上下文参数指向这个结构的指针。在程序中，尝试访问任何这些字段，并查看验证器失败并显示“无效的bpf_context访问”。[PRE37][PRE38][PRE39]'

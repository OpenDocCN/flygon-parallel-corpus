- en: Chapter 7\. eBPF Program and Attachment Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。eBPF程序和附加类型
- en: In the preceding chapters you saw lots of examples of eBPF programs, and you
    probably spotted the fact that they are attached to different types of events.
    Some of the examples I’ve shown attach to kprobes, but in other examples I’ve
    demonstrated XDP programs that handle a newly arrived network packet. These are
    just two of the many attachment points within the kernel. In this chapter we’ll
    take a deeper look at different program types and how they can be attached to
    different events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你看到了许多eBPF程序的示例，你可能已经注意到它们附加到不同类型的事件上。我展示的一些示例附加到kprobes，但在其他示例中，我演示了处理新到达的网络数据包的XDP程序。这只是内核中许多附加点中的两个。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can build and run the examples from this chapter using the code and instructions
    at [*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf).
    The code for this chapter is in the *chapter7* directory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf)上的代码和说明构建和运行本章的示例。本章的代码位于*chapter7*目录中。
- en: At the time of this writing, some of the examples are not supported on ARM processors.
    Check out the *README* file in the *chapter7* directory for more details and advice.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，一些示例在ARM处理器上不受支持。查看*chapter7*目录中的*README*文件以获取更多详细信息和建议。
- en: There are currently around 30 program types enumerated in [*uapi/linux/bpf.h*](https://oreil.ly/6dNIW),
    and more than 40 attachment types. The attachment type defines more specifically
    where the program gets attached; for lots of program types, the attachment type
    can be inferred from the program type, but some program types can be attached
    to multiple different points in the kernel, so an attachment type has to be specified
    as well.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[*uapi/linux/bpf.h*](https://oreil.ly/6dNIW)目前列举了大约30种程序类型和40多种附加类型。附加类型更具体地定义了程序的附加位置；对于许多程序类型，附加类型可以从程序类型中推断出来，但是一些程序类型可以附加到内核中的多个不同点，因此还必须指定附加类型。'
- en: As you know, this book isn’t intended to be a reference manual, so I won’t cover
    every single eBPF program type. There’s a good chance that new types will have
    been added by the time you read this book anyway!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，这本书并不是参考手册，所以我不会涵盖每一种eBPF程序类型。在你阅读本书时，很可能已经添加了新的类型！
- en: Program Context Arguments
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序上下文参数
- en: All eBPF programs take a context argument that is a pointer, but the structure
    it points to depends on the type of event that triggered it. eBPF programmers
    need to write programs that accept the appropriate type of context; there is no
    point in pretending that the context argument points to a network packet if the
    event is, say, a tracepoint. Defining different types of programs allows the verifier
    to ensure that the contextual information is handled appropriately and to enforce
    rules about what helper functions are permissible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有eBPF程序都接受一个上下文参数，这是一个指针，但它指向的结构取决于触发它的事件类型。eBPF程序员需要编写接受适当类型上下文的程序；如果事件是tracepoint，那么假装上下文参数指向网络数据包是没有意义的。定义不同类型的程序允许验证器确保上下文信息得到适当处理，并强制执行有关允许的辅助函数的规则。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: To dive into the details of the context data passed to different BPF program
    types, check out [this post by Alan Maguire on Oracle’s blog](https://oreil.ly/6dNIW).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解传递给不同BPF程序类型的上下文数据的详细信息，请查看[Alan Maguire在Oracle博客上的这篇文章](https://oreil.ly/6dNIW)。
- en: Helper Functions and Return Codes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辅助函数和返回代码
- en: As you saw in the previous chapter, the verifier checks that all helper functions
    used by a program are compatible with its program type. The example in the previous
    chapter demonstrated that the `bpf_get_current_pid_tgid()` helper function isn’t
    permitted in an XDP program. There is no user space process or thread involved
    at the point where a packet is received and the XDP hook is triggered, so a call
    to discover the current process and thread ID doesn’t make sense in that context.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上一章中看到的，验证器会检查程序使用的所有辅助函数是否与其程序类型兼容。上一章的示例表明，`bpf_get_current_pid_tgid()`辅助函数在XDP程序中是不允许的。在接收数据包并触发XDP钩子的地方，没有涉及用户空间进程或线程，因此在这种情况下调用发现当前进程和线程ID是没有意义的。
- en: The program type also determines the meaning of the return code from the program.
    Again using XDP as an example, the return code value tells the kernel what to
    do with the packet once the eBPF program has finished processing it—which could
    involve passing it to the network stack, dropping it, or redirecting it to a different
    interface. These return codes wouldn’t make any sense when an eBPF program is
    triggered by, say, hitting a particular tracepoint, where there is no network
    packet involved.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 程序类型还确定了程序的返回代码的含义。再次以XDP为例，返回代码值告诉内核在eBPF程序完成处理后该如何处理数据包——可能涉及将其传递到网络堆栈，丢弃它，或将其重定向到不同的接口。当eBPF程序由于命中特定的tracepoint而触发时，这些返回代码就没有任何意义，因为这时没有涉及网络数据包。
- en: There is a [manpage for helper functions](https://oreil.ly/e8K73) (with, quite
    reasonably, disclaimers that it might not be complete due to the ongoing development
    of the BPF subsystem).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个[辅助函数的manpage](https://oreil.ly/e8K73)（合理地指出，由于BPF子系统的持续开发，它可能不完整）。
- en: You can get a list of which helper functions are available for each program
    type in your version of the kernel with the `bpftool feature` command. This shows
    the system configuration and lists all the available program types and map types,
    and even lists all the helper functions that are supported for each program type.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`bpftool feature`命令获取你的内核版本中每种程序类型可用的辅助函数列表。这显示了系统配置，并列出了所有可用的程序类型和映射类型，甚至列出了每种程序类型支持的所有辅助函数。
- en: Helper functions are considered part of the *UAPI*, the Linux kernel’s external,
    stable interface. As such, once a helper function has been defined in the kernel,
    it shouldn’t change in the future, even though the kernel’s internal functions
    and data structures can change.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数被视为*UAPI*的一部分，即Linux内核的外部稳定接口。因此，一旦在内核中定义了一个辅助函数，即使内核的内部函数和数据结构发生变化，它也不应该改变。
- en: Despite the risk of changes between kernel versions, there was demand from eBPF
    programmers to be able to access some internal functions from eBPF programs. This
    can be achieved using the mechanism called *BPF kernel functions*, or [*kfuncs*](https://oreil.ly/gKSEx)*.*
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管内核版本之间的变化风险很大，但eBPF程序员们希望能够从eBPF程序中访问一些内部函数。这可以通过称为*BPF内核函数*或[*kfuncs*](https://oreil.ly/gKSEx)的机制来实现。
- en: Kfuncs
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kfuncs
- en: Kfuncs allow internal kernel functions to be registered with the BPF subsystem
    so that the verifier will allow them to be called from eBPF programs. There is
    a registration for each eBPF program type that is permitted to call a given kfunc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kfuncs允许将内部内核函数注册到BPF子系统中，以便验证程序允许从eBPF程序中调用它们。对于每种允许调用给定kfunc的eBPF程序类型，都有一个注册。
- en: Unlike helper functions, kfuncs don’t provide compatibility guarantees, so an
    eBPF programmer has to consider the possibility of changes between kernel versions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与辅助函数不同，kfuncs不提供兼容性保证，因此eBPF程序员必须考虑内核版本之间的变化可能性。
- en: There is a set of [“core” BPF kfuncs](https://oreil.ly/06qoi), which at the
    time of this writing consists of functions that allow eBPF programs to obtain
    and release kernel references to tasks and cgroups.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有一组[“核心”BPF kfuncs](https://oreil.ly/06qoi)，在撰写本文时，这些函数允许eBPF程序获取和释放对任务和cgroups的内核引用。
- en: To recap, the type of an eBPF program determines what events it can be attached
    to, which in turn defines the type of context information it receives. The program
    type also defines the set of helper functions and kfuncs it can call.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，eBPF程序的类型决定了它可以附加到哪些事件上，从而定义了它接收的上下文信息的类型。程序类型还定义了它可以调用的辅助函数和kfuncs的集合。
- en: 'Program types are broadly considered to fall into two categories: tracing (or
    perf) program types and networking-related program types. Let’s look at some examples.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 程序类型通常被广泛认为分为两类：跟踪（或perf）程序类型和与网络相关的程序类型。让我们看一些例子。
- en: Tracing
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪
- en: Programs that attach to kprobes, tracepoints, raw tracepoints, fentry/fexit
    probes, and perf events were all designed to provide an efficient way for eBPF
    programs in the kernel to report tracing information about events into user space.
    These tracing-related types weren’t expected to influence the way the kernel behaves
    in response to the events they are attached to (although, as you’ll see in [Chapter 9](ch09.html#ebpf_for_security),
    there have been some innovations in this area!).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到kprobes、tracepoints、原始tracepoints、fentry/fexit probes和perf events的程序都旨在为内核中的eBPF程序提供一种有效的方式，将有关事件的跟踪信息报告到用户空间。这些与跟踪相关的类型并不会影响内核对它们附加的事件的响应方式（尽管正如您将在[第9章](ch09.html#ebpf_for_security)中看到的那样，在这个领域已经有了一些创新！）。
- en: 'These are sometimes referred to as “perf-related” programs. For example, the
    `bpftool perf` subcommand lets you view programs attached to perf-related events
    like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这些被称为“与perf相关”的程序。例如，`bpftool perf`子命令允许您查看附加到与perf相关事件的程序，如下所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding output is what I see when running example code from the *hello.bpf.c*
    file in the *chapter7* directory, which attaches different programs to a variety
    of events that are all related to `execve()`. I’ll discuss all of these types
    in this section, but as an overview, these programs are:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出是我在*chapter7*目录中的*hello.bpf.c*文件中运行示例代码时看到的，它将不同的程序附加到与`execve()`相关的各种事件上。我将在本节中讨论所有这些类型，但总的来说，这些程序是：
- en: A kprobe attached to the entry point to the `execve()` system call.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个附加到`execve()`系统调用入口点的kprobe。
- en: A kprobe attached to a kernel function, `do_execve()`.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个附加到内核函数`do_execve()`的kprobe。
- en: A tracepoint placed at the entry to the `execve()` syscall.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个放置在`execve()`系统调用入口处的tracepoint。
- en: Two versions of a raw tracepoint called during the processing of `execve()`.
    One of these, as you’ll see in this section, is a BTF-enabled version.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理`execve()`时调用的两个版本的原始tracepoint。其中一个，正如您将在本节中看到的那样，是启用了BTF的版本。
- en: You’ll need `CAP_PERFMON` and `CAP_BPF` or `CAP_SYS_ADMIN` capabilities to use
    any of the tracing-related eBPF program types.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要`CAP_PERFMON`和`CAP_BPF`或`CAP_SYS_ADMIN`权限才能使用任何与跟踪相关的eBPF程序类型。
- en: Kprobes and Kretprobes
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kprobes和Kretprobes
- en: I discussed the concept of kprobes in [Chapter 1](ch01.html#what_is_ebpf_and_why_is_it_importantque).
    You can attach kprobe programs almost anywhere in the kernel.^([1](ch07.html#ch07fn1))
    Commonly, they are attached using kprobes to the entry to a function and kretprobes
    to the exit of a function, but you can use kprobes to attach to an instruction
    that is some specified offset after the entry to the function. If you choose to
    do this,^([2](ch07.html#ch07fn2)) you’d need to be confident that the kernel version
    you’re running on has the instruction you want to attach to where you think it
    is! Attaching to kernel function entry and exit points can be relatively stable,
    but arbitrary lines of code might easily be modified from one release to the next.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第1章](ch01.html#what_is_ebpf_and_why_is_it_importantque)中讨论了kprobes的概念。您可以将kprobe程序附加到内核中的几乎任何地方。通常，它们是使用kprobes附加到函数的入口处，使用kretprobes附加到函数的出口处，但是您可以使用kprobes将其附加到函数入口之后的某个指定偏移处的指令。如果选择这样做，您需要确信您运行的内核版本具有您想要附加到的指令的位置！附加到内核函数的入口和出口点可能相对稳定，但是任意代码行可能很容易在一个版本发布后被修改。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In the example output from `bpftool perf list`, you can see that there is an
    offset of 0 for both of the kprobes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`bpftool perf list`的示例输出中，您可以看到两个kprobe的偏移量都为0。
- en: When the kernel is compiled, there’s also the possibility that the compiler
    chooses to “inline” any given kernel function; that is, rather than jump from
    where the function is called, the compiler might emit the machine code to implement
    whatever the function does within the calling functions. If a function happens
    to get inlined, there won’t be a kprobe entry point for your eBPF program to attach
    to.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当内核编译时，编译器还可能选择“内联”任何给定的内核函数；也就是说，编译器可能会发出机器代码来实现被调用函数内部的任何操作，而不是从调用函数处跳转。如果函数恰好被内联，那么您的eBPF程序将无法附加到kprobe入口点。
- en: Attaching kprobes to syscall entry points
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加kprobes到系统调用入口点
- en: 'The first example eBPF program for this chapter is called `kprobe_sys_execve`,
    and it is a kprobe attached to the `execve()` syscall. The function and its section
    definition look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个eBPF程序示例称为`kprobe_sys_execve`，它是附加到`execve（）`系统调用的kprobe。函数及其部分定义如下：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '``This is the same as what you saw in [Chapter 5](ch05.html#co_recomma_btfcomma_and_libbpf).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '``这与您在[第5章](ch05.html#co_recomma_btfcomma_and_libbpf)中看到的内容相同。'
- en: One reason to attach to syscalls is that they are stable interfaces that won’t
    change between kernel versions (the same is true of tracepoints, which we’ll come
    to shortly). However, syscall kprobes shouldn’t be relied on for security tooling,
    for reasons I’ll cover in detail in [Chapter 9](ch09.html#ebpf_for_security).``  ``###
    Attaching kprobes to other kernel functions
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到系统调用的一个原因是它们是稳定的接口，在内核版本之间不会更改（跟踪点也是如此，我们很快就会谈到）。但是，不应该依赖系统调用kprobes进行安全工具编程，我将在[第9章](ch09.html#ebpf_for_security)中详细介绍原因。``  ``###
    将kprobes附加到其他内核函数
- en: 'You can find lots of examples where eBPF-based tools use kprobes to attach
    to system calls, but, as mentioned earlier, kprobes can also be attached to any
    noninlined function in the kernel. I’ve provided an example in *hello.bpf.c* that
    attaches a kprobe to the function `do_execve()`, and it’s defined like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以找到许多示例，其中基于eBPF的工具使用kprobes附加到系统调用，但是，如前所述，kprobes也可以附加到内核中的任何非内联函数。我在*hello.bpf.c*中提供了一个示例，该示例将kprobe附加到函数`do_execve（）`，并且定义如下：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '``Because `do_execve()` isn’t a system call, there are a few differences between
    this and the previous example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '``因为`do_execve（）`不是系统调用，所以与前一个示例之间存在一些差异：'
- en: The format of the SEC name is identical to the previous version attached to
    the syscall entry point, but there is no need to define platform-specific variants
    because `do_execve()`, like most kernel functions, is common to all platforms.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SEC名称的格式与附加到系统调用入口点的先前版本相同，但无需定义特定于平台的变体，因为`do_execve（）`与大多数内核函数一样，适用于所有平台。
- en: I used the `BPF_KPROBE` macro rather than `BPF_KPROBE_SYSCALL`. The intent is
    exactly the same, just that the latter handles syscall parameters.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用了`BPF_KPROBE`宏，而不是`BPF_KPROBE_SYSCALL`。意图完全相同，只是后者处理系统调用参数。
- en: 'There is another important difference: the `pathname` parameter to the syscall
    is a pointer to a string `(char *)`, but for this function the parameter is called
    `filename`, and it’s a pointer to a `struct filename`, which is a data structure
    used within the kernel.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个重要的区别：系统调用的`pathname`参数是指向字符串的指针（`char *`），但对于此函数，参数称为`filename`，它是指向`struct
    filename`的指针，这是内核中使用的数据结构。
- en: 'You might well be wondering how I knew to use this type for this parameter.
    I’ll show you. The `do_execve()` function in the kernel has the following signature:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道我是如何知道要为此参数使用此类型的。我会告诉你。内核中的`do_execve（）`函数具有以下签名：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I chose to ignore the `do_execve()` parameters `__argv` and `__envp`, and only
    declare the `filename` argument, using the type `struct filename *` to match the
    kernel function’s definition. Given the way arguments are laid out sequentially
    in memory, it’s OK to ignore the last *n* parameters, but you can’t ignore an
    earlier argument in the list if you want to use a later one.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择忽略`do_execve（）`参数`__argv`和`__envp`，并且只声明`filename`参数，使用`struct filename *`类型来匹配内核函数的定义。鉴于参数在内存中是顺序排列的，忽略最后的*n*个参数是可以的，但如果您想使用后面的参数，则不能忽略列表中的较早的参数。
- en: 'This `filename` structure is defined internal to the kernel, and it’s an illustration
    of how eBPF programming is kernel programming: I had to look up the definition
    of `do_execve()` to find its arguments, and the definition of `struct filename`.
    The name of the executable that is about to be run is pointed to by `filename->name`.
    I’m retrieving this name in the example code with the following lines:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`filename`结构在内核内部定义，它说明了eBPF编程是内核编程的一个例子：我必须查找`do_execve（）`的定义以找到其参数，以及`struct
    filename`的定义。即将运行的可执行文件的名称由`filename->name`指向。在示例代码中，我使用以下行检索此名称：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '``So to recap: the context parameter to a syscall kprobe is a structure representing
    the values passed by user space into the syscall. The context parameter to a “regular”
    (nonsyscall) kprobe is a structure representing the parameters passed to the called
    function by whatever kernel code is calling it, so the structure depends on the
    function definition.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '``因此，总结一下：系统调用kprobe的上下文参数是表示用户空间传递给系统调用的值的结构。“常规”（非系统调用）kprobe的上下文参数是表示由调用它的任何内核代码传递给被调用函数的参数的结构，因此结构取决于函数定义。'
- en: Kretprobes are very similar to kprobes, except that they are triggered when
    a function returns and can access the return value instead of the arguments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Kretprobes与kprobes非常相似，不同之处在于它们在函数返回时触发，并且可以访问返回值而不是参数。
- en: Kprobes and kretprobes are a reasonable way to hook into kernel functions, but
    there’s a newer option you should consider if you’re running on recent kernels.[PRE5]  [PRE6]cpp
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kprobes和kretprobes是挂接到内核函数的合理方式，但是，如果您正在运行最新的内核，您应该考虑一个更新的选项。[PRE5]  [PRE6]cpp
- en: SEC("fentry/do_execve") `int``BPF_PROG``(``fentry_execve``,``struct``filename``*``filename``)`
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: SEC（“fentry/do_execve”）`int``BPF_PROG``（``fentry_execve``,``struct``filename``*``filename``）`
- en: '[PRE7]cpp'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]cpp'
- en: SEC("kretprobe/do_unlinkat") `int``BPF_KRETPROBE``(``do_unlinkat_exit``,``long``ret``)`
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SEC("kretprobe/do_unlinkat") `int``BPF_KRETPROBE``(``do_unlinkat_exit``,``long``ret``)`
- en: '[PRE8]cpp'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]cpp'
- en: SEC("fexit/do_unlinkat") `int``BPF_PROG``(``do_unlinkat_exit``,``int``dfd``,``struct``filename``*``name``,``long``ret``)`
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SEC("fexit/do_unlinkat") `int``BPF_PROG``(``do_unlinkat_exit``,``int``dfd``,``struct``filename``*``name``,``long``ret``)`
- en: '[PRE9]cpp[PRE10]## Tracepoints'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]cpp[PRE10]## Tracepoints'
- en: '[Tracepoints](https://oreil.ly/yXk_L) are marked locations in the kernel code
    (we’ll come to user space tracepoints later in this chapter). They’re not by any
    means exclusive to eBPF and have long been used to generate kernel trace output
    and by tools like [SystemTap](https://oreil.ly/bLmQL). Unlike attaching to arbitrary
    instructions using kprobes, tracepoints are stable between kernel releases (although
    an older kernel might not have the full set of tracepoints that have been added
    into a newer one).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[Tracepoints](https://oreil.ly/yXk_L)是内核代码中标记的位置（我们将在本章后面介绍用户空间tracepoints）。它们绝不是eBPF的专属，长期以来一直用于生成内核跟踪输出，并被诸如[SystemTap](https://oreil.ly/bLmQL)之类的工具使用。与使用kprobes附加到任意指令不同，tracepoints在内核版本之间是稳定的（尽管旧内核可能没有新内核中添加的全部tracepoints）。'
- en: 'You can see the available set of tracing subsystems on your kernel by looking
    at */sys/kernel/tracing/available_events*, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看*/sys/kernel/tracing/available_events*来查看内核上可用的跟踪子系统，如下所示：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: My 5.15 version of the kernel has more than 1,400 tracepoints defined in this
    list. The section definition for a tracepoint eBPF program should match one of
    these items so that *libbpf* can automatically attach it to the tracepoint. The
    definition is in the form `SEC("tp/tracing subsystem/tracepoint name")`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我的内核版本5.15在此列表中定义了超过1400个tracepoint。tracepoint eBPF程序的部分定义应该与这些项目中的一个匹配，以便*libbpf*可以自动将其附加到tracepoint。定义的形式为`SEC("tp/tracing
    subsystem/tracepoint name")`。
- en: 'You’ll find an example in the *chapter7/hello.bpf.c*files that matches the
    `syscalls:sys_enter_execve` tracepoint that gets hit when the kernel starts processing
    an `execve()` call. The section definition tells *libbpf* that this is a tracepoint
    program, and where it should be attached, like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在*chapter7/hello.bpf.c*文件中找到一个示例，该示例与`syscalls:sys_enter_execve` tracepoint匹配，当内核开始处理`execve()`调用时会触发该tracepoint。部分定义告诉*libbpf*这是一个tracepoint程序，并且应该附加到哪里，就像这样：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`What about the context parameter to a tracepoint? As I’ll come to shortly,
    BTF can help us here, but first let’s consider what is needed when BTF isn’t available.
    Each tracepoint has a format describing the fields that get traced out from it.
    As an example, here’s the format for the tracepoint at the entry to the `execve()`
    syscall:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`tracepoint的上下文参数呢？我马上就会讲到，BTF可以在这里帮助我们，但首先让我们考虑在BTF不可用时需要什么。每个tracepoint都有一个格式，描述从中跟踪出的字段。例如，这是`execve()`系统调用入口的格式：'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I used this information to define a matching structure called `m⁠y⁠_⁠s⁠y⁠s⁠c⁠a⁠l⁠l⁠s⁠_⁠e⁠n⁠t⁠e⁠r⁠_​e⁠x⁠e⁠c⁠v⁠e`
    in *chapter7/hello.bpf.c*:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用这些信息在*chapter7/hello.bpf.c*中定义了一个匹配的结构，称为`m⁠y⁠_⁠s⁠y⁠s⁠c⁠a⁠l⁠l⁠s⁠_⁠e⁠n⁠t⁠e⁠r⁠_​e⁠x⁠e⁠c⁠v⁠e`：
- en: '[PRE14][PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14][PRE15]'
- en: '[PRE16]cppeBPF programs aren’t allowed to access the first four of these fields.
    If you try to access them, the program will fail verification with an `invalid
    bpf_context access` error.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE16]cppeBPF程序不允许访问这四个字段中的前四个。如果尝试访问它们，程序将因`invalid bpf_context access`错误而无法验证。'
- en: 'My example eBPF program that attaches to this tracepoint can use a pointer
    to this type as its context parameter, like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我的示例eBPF程序可以附加到这个tracepoint，并将这种类型的指针用作其上下文参数，就像这样：
- en: '[PRE17]cpp'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE17]cpp'
- en: '`Then you can access the contents of this structure. For example, you can get
    the filename pointer as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`然后您可以访问此结构的内容。例如，您可以按如下方式获取文件名指针：'
- en: '[PRE18]cpp'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE18]cpp'
- en: '`When you use a tracepoint program type, the structure passed to the eBPF program
    has already been mapped from a set of raw arguments. For better performance, you
    can directly access these raw arguments with a raw tracepoint eBPF program type.
    The section definition should start with `raw_tp` (or `raw_tracepoint`) instead
    of `tp`. You’ll need to convert the arguments from `__u64` to whatever type the
    tracepoint structure uses (when the tracepoint is the entry to a system call,
    these arguments are dependent on the chip architecture).[PRE19]`cpp``  [PRE20]cpp'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`当您使用tracepoint程序类型时，传递给eBPF程序的结构已经从一组原始参数映射出来。为了获得更好的性能，您可以直接访问这些原始参数，使用原始tracepoint
    eBPF程序类型。部分定义应该以`raw_tp`（或`raw_tracepoint`）开头，而不是`tp`。您需要将参数从`__u64`转换为tracepoint结构使用的任何类型（当tracepoint是系统调用的入口时，这些参数取决于芯片架构）。[PRE19]`cpp``  [PRE20]cpp'
- en: bpftool prog load hello.bpf.o /sys/fs/bpf/hello
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: bpftool prog load hello.bpf.o /sys/fs/bpf/hello
- en: bpftool net attach xdp id 540 dev eth0
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: bpftool net attach xdp id 540 dev eth0
- en: '[PRE21]cpp'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]cpp'
- en: $ ip link set dev eth0 xdp obj hello.bpf.o sec xdp
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: $ ip link set dev eth0 xdp obj hello.bpf.o sec xdp
- en: '[PRE22]cpp'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE22]cpp'
- en: '2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 xdpgeneric qdisc fq_codel'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 2：eth0：<BROADCAST，MULTICAST，UP，LOWER_UP> mtu 1500 xdpgeneric qdisc fq_codel
- en: state UP mode DEFAULT group default qlen 1000
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 状态UP模式默认组默认qlen 1000
- en: link/ether 52:55:55:3a:1b:a2 brd ff:ff:ff:ff:ff:ff
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: link/ether 52:55:55:3a:1b:a2 brd ff:ff:ff:ff:ff:ff
- en: prog/xdp id 1255 tag 9d0e949f89f1a82c jited
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: prog/xdp id 1255 tag 9d0e949f89f1a82c jited
- en: '[PRE23]cpp'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23]cpp'
- en: $ ip link set dev eth0 xdp off
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: $ ip link set dev eth0 xdp off
- en: '[PRE24]cpp'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]cpp'
- en: case`BPF_PROG_TYPE_CGROUP_SOCK`:`switch`(`expected_attach_type`){case`BPF_CGROUP_INET_SOCK_CREATE`:case`BPF_CGROUP_INET_SOCK_RELEASE`:case`BPF_CGROUP_INET4_POST_BIND`:case`BPF_CGROUP_INET6_POST_BIND`:return0;default:return-`EINVAL`;}
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: case`BPF_PROG_TYPE_CGROUP_SOCK`:`switch`(`expected_attach_type`){case`BPF_CGROUP_INET_SOCK_CREATE`:case`BPF_CGROUP_INET_SOCK_RELEASE`:case`BPF_CGROUP_INET4_POST_BIND`:case`BPF_CGROUP_INET6_POST_BIND`:return0;default:return-`EINVAL`;}
- en: '[PRE25]cpp'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25]cpp'
- en: strace -e bpf -o outfile ./hello
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: strace -e bpf -o outfile ./hello
- en: '[PRE26]cpp'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE26]cpp'
- en: 'libbpf: Kernel error message: XDP program already attached'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: libbpf：内核错误消息：XDP程序已附加
- en: 'Error: interface xdpgeneric attach failed: Device or resource busy'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：接口xdpgeneric附加失败：设备或资源忙
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'

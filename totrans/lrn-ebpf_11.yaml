- en: Chapter 11\. The Future Evolution of eBPF
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。eBPF的未来发展
- en: eBPF is not finished yet! Like most software, it’s under continual development
    within the Linux kernel, and it’s being added to the Windows operating system
    as well. In this chapter we’ll look at some of the likely future paths for this
    technology.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF还没有完成！像大多数软件一样，它在Linux内核中不断发展，并且也正在被添加到Windows操作系统中。在本章中，我们将探讨这项技术的未来发展路径。
- en: Since it was introduced within the Linux kernel, BPF has evolved into its own
    subsystem with its own mailing list and maintainers.^([1](ch11.html#ch11fn1))
    As eBPF’s popularity increased and interest broadened beyond the Linux kernel
    community, it made sense to create a neutral body that could coordinate among
    the different parties involved. That body is the eBPF Foundation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自从在Linux内核中引入以来，BPF已经发展成为一个拥有自己的子系统、自己的邮件列表和维护者的独立实体。随着eBPF的流行和兴趣超出了Linux内核社区，创建一个中立的机构来协调各方的利益是有意义的。这个机构就是eBPF基金会。
- en: The eBPF Foundation
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: eBPF基金会
- en: The [eBPF Foundation](https://ebpf.io/foundation) was set up in 2021 by Google,
    Isovalent, Meta (then known as Facebook), Microsoft, and Netflix, under the auspices
    of the Linux Foundation. The foundation acts as a neutral body that can hold funds
    and intellectual property, such that various commercial companies can collaborate
    with one another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[eBPF基金会](https://ebpf.io/foundation)是由Google、Isovalent、Meta（当时称为Facebook）、微软和Netflix在Linux基金会的支持下于2021年成立的。该基金会作为一个中立的机构，可以持有资金和知识产权，以便各个商业公司之间可以进行合作。'
- en: The intent was not to change anything about the way eBPF technology is developed
    by the Linux kernel community and contributors to the Linux BPF subsystem. The
    foundation’s activities are directed by the BPF Steering Committee, which is entirely
    composed of the technical experts who build the technology, including the Linux
    kernel BPF maintainers and representatives from other core eBPF projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 基金会的活动由BPF指导委员会负责，该委员会完全由构建技术的技术专家组成，包括Linux内核BPF维护者和其他核心eBPF项目的代表。
- en: The eBPF Foundation focuses on eBPF as a technology platform and the ecosystem
    of tools that enable eBPF development. Projects that build on top of eBPF looking
    for neutral ownership may find a better home in other foundations. For example,
    Cilium, Pixie, and Falco are all part of the CNCF, which makes sense as they are
    all intended to be used in cloud native environments.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF基金会专注于eBPF作为技术平台以及支持eBPF开发的工具生态系统。寻求中立所有权的基于eBPF的项目可能会在其他基金会中找到更好的归属地。例如，Cilium、Pixie和Falco都是CNCF的一部分，这是有道理的，因为它们都旨在在云原生环境中使用。
- en: One of the key drivers of this collaboration beyond the existing Linux maintainers
    was the interest that Microsoft had in developing eBPF within the Windows operating
    system. This brings about a need to define a standard for eBPF,^([2](ch11.html#ch11fn2))
    such that programs written for one OS can be used on another. This work is being
    done under the auspices of the eBPF Foundation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了现有的Linux维护者之外，这种合作的一个关键推动因素是微软对在Windows操作系统中开发eBPF的兴趣。这带来了一个需要定义eBPF标准的需求，以便可以在一个操作系统上编写的程序可以在另一个操作系统上使用。这项工作是在eBPF基金会的支持下进行的。
- en: eBPF for Windows
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows上的eBPF
- en: Work is well underway at Microsoft to support [eBPF for Windows](https://oreil.ly/ArwkR).
    As I write this in the closing months of 2022, there are already [functional demos](https://oreil.ly/H-0dv)
    that show Cilium Layer 4 load balancing and eBPF-based connection tracking running
    on Windows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微软正在积极开展支持[Windows上的eBPF](https://oreil.ly/ArwkR)的工作。截至我在2022年年底写下这篇文章时，已经有[功能演示](https://oreil.ly/H-0dv)显示Cilium第4层负载平衡和基于eBPF的连接跟踪在Windows上运行。
- en: I’ve said before that eBPF programming is kernel programming, and at first glance
    it might seem unintuitive that a program written to run in the Linux kernel and
    that has access to Linux kernel data structures would in any way be able to operate
    in an entirely different operating system. But in practice, particularly when
    it comes to networking, all operating systems will have quite a lot in common.
    A network packet has the same structure whether it was created on a Windows or
    Linux machine, and the layers of the network stack have to be handled the same
    way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前说过eBPF编程是内核编程，乍一看，一个在Linux内核中运行并且可以访问Linux内核数据结构的程序在任何其他操作系统中都能运行似乎有些不合常理。但实际上，特别是在网络方面，所有操作系统都有很多共同之处。无论是在Windows还是Linux机器上创建的网络数据包都具有相同的结构，网络堆栈的层次也必须以相同的方式处理。
- en: You’ll also recall that eBPF programs consist of a set of bytecode instructions
    that are processed by a virtual machine (VM) implemented within the kernel. That
    VM can be implemented within Windows too!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，eBPF程序由一组字节码指令组成，这些指令由内核中实现的虚拟机（VM）处理。这个虚拟机也可以在Windows中实现！
- en: '[Figure 11-1](#architectural_overview_of_ebpf_for_wind) shows the eBPF for
    Windows architectural overview, taken from [the project’s GitHub repo](https://oreil.ly/Ii4j2).
    As you can see from this diagram, eBPF for Windows reuses some open source components
    from the existing eBPF ecosystem, such as *libbpf*, and the support in Clang for
    producing eBPF bytecode. The Linux kernel is licensed under GPL, and Windows is
    proprietary, so the Windows project can’t reuse any parts of the Linux kernel’s
    implementation of the verifier.^([3](ch11.html#ch11fn3)) Instead, it uses the
    [PREVAIL verifier](https://vbpf.github.io) and the [uBPF JIT compiler](https://oreil.ly/btrkJ)
    (both of which are permissively licensed so that they can be used by a broader
    range of projects and organizations).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-1显示了eBPF for Windows的架构概述，摘自该项目的GitHub存储库。正如您从这个图表中看到的，eBPF for Windows重用了现有eBPF生态系统中的一些开源组件，比如*libbpf*，以及Clang对生成eBPF字节码的支持。Linux内核是根据GPL许可的，而Windows是专有的，因此Windows项目无法重用Linux内核实现的任何部分。相反，它使用了[PREVAIL验证器](https://vbpf.github.io)和[uBPF
    JIT编译器](https://oreil.ly/btrkJ)（这两者都是宽松许可，因此可以被更广泛的项目和组织使用）。
- en: '![Architectural overview of eBPF for Windows, taken from https://oreil.ly/HxKsu](assets/lebp_1101.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![eBPF for Windows的架构概述，摘自https://oreil.ly/HxKsu](assets/lebp_1101.png)'
- en: Figure 11-1\. Architectural overview of eBPF for Windows, adapted from [*https://oreil.ly/HxKsu*](https://oreil.ly/HxKsu)
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-1. eBPF for Windows的架构概述，摘自[*https://oreil.ly/HxKsu*](https://oreil.ly/HxKsu)
- en: One interesting difference is that eBPF code is verified and JIT-compiled in
    a Windows Secure environment in user space rather than within the kernel (the
    uBPF interpreter shown in the kernel in [Figure 11-1](#architectural_overview_of_ebpf_for_wind)
    is used only in debug builds and not production environments).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的区别是，eBPF代码是在Windows安全环境中的用户空间中进行验证和JIT编译，而不是在内核中进行（内核中显示的uBPF解释器仅用于调试构建，而不是生产环境）。
- en: 'It would be unrealistic to expect that every single eBPF program written to
    run on Linux will work on Windows. But this isn’t so different from the challenge
    of getting eBPF programs to run on different Linux kernel versions: even with
    CO-RE support, internal kernel data structures can be changed as well as added
    or removed between versions. It is the eBPF programmer’s job to handle these possibilities
    gracefully.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 期望每个在Linux上运行的eBPF程序都能在Windows上运行是不现实的。但这与让eBPF程序在不同的Linux内核版本上运行的挑战并没有太大不同：即使有CO-RE支持，内部内核数据结构也可能在版本之间发生更改、添加或删除。eBPF程序员的工作是优雅地处理这些可能性。
- en: Speaking of changes to the Linux kernel, what changes can we expect to see in
    eBPF in the coming years?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 说到Linux内核的变化，未来几年我们可以期待在eBPF中看到哪些变化呢？
- en: Linux eBPF Evolution
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux eBPF的发展
- en: The capabilities of eBPF have evolved with practically every kernel release
    since 3.15\. If you want to know what features are available in any given version,
    the BCC project maintains a [useful list](https://oreil.ly/4H5hU). And I certainly
    expect more additions over the coming years.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自3.15版以来，eBPF的功能已经随着几乎每个内核版本的发布而发展。如果您想知道任何给定版本中可用的功能，BCC项目维护了一个[有用的列表](https://oreil.ly/4H5hU)。我当然期待在未来几年中会有更多的添加。
- en: The best way to predict what’s coming is simply to listen to the people who
    are working on it. For example, at the 2022 Linux Plumbers Conference, eBPF maintainer
    Alexei Starovoitov gave a talk discussing how he expects to see the C language
    used by eBPF programs to evolve.^([4](ch11.html#ch11fn4)) We’ve already seen eBPF
    evolve from supporting a few thousand instructions to practically unlimited complexity,
    with the addition of support for loops and an ever-increasing set of BPF helper
    functions. As additional capabilities are added into the C that’s supported, and
    with the support of the verifier, eBPF C could evolve to allow all the flexibility
    of developing kernel modules, but with the safety and dynamic loading characteristics
    of eBPF.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 预测即将发生的事情的最好方法就是听取正在从事该工作的人的意见。例如，在2022年Linux Plumbers Conference上，eBPF维护者Alexei
    Starovoitov发表了一次演讲，讨论了他对eBPF程序中C语言的使用预期会如何发展。我们已经看到eBPF从支持几千条指令发展到几乎无限的复杂性，增加了对循环的支持以及不断增加的BPF辅助函数集。随着支持的C语言中添加了额外的功能，并且有了验证器的支持，eBPF
    C可能会发展到允许所有内核模块开发的灵活性，但具有eBPF的安全性和动态加载特性。
- en: 'Some of the other ideas being discussed and developed for new eBPF features
    and capabilities include:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些正在讨论和开发的新eBPF功能和能力的想法包括：
- en: Signed eBPF programs
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的eBPF程序
- en: Software supply chain security has been a hot topic for the past few years,
    and a key element is the ability to check that a program you’re thinking of running
    comes from the expected source and has not been tampered with. One way to achieve
    this is, in general, to validate a cryptographic signature that accompanies a
    program. You might think this is something the kernel could do for eBPF programs,
    perhaps as part of the verification step, but unfortunately this is not straightforward!
    As you’ve seen in this book, user space loaders dynamically adjust programs with
    information about where maps are located, and for CO-RE purposes, which from a
    signing perspective is hard to distinguish from malicious modifications. This
    is a problem for which the eBPF community is [keen to find a solution](https://oreil.ly/ns03-).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 软件供应链安全是过去几年的热门话题，其中一个关键要素是能够检查您打算运行的程序是否来自预期的来源，并且没有被篡改。一种实现这一点的方法是通常验证伴随程序的加密签名。您可能认为这是内核可以为eBPF程序执行的一种操作，也许作为验证步骤的一部分，但不幸的是这并不简单！正如您在本书中所看到的，用户空间加载程序会动态调整程序，提供有关地图位置的信息，以及用于CO-RE目的的信息，从签名的角度来看，这很难与恶意修改区分开来。这是eBPF社区急于找到解决方案的问题。
- en: Long-lived kernel pointers
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 长期内核指针
- en: An eBPF program can retrieve a pointer to a kernel object using a helper function
    or a kfunc, but a pointer is valid only during that execution of the program.
    The pointer cannot be stored in a map for later retrieval. The idea of [typed
    pointer support](https://oreil.ly/fWVdo) will allow for more flexibility in this
    area.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF程序可以使用辅助函数或kfunc检索内核对象的指针，但指针仅在程序执行期间有效。指针不能存储在地图中以供以后检索。[类型指针支持](https://oreil.ly/fWVdo)的想法将在这个领域提供更多的灵活性。
- en: Memory allocation
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分配
- en: It’s not safe for eBPF programs to simply call memory allocation functions like
    `kmalloc()`, but there is [a proposal that suggests](https://oreil.ly/Yxxc5) an
    eBPF-specific alternative.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于eBPF程序来说，简单调用`kmalloc()`等内存分配函数是不安全的，但有[一个提议建议](https://oreil.ly/Yxxc5)使用eBPF特定的替代方法。
- en: When will you be able to take advantage of new eBPF features as they emerge?
    As an end user, the features you’re able to take advantage of depend on the version
    of the kernel you’re running in production, and as I discussed in [Chapter 1](ch01.html#what_is_ebpf_and_why_is_it_importantque),
    it can take several years for kernel releases to make it to stable distributions
    of Linux. As an individual you might opt for a bleeding-edge kernel, but the vast
    majority of organizations running server deployments use a stable, supported version.
    eBPF programmers have to take into account that if they write code that takes
    advantage of the newest features added to the kernel, the features are unlikely
    to be usable in most production environments for some years to come. Some organizations
    will have sufficiently urgent needs that it’s worth rolling out newer kernel versions
    more quickly in order to early-adopt new eBPF features.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你什么时候能够利用新的eBPF功能？作为最终用户，你能够利用的功能取决于你在生产中运行的内核版本，正如我在[第1章](ch01.html#what_is_ebpf_and_why_is_it_importantque)中所讨论的，内核发布需要数年时间才能到达Linux的稳定发行版。作为个人，你可能会选择最前沿的内核，但绝大多数运行服务器部署的组织使用稳定、受支持的版本。eBPF程序员必须考虑到，如果他们编写的代码利用了内核新增的最新功能，这些功能在未来几年内可能无法在大多数生产环境中使用。一些组织可能有足够紧急的需求，值得更快地推出更新的内核版本，以便更早地采用新的eBPF功能。
- en: For example, in another forward-looking talk on [building tomorrow’s networking](https://oreil.ly/IvPgd),
    Daniel Borkmann discussed a feature called *Big TCP*. This was added to Linux
    in version 5.19 to enable network speeds of 100 GBit/s (and faster) by batching
    up network packets to be processed in the kernel. Most Linux distributions won’t
    support a kernel this recent for a few years, but for specialist organizations
    dealing with large amounts of network traffic, it might well be worth upgrading
    sooner. Adding Big TCP support into eBPF and Cilium today means it’s available
    for those massive-scale users, even if it’s not something that can be enabled
    by most of us for a while.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在另一场关于[构建明天的网络](https://oreil.ly/IvPgd)的前瞻性演讲中，Daniel Borkmann讨论了一个名为*Big
    TCP*的功能。这是在Linux 5.19版本中添加的，以便通过批处理网络数据包在内核中处理，实现100 GBit/s（甚至更快）的网络速度。大多数Linux发行版在未来几年内不会支持这么新的内核，但对于处理大量网络流量的专业组织来说，更早升级可能是值得的。今天将Big
    TCP支持添加到eBPF和Cilium中，这意味着对于这些大规模用户来说，即使大多数人暂时无法启用它，它也是可用的。
- en: Since eBPF allows kernel code to be adjusted dynamically, it’s reasonable to
    expect it to be used to address problems “in the field.” In [Chapter 9](ch09.html#ebpf_for_security)
    you read about using eBPF to mitigate kernel vulnerabilities; work is also underway
    to use eBPF to help support hardware devices such as [human interface devices](https://oreil.ly/JVYcY)
    like mice, keyboards, and game controllers. This builds on existing support for
    decoding the protocols used by infrared controllers that I mentioned in [Chapter 7](ch07.html#ebpf_program_and_attachment_types).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于eBPF允许内核代码动态调整，合理地期望它被用于解决“现场”问题。在[第9章](ch09.html#ebpf_for_security)中，你了解到使用eBPF来缓解内核漏洞；还有工作正在进行，使用eBPF来帮助支持硬件设备，比如[人机接口设备](https://oreil.ly/JVYcY)，如鼠标、键盘和游戏控制器。这是在我在[第7章](ch07.html#ebpf_program_and_attachment_types)中提到的解码红外控制器使用的协议的基础上构建的。
- en: eBPF Is a Platform, Not a Feature
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: eBPF是一个平台，而不是一个功能
- en: Coming up to a decade ago, the hot new technology was containers, and it seemed
    as though everyone was talking about what they were and what advantages they would
    bring. We’re at a similar stage with eBPF today, with lots of conference talks
    and blog posts—several of which I’ve referred to in this book—extolling the benefits
    of eBPF. Today, containers are part of daily life for many developers, whether
    they’re running code locally using Docker or other container runtimes, or deploying
    code to Kubernetes environments. Will eBPF become part of everyone’s regular toolkit
    too?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将近十年前，热门的新技术是容器，似乎每个人都在谈论它们以及它们将带来的优势。今天，我们对eBPF也处于类似的阶段，有很多会议演讲和博客文章——本书中我提到的几篇——赞扬eBPF的好处。今天，对许多开发人员来说，容器已经成为日常生活的一部分，无论是使用Docker或其他容器运行时在本地运行代码，还是将代码部署到Kubernetes环境中。eBPF是否也会成为每个人的常规工具包的一部分呢？
- en: The answer, I believe, is no—or at least, not directly. Most users won’t write
    eBPF programs directly or manipulate them manually with utilities like `bpftool`.
    But they’ll interact regularly with tools built using eBPF, whether that’s for
    performance measurement, debugging, networking, security, tracing, or a whole
    host of other capabilities yet to be implemented using eBPF. Users might not be
    aware that they’re using eBPF, much as they might not know that when they use
    containers, they’re using kernel features like namespaces and cgroups.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为答案是否定的，或者至少不是直接的。大多数用户不会直接编写eBPF程序，也不会使用`bpftool`等工具手动操作它们。但他们将经常与使用eBPF构建的工具进行交互，无论是用于性能测量、调试、网络、安全、跟踪，还是其他许多尚未使用eBPF实现的功能。用户可能不知道他们在使用eBPF，就像他们可能不知道当他们使用容器时，他们在使用像命名空间和cgroups这样的内核功能一样。
- en: Today, projects and vendors with knowledge of eBPF highlight their use of it
    because it’s so powerful and implies many advantages. As eBPF-based projects and
    products gain traction and market share, eBPF is becoming the de facto default
    technology platform for infrastructure tooling.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，具有eBPF知识的项目和供应商强调他们的使用，因为它非常强大，并意味着许多优势。随着基于eBPF的项目和产品获得市场份额，eBPF正在成为基础设施工具的事实上的默认技术平台。
- en: Knowledge of eBPF programming is—and will continue to be—a sought-after but
    relatively rare skill, just as kernel development today is much less common than
    developing, say, business applications or games. If you enjoy diving into the
    lower levels of systems and want to build essential infrastructure tooling, eBPF
    skills will serve you well. I hope this book has been of some assistance on your
    eBPF journey!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF编程知识是一种受欢迎但相对罕见的技能，就像今天内核开发比开发商业应用或游戏要少得多一样。如果您喜欢深入系统的底层并且想要构建基本的基础设施工具，eBPF技能将对您有所帮助。我希望本书对您的eBPF之旅有所帮助！
- en: Conclusion
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations on reaching the end of this book!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您完成了本书的阅读！
- en: I hope that reading *Learning eBPF* has given you insight into the power of
    eBPF. Perhaps it has inspired you to write eBPF code yourself or experiment with
    some of the tools I’ve discussed. If you’ve decided to do some eBPF programming,
    I hope the book has given you some confidence about how to get started. And if
    you have been completing the exercises as you worked through the book, bravo!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望阅读《学习eBPF》能让您了解eBPF的强大之处。也许它已经激发了您自己编写eBPF代码或尝试我讨论过的一些工具的兴趣。如果您决定进行一些eBPF编程，我希望本书能让您对如何入门有些信心。如果您在阅读本书的过程中完成了练习，那太棒了！
- en: If you’re excited about eBPF there are plenty of ways to get involved in the
    community. The best starting point is the website [ebpf.io](http://ebpf.io). This
    will point you to the latest news, projects, events, and happenings, and also
    to the [eBPF Slack](http://ebpf.io/slack) channel where you’re likely to find
    someone with the expertise to answer any questions you might have.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对eBPF感兴趣，有很多参与社区的方式。最好的起点是网站[ebpf.io](http://ebpf.io)。这将指引你了解最新的新闻、项目、事件和发生的事情，还有[eBPF
    Slack](http://ebpf.io/slack)频道，你可能会找到有专业知识的人来回答你可能有的任何问题。
- en: 'I welcome your feedback, comments, and any corrections to this text. You can
    provide your input through the GitHub repository that accompanies this book: [*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf).
    I’d also be happy to hear your comments directly. You can find me as @lizrice
    in many places across the internet.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我欢迎您对这篇文章提出反馈、评论和任何更正意见。您可以通过伴随本书的GitHub存储库[*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf)提供您的意见。我也很乐意直接听取您的评论。您可以在互联网的许多地方找到我，用户名为@lizrice。
- en: ^([1](ch11.html#ch11fn1-marker)) Shout-out to Alexei Starovoitov and Andrii
    Nakryiko from Meta, and Daniel Borkmann from Isovalent, who maintain the BPF subtree
    in the Linux kernel.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 致谢Meta的Alexei Starovoitov和Andrii Nakryiko，以及Isovalent的Daniel Borkmann，他们在Linux内核中维护BPF子树。
- en: ^([2](ch11.html#ch11fn2-marker)) [Dave Thaler presented on the state of this
    standardization work](https://oreil.ly/4bo6Y) at the Linux Plumbers Conference.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 2. [Dave Thaler在Linux Plumbers Conference上介绍了这项标准化工作的进展](https://oreil.ly/4bo6Y)。
- en: ^([3](ch11.html#ch11fn3-marker)) Well, it *could*, but doing so would require
    Microsoft to also release the Windows source code under the GPL license.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 嗯，*可能*，但这样做需要微软也以GPL许可证发布Windows源代码。
- en: ^([4](ch11.html#ch11fn4-marker)) Alexei Starovoitov discusses the journey of
    BPF from restricted C language to extended and safe C [in this video](https://oreil.ly/xunKW).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 4. Alexei Starovoitov在[这个视频](https://oreil.ly/xunKW)中讨论了BPF从受限的C语言到扩展和安全C的发展历程。

- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: The programming technique of recursion can produce elegant code solutions. More
    often, however, it produces confused programmers. This doesn’t mean programmers
    can (or should) ignore recursion. Despite its reputation for being challenging,
    recursion is an important computer science topic and can yield keen insights into
    programming itself. At the very least, knowing recursion can help you nail a coding
    job interview.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 递归编程技术可以产生优雅的代码解决方案。然而，更常见的情况是它会使程序员感到困惑。这并不意味着程序员可以（或应该）忽视递归。尽管它以具有挑战性而闻名，但递归是一个重要的计算机科学主题，可以为编程本身提供深刻的见解。至少，了解递归可以帮助你在编程工作面试中脱颖而出。
- en: If you’re a student with an interest in computer science, recursion is a necessary
    hurdle you’ll have to overcome to understand many popular algorithms. If you’re
    a programming bootcamp graduate or self-taught programmer who managed to bypass
    the more theoretical computer science topics, recursion problems are still sure
    to come up during whiteboard coding interviews. And if you’re an experienced software
    engineer who has never touched a recursive algorithm before, you might find recursion
    to be an embarrassing gap in your knowledge.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个对计算机科学感兴趣的学生，递归是一个必须克服的障碍，以理解许多流行的算法。如果你是一个编程训练营的毕业生或自学的程序员，成功地绕过了更理论性的计算机科学主题，递归问题仍然会在白板编程面试中出现。如果你是一个有经验的软件工程师，在之前从未接触过递归算法，你可能会发现递归是你知识中一个令人尴尬的空白。
- en: There’s no need to worry. Recursion isn’t as hard to understand as it is to
    teach. As I’ll explain in Chapter 1, I attribute the widespread misunderstanding
    of recursion to poor instruction rather than any inherent difficulty. And since
    recursive functions aren’t commonly used in day-to-day programming, many folks
    get along just fine without them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心。递归并不像教授它那样难以理解。正如我将在第1章中解释的那样，我认为递归的普遍误解是由于教学不佳而不是任何固有的困难。由于递归函数在日常编程中并不常用，许多人可以很好地没有它们。
- en: But a certain conceptual beauty lies behind recursive algorithms that can aid
    your understanding of programming even if you don’t often apply them. Recursion
    has a visual beauty as well. The technique is behind the amazing mathematical
    art of *fractals*, the self-similar shapes shown in Figure 1.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但递归算法背后存在着一定的概念美，即使你不经常应用它们，也可以帮助你理解编程。递归也有视觉美。这种技术是*分形*的惊人数学艺术的基础，如图1所示的自相似形状。
- en: '![](image_fi/502024f07/f00001.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502024f07/f00001.png)'
- en: 'Figure 1: These examples of fractals include a Sierpiński triangle (left),
    a Hilbert curve (center), and a Koch snowflake (right).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：这些分形的例子包括Sierpiński三角形（左）、希尔伯特曲线（中）和科赫雪花（右）。
- en: However, this book is not entirely in praise of recursion. I include some sharp
    criticisms of this technique. Recursion is overused in cases where a simpler solution
    exists. Recursive algorithms can be hard to understand, have worse performance,
    and are susceptible to crash-causing stack overflow errors. And a certain kind
    of programmer may use recursion not because it’s the right technique for a given
    problem, but simply because they feel smarter when they write code that other
    programmers struggle to understand. Computer scientist Dr. John Wilander once
    said, “When you finish a PhD in computer science, they take you to a special room
    and explain that you must never use recursion in real life. Its only purpose is
    to make programming hard for undergrads.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这本书并不完全是在赞美递归。我对这种技术提出了一些尖锐的批评。在存在更简单解决方案的情况下，递归被过度使用。递归算法可能难以理解，性能较差，并容易导致堆栈溢出错误。某种类型的程序员可能使用递归，并不是因为它是解决特定问题的正确技术，而只是因为他们觉得当他们编写其他程序员难以理解的代码时更聪明。计算机科学家约翰·威兰德博士曾说过：“当你在计算机科学领域获得博士学位时，他们会带你去一个特殊的房间，并解释你绝不能在现实生活中使用递归。它的唯一目的是让本科生的编程变得困难。”
- en: 'So, whether you want to get an edge in coding interviews, you want to create
    beautiful mathematical art, or you stubbornly seek to finally understand the intriguing
    properties of this concept, this book will be your guide down the rabbit hole
    that is recursion (and the rabbit holes within that rabbit hole). Recursion is
    one of the computer science topics that separates the professionals from the beginners.
    By reading this book, you’ll master a great skill and learn its dark secret: recursion
    isn’t as complicated as people think it is.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论你是想在编程面试中获得优势，想创建美丽的数学艺术，还是固执地寻求最终理解这个概念的迷人特性，这本书将是你进入递归的兔子洞的向导（以及兔子洞内部的兔子洞）。递归是计算机科学中将专业人士与初学者区分开的主题之一。通过阅读本书，你将掌握一项重要的技能，并了解它的黑暗秘密：递归并不像人们想象的那么复杂。
- en: Who Is This Book For?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这本书是为谁写的？
- en: This book is for those who are intimidated or intrigued by recursive algorithms.
    Recursion is one of those topics that seems like black magic to beginner programmers
    or freshman computer science students. Most recursion lessons are hard to follow
    and make the subject seem frustrating, even fearsome. For these readers, I hope
    this book’s direct explanations and ample examples can help make the topic finally
    click.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为那些对递归算法感到害怕或感兴趣的人写的。递归是一个对初学者或大一计算机科学学生来说似乎像黑魔法的主题之一。大多数递归课程很难理解，使这个主题看起来令人沮丧，甚至可怕。对于这些读者，我希望本书直接的解释和丰富的例子可以帮助他们最终理解这个主题。
- en: The only prerequisite for this book is basic programming experience with either
    the Python or JavaScript programming languages, which the chapters’ code examples
    use. The book’s programs have been stripped down to their essences; if you know
    how to call and create functions and the difference between global and local variables,
    you know enough to work through the programming examples.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的唯一先决条件是具有Python或JavaScript编程语言的基本编程经验，这些章节的代码示例使用这些语言。本书的程序已经被简化到它们的本质；如果你知道如何调用和创建函数以及全局变量和局部变量之间的区别，你就足够了。
- en: About This Book
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于本书
- en: 'This book has 14 chapters:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书共有14章：
- en: '**Part I: Understanding Recursion**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一部分：理解递归**'
- en: 'Chapter 1: What Is Recursion? Explains recursion and how it is the natural
    result of the way programming languages implement functions and function calls.
    This chapter also argues that recursion isn’t nearly the elegant, mystical concept
    many claim it is.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第1章：什么是递归？解释了递归以及它是编程语言实现函数和函数调用的自然结果。本章还认为递归并不像许多人声称的那样优雅、神秘。
- en: 'Chapter 2: Recursion vs. Iteration Dives into the differences (and many similarities)
    between recursive and iterative techniques.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第2章：递归与迭代深入探讨了递归和迭代技术之间的差异（以及许多相似之处）。
- en: 'Chapter 3: Classic Recursion Algorithms Covers famous recursive programs such
    as the Tower of Hanoi, the flood fill algorithm, and others.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第3章：经典递归算法涵盖了著名的递归程序，如汉诺塔、泛洪填充算法等。
- en: 'Chapter 4: Backtracking and Tree Traversal Algorithms Discusses a problem for
    which recursion is particularly suited: traversing tree data structures, such
    as when solving mazes and navigating a directory.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第4章：回溯和树遍历算法讨论了递归特别适用的问题：遍历树数据结构，比如解决迷宫和导航目录时。
- en: 'Chapter 5: Divide-and-Conquer Algorithms Discusses how recursion is useful
    for splitting large problems into smaller subproblems and covers several common
    divide-and-conquer algorithms.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第5章：分治算法讨论了递归如何将大问题分解为更小的子问题，并涵盖了几种常见的分治算法。
- en: 'Chapter 6: Permutations and Combinations Covers recursive algorithms involving
    ordering and matching, as well as the common programming problems to which these
    techniques are applied.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第6章：排列和组合涵盖了涉及排序和匹配的递归算法，以及这些技术应用到的常见编程问题。
- en: 'Chapter 7: Memoization and Dynamic Programming Explains some simple tricks
    to improve code efficiency when applying recursion in the real world.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第7章：记忆化和动态规划解释了一些简单的技巧，以提高在现实世界中应用递归时的代码效率。
- en: 'Chapter 8: Tail Call Optimization Covers tail call optimization, a common technique
    used to improve the performance of recursive algorithms, and how it works.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第8章：尾递归优化涵盖了尾递归优化，这是一种用于改进递归算法性能的常见技术，以及它的工作原理。
- en: 'Chapter 9: Drawing Fractals Tours the intriguing art that can be programmatically
    produced by recursive algorithms. This chapter makes use of turtle graphics for
    generating its images.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第9章：绘制分形介绍了可以通过递归算法以编程方式生成的有趣艺术。本章利用海龟图形生成其图像。
- en: '**Part II: Projects**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二部分：项目**'
- en: 'Chapter 10: File Finder Covers a project that searches through the files on
    your computer according to custom search parameters you provide.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第10章：文件查找器涵盖了一个可以根据您提供的自定义搜索参数搜索计算机上文件的项目。
- en: 'Chapter 11: Maze Generator Covers a project that automatically generates mazes
    of any size using the recursive backtracker algorithm.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第11章：迷宫生成器涵盖了一个自动生成任意大小迷宫的项目，使用了递归回溯算法。
- en: 'Chapter 12: Sliding-Tile Solver Covers a project that solves sliding-tile puzzles,
    also called 15-puzzles.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第12章：滑块拼图求解器涵盖了一个解决滑块拼图（也称为15拼图）的项目。
- en: 'Chapter 13: Fractal Art Maker Explores a project that can produce custom fractal
    art of your own design.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第13章：分形艺术制作者探索了一个可以制作自己设计的自定义分形艺术的项目。
- en: 'Chapter 14: Droste Maker Explores a project that produces recursive, picture-in-picture
    images using the Pillow image-manipulation module.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第14章：Droste制作者探索了一个使用Pillow图像处理模块制作递归图片的项目。
- en: Hands-On, Experimental Computer Science
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手实验计算机科学
- en: Reading about recursion won’t teach you how to implement it on its own. This
    book includes many recursive code examples in both the Python and JavaScript programming
    languages for you to experiment with. If you’re new to programming, you can read
    my book *Automate the Boring Stuff with Python,* 2nd edition (No Starch Press,
    2019), or *Python Crash Course*, 2nd edition, by Eric Matthes (No Starch Press,
    2019) for an introduction to both programming and the Python programming language.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 单单阅读关于递归的内容并不能教会你如何独立实现它。本书包含了许多Python和JavaScript编程语言的递归代码示例供您实验。如果您是编程新手，您可以阅读我的书《用Python自动化繁琐工作》，第二版（No
    Starch Press，2019年），或者Eric Matthes的《Python编程快速上手》，第二版（No Starch Press，2019年）来介绍编程和Python编程语言。
- en: I recommend stepping through these programs with a debugger. A *debugger* lets
    you execute programs one line at a time and inspect the state of the program along
    the way, allowing you to pinpoint where bugs occur. Chapter 11 of *Automate the
    Boring Stuff with Python,* 2nd edition, covers how to use the Python debugger
    and is free to read online at [https://automatetheboringstuff.com/2e/chapter11](https://automatetheboringstuff.com/2e/chapter11).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用调试器逐行执行这些程序。 *调试器*允许您逐行执行程序并检查程序的状态，从而可以准确定位错误发生的位置。《用Python自动化繁琐工作》，第二版，第11章介绍了如何使用Python调试器，并可在[https://automatetheboringstuff.com/2e/chapter11](https://automatetheboringstuff.com/2e/chapter11)免费在线阅读。
- en: 'The chapters in this book display the Python and JavaScript code examples together.
    The Python code is saved in a *.py* file, and the JavaScript code in an *.html*
    file (not a *.js* file). For example, take the following *hello.py* file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的章节展示了Python和JavaScript代码示例。Python代码保存在*.py*文件中，JavaScript代码保存在*.html*文件中（而不是*.js*文件）。例如，看下面的*hello.py*文件：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And the following *hello.html* file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以下的*hello.html*文件：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The two code listings act as a Rosetta stone, describing programs that produce
    the same results in two different languages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个代码清单充当了一块罗塞塔石，描述了以两种不同语言产生相同结果的程序。
- en: I encourage you to manually copy these programs by using your keyboard, rather
    than simply copying and pasting their source code into a new file. This helps
    your “muscle memory” of the programs and forces you to consider each line as you
    type it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励您使用键盘手动复制这些程序，而不是简单地将它们的源代码复制粘贴到一个新文件中。这有助于您对程序的“肌肉记忆”，并迫使您在输入每一行时考虑它。
- en: The *.html* files are technically not valid because they’re missing several
    necessary HTML tags, such as `<html>` and `<body>`, but your browser will still
    be able to display the output. These tags have been left out on purpose. The programs
    in this book are written for simplicity and readability, not to demonstrate web
    development best practices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*.html*文件在技术上不是有效的，因为它们缺少几个必要的HTML标签，例如`<html>`和`<body>`，但您的浏览器仍然可以显示输出。这些标签是故意省略的。本书中的程序是为了简单和可读性而编写的，而不是为了展示Web开发的最佳实践。'
- en: Installing Python
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Python
- en: While every computer has a web browser that can view the *.html* files in this
    book, you must install Python separately if you wish to run the book’s Python
    code. You can download Python for Microsoft Windows, Apple macOS, and Ubuntu Linux
    for free from [https://python.org/downloads](https://python.org/downloads). Be
    sure to download a version of Python 3 (such as 3.10) and not Python 2\. Python
    3 made a few backward-incompatible changes to the language, and the programs in
    this book may not run correctly, if at all, on Python 2.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每台计算机都有一个可以查看本书中*.html*文件的Web浏览器，但如果您希望运行本书的Python代码，则必须单独安装Python。您可以从[https://python.org/downloads](https://python.org/downloads)免费下载Microsoft
    Windows、Apple macOS和Ubuntu Linux的Python。确保下载Python 3的版本（如3.10），而不是Python 2。Python
    3对语言进行了一些不兼容的更改，本书中的程序可能无法在Python 2上正确运行，如果能运行的话。
- en: Running IDLE and the Python Code Examples
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行IDLE和Python代码示例
- en: You can use the IDLE editor that comes with Python to write your Python code
    or install a free editor, such as the Mu Editor from [https://codewith.mu](https://codewith.mu),
    PyCharm Community Edition from [https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download),
    or Microsoft Visual Studio Code from [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Python自带的IDLE编辑器编写Python代码，也可以安装免费的编辑器，例如来自[https://codewith.mu](https://codewith.mu)的Mu编辑器，来自[https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download)的PyCharm社区版，或来自[https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)的Microsoft
    Visual Studio Code。
- en: To open IDLE on Windows, open the Start menu in the lower-left corner of your
    screen, enter `IDLE` in the search box, and select **IDLE (Python 3.10 64-bit)**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上打开IDLE，打开屏幕左下角的开始菜单，在搜索框中输入`IDLE`，然后选择**IDLE（Python 3.10 64位）**。
- en: On macOS, open the Finder window and click **Applications**▶**Python 3.10**,
    and then the IDLE icon.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，打开Finder窗口，点击**应用程序**▶**Python 3.10**，然后点击IDLE图标。
- en: On Ubuntu, select **Applications**▶**Accessories**▶**Terminal** and then enter
    `IDLE 3`. You may also be able to click **Applications** at the top of the screen,
    select **Programming**, and then click **IDLE 3**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu上，选择**应用程序**▶**附件**▶**终端**，然后输入`IDLE 3`。您也可以点击屏幕顶部的**应用程序**，选择**编程**，然后点击**IDLE
    3**。
- en: IDLE has two types of windows. The interactive shell window has the `>>>` prompt
    and is used for running Python instructions one at a time. This is useful when
    you want to experiment with bits of Python code. The file editor window is where
    you can enter full Python programs and save them as *.py* files. This is how you’ll
    enter the source code for the Python programs in this book. To open a new file
    editor window, click **File**▶**New File**. You can run the programs by clicking
    **Run**▶**Run Module** or pressing **F5**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE有两种类型的窗口。交互式shell窗口有`>>>`提示符，用于逐个运行Python指令。当您想要尝试Python代码的一部分时，这是很有用的。文件编辑器窗口是您可以输入完整的Python程序并将它们保存为*.py*文件的地方。这是您将输入本书中Python程序的源代码的方式。要打开新的文件编辑器窗口，点击**文件**▶**新建文件**。您可以通过点击**运行**▶**运行模块**或按**F5**来运行程序。
- en: Running the JavaScript Code Examples in the Browser
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在浏览器中运行JavaScript代码示例
- en: Your computer’s web browser can run the JavaScript programs and display their
    output, but to write JavaScript code, you’ll need a text editor. A simple program
    like Notepad or TextMate will do, but you can also install text editors specifically
    for writing code, such as IDLE or Sublime Text from [https://www.sublimetext.com](https://www.sublimetext.com).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您的计算机的Web浏览器可以运行JavaScript程序并显示它们的输出，但要编写JavaScript代码，您需要一个文本编辑器。像记事本或TextMate这样的简单程序就可以，但您也可以安装专门用于编写代码的文本编辑器，例如来自[https://www.sublimetext.com](https://www.sublimetext.com)的IDLE或Sublime
    Text。
- en: After typing the code for your JavaScript programs, save the files as *.html*
    files, not *.js* files. Open them in a web browser to view the results. Any modern
    web browser works for this purpose.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入JavaScript程序代码后，将文件保存为*.html*文件，而不是*.js*文件。在Web浏览器中打开它们以查看结果。任何现代Web浏览器都可以用于此目的。

- en: Part II. Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part explains the history and nature of JavaScript. It provides a broad
    first look at the language and explains the context in which it exists (without
    going too much into technical details).
  prefs: []
  type: TYPE_NORMAL
- en: This part is not required reading; you will be able to understand the rest of
    the book without having read it.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2. Why JavaScript?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many programming languages out there. Why should you use JavaScript?
    This chapter looks at seven aspects that are important when you are choosing a
    programming language and argues that JavaScript does well overall:'
  prefs: []
  type: TYPE_NORMAL
- en: Is it freely available?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it an elegant programming language?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it useful in practice?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does it have good tools, especially good *integrated development environments*
    (IDEs)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it fast enough for what you want to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it widely used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does it have a future?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is JavaScript Freely Available?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript is arguably the most open programming language there is: ECMA-262,
    its specification, is an ISO standard. That specification is closely followed
    by many implementations from independent parties. Some of those implementations
    are open source. Furthermore, the evolution of the language is handled by TC39,
    a committee comprising several companies, including all major browser vendors.
    Many of those companies are normally competitors, but they work together for the
    benefit of the language.'
  prefs: []
  type: TYPE_NORMAL
- en: Is JavaScript Elegant?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes and no. I’ve written fair amounts of code in several programming languages
    from different paradigms. Therefore, I’m well aware that JavaScript isn’t the
    pinnacle of elegance. However, it is a very flexible language, has a reasonably
    elegant core, and enables you to use a mixture of object-oriented programming
    and functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: Language compatibility between JavaScript engines used to be a problem, but
    isn’t anymore, partly thanks to the [test262 suite](https://github.com/tc39/test262)
    that checks engines for conformance to the ECMAScript specification. In contrast,
    browser and DOM differences are still a challenge. That’s why it is normally best
    to rely on frameworks for hiding those differences.
  prefs: []
  type: TYPE_NORMAL
- en: Is JavaScript Useful?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most beautiful programming language in the world is useless unless it allows
    you to write the program that you need.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical User Interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the area of graphical user interfaces, JavaScript benefits from being part
    of *HTML5*. In this section, I use the term HTML5 for “the browser platform” (HTML,
    CSS, and browser JavaScript APIs). HTML5 is deployed widely and making constant
    progress. It is slowly becoming a complete layer for writing full-featured, cross-platform
    applications; similar to, say, the Java platform, it’s almost like an embedded
    operating system. One of HTML5’s selling points is that it lets you write cross-platform
    graphical user interfaces. Those are always a compromise: you give up some quality
    in exchange for not being limited to a single operating system. In the past, “cross-platform”
    meant Windows, Mac OS, or Linux. But we now have two additional interactive platforms:
    web and mobile. With HTML5, you can target all of these platforms via technologies
    such as [PhoneGap](http://phonegap.com), [Chrome Apps](http://developer.chrome.com/apps/),
    and [TideSDK](http://www.tidesdk.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, several platforms have web apps as native apps or let you install
    them natively—for example, Chrome OS, Firefox OS, and Android.
  prefs: []
  type: TYPE_NORMAL
- en: Other Technologies Complementing JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are more technologies than just HTML5 that complement JavaScript and
    make the language more useful:'
  prefs: []
  type: TYPE_NORMAL
- en: Libraries
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has an abundance of libraries, which enable you to complete tasks
    ranging from parsing JavaScript (via [Esprima](http://esprima.org)) to processing
    and displaying PDF files (via [PDF.js](https://github.com/mozilla/pdf.js)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Node.js](http://nodejs.org)'
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js platform lets you write server-side code and shell scripts (build
    tools, test runners, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: JSON (JavaScript Object Notation, covered in [Chapter 22](ch22.html "Chapter 22. JSON"))
  prefs: []
  type: TYPE_NORMAL
- en: JSON is a data format rooted in JavaScript that has become popular for exchanging
    data on the Web (e.g., the results of web services).
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases (such as [CouchDB](http://couchdb.apache.org) and [MongoDB](http://www.mongodb.org))
  prefs: []
  type: TYPE_NORMAL
- en: These databases tightly integrate JSON and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Does JavaScript Have Good Tools?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript is getting better build tools (e.g., [Grunt](http://gruntjs.com))
    and test tools (e.g., [mocha](http://visionmedia.github.io/mocha/)). Node.js makes
    it possible to run these kinds of tools via a shell (and not only in the browser).
    One risk in this area is fragmentation, as we are progressively getting too many
    of these tools.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript IDE space is still nascent, but it’s quickly growing up. The
    complexity and dynamism of web development make this space a fertile ground for
    innovation. Two open source examples are [Brackets](http://brackets.io) and [Light
    Table](http://www.lighttable.com).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, browsers are becoming increasingly capable development environments.
    Chrome, in particular, has made impressive progress recently. It will be interesting
    to see how much more IDEs and browsers will be integrated in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Is JavaScript Fast Enough?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript engines have made tremendous progress, evolving from slow interpreters
    to fast just-in-time compilers. They are now fast enough for most applications.
    Furthermore, new ideas are already in development to make JavaScript fast enough
    for the remaining applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[asm.js](http://asmjs.org/) is a (very static) subset of JavaScript that runs
    fast on current engines, approximately 70% as fast as compiled C++. It can, for
    example, be used to implement performance-critical algorithmic parts of web applications.
    It has also been used to port C++-based games to the web platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ParallelJS](http://www.2ality.com/2013/12/paralleljs.html) parallelizes JavaScript
    code that uses the new array methods `mapPar`, `filterPar`, and `reducePar` (parallelizable
    versions of the existing array methods `map`, `filter`, and `reduce`). In order
    for parallelization to work, callbacks must be written in a special style; the
    main restriction is that you can’t mutate data that hasn’t been created inside
    the callbacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is JavaScript Widely Used?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A language that is widely used normally has two benefits. First, such a language
    is better documented and supported. Second, more programmers know it, which is
    important whenever you need to hire someone or are looking for customers for a
    tool based on the language.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript is widely used and reaps both of the aforementioned benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: 'These days, documentation and support for JavaScript comes in all shapes and
    sizes: books, podcasts, blog posts, email newsletters, forums, and more. [Chapter 33](ch33.html
    "Chapter 33. What to Do Next") points you toward important resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript developers are in great demand, but their ranks are also constantly
    increasing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does JavaScript Have a Future?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several things indicate that JavaScript has a bright future:'
  prefs: []
  type: TYPE_NORMAL
- en: The language is evolving steadily; ECMAScript 6 looks good.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is much JavaScript-related innovation (e.g., the aforementioned asm.js
    and ParallelJS, Microsoft’s TypeScript, etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web platform of which JavaScript is an integral part is maturing rapidly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript is supported by a broad coalition of companies—no single person or
    company controls it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Considering the preceding list of what makes a language attractive, JavaScript
    is doing remarkably well. It certainly is not perfect, but at the moment, it is
    hard to beat—and things are only getting better.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3. The Nature of JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript’s nature can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s dynamic
  prefs: []
  type: TYPE_NORMAL
- en: Many things can be changed. For example, you can freely add and remove *properties*
    (fields) of objects after they have been created. And you can directly create
    objects, without creating an object factory (e.g., a class) first.
  prefs: []
  type: TYPE_NORMAL
- en: It’s dynamically typed
  prefs: []
  type: TYPE_NORMAL
- en: Variables and object properties can always hold values of any type.
  prefs: []
  type: TYPE_NORMAL
- en: It’s functional and object-oriented
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript supports two programming language paradigms: functional programming
    (first-class functions, closures, partial application via `bind()`, built-in `map()`
    and `reduce()` for arrays, etc.) and object-oriented programming (mutable state,
    objects, inheritance, etc.).'
  prefs: []
  type: TYPE_NORMAL
- en: It fails silently
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript did not have exception handling until ECMAScript 3\. That explains
    why the language so often fails silently and automatically converts the values
    of arguments and operands: it initially couldn’t throw exceptions.'
  prefs: []
  type: TYPE_NORMAL
- en: It’s deployed as source code
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript is always deployed as source code and compiled by JavaScript engines.
    Source code has the benefits of being a flexible delivery format and of abstracting
    the differences between the engines. Two techniques are used to keep file sizes
    small: *compression* (mainly gzip) and *minification* (making source code smaller
    by renaming variables, removing comments, etc.; see [Chapter 32](ch32.html "Chapter 32. More
    Tools") for details).'
  prefs: []
  type: TYPE_NORMAL
- en: It’s part of the web platform
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is such an essential part of the web platform (HTML5 APIs, DOM, etc.)
    that it is easy to forget that the former can also be used without the latter.
    However, the more JavaScript is used in nonbrowser settings (such as Node.js),
    the more obvious it becomes.
  prefs: []
  type: TYPE_NORMAL
- en: Quirks and Unorthodox Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On one hand, JavaScript has several quirks and missing features (for example,
    it has no block-scoped variables, no built-in modules, and no support for subclassing).
    Therefore, where you learn language features in other languages, you learn patterns
    and workarounds in JavaScript. On the other hand, JavaScript includes unorthodox
    features (such as prototypal inheritance and object properties). These, too, have
    to be learned, but are more a feature than a bug.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that JavaScript engines have become quite smart and fix some of the quirks,
    under the hood. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Specification-wise, JavaScript does not have integers, only floating-point numbers.
    Internally, most engines use integers as much as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arguably, arrays in JavaScript are too flexible: they are not indexed sequences
    of elements, but maps from numbers to elements. Such maps can have holes: indices
    “inside” the array that have no associated value. Again, engines help by using
    an optimized representation if an array does not have holes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elegant Parts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But JavaScript also has many elegant parts. Brendan Eich’s favorites are:^([[1](#ftn.id428034)])
  prefs: []
  type: TYPE_NORMAL
- en: First-class functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prototypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object literals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array literals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last two items, object literals and array literals, let you start with objects
    and introduce abstractions (such as constructors, JavaScript’s analog to classes)
    later. They also enable JSON (see [Chapter 22](ch22.html "Chapter 22. JSON")).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the elegant parts help you work around the quirks. For example, they
    allow you to implement block scoping, modules, and inheritance APIs—all within
    the language.
  prefs: []
  type: TYPE_NORMAL
- en: Influences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript was influenced by several programming languages (as shown in [Figure 3-1](ch03.html#fig3-1
    "Figure 3-1. Programming languages that influenced JavaScript.")):'
  prefs: []
  type: TYPE_NORMAL
- en: Java is the role model for JavaScript’s syntax. It also led to JavaScript’s
    partitioning of values into primitives and objects and to the `Date` constructor
    (which is a port of `java.util.Date`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWK inspired JavaScript’s functions. In fact, the keyword `function` comes from
    AWK.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scheme is the reason that JavaScript has first-class functions (they are treated
    like values and can be passed as arguments to functions) and closures (see [Chapter 16](ch16.html
    "Chapter 16. Variables: Scopes, Environments, and Closures")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self is responsible for JavaScript’s unusual style of object orientation; it
    supports prototypal inheritance between objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perl and Python influenced JavaScript’s handling of strings, arrays, and regular
    expressions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beyond the actual language, HyperTalk influenced how JavaScript was integrated
    into web browsers. It led to HTML tags having event-handling attributes such as
    `onclick`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Programming languages that influenced JavaScript.](images/spjs_0701.png)Figure 3-1. Programming
    languages that influenced JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ^([[1](#id428034)]) Brendan Eich, “A Brief History of JavaScript,” July 21,
    2010, [http://bit.ly/1lKkI0M](http://bit.ly/1lKkI0M).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4. How JavaScript Was Created
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knowing why and how JavaScript was created helps us understand why it is the
    way it is.
  prefs: []
  type: TYPE_NORMAL
- en: In 1993, NCSA’s Mosaic was the first widely popular web browser. In 1994, a
    company called Netscape was founded to exploit the potential of the nascent World
    Wide Web. Netscape created the proprietary web browser Netscape Navigator, which
    was dominant throughout the 1990s. Many of the original Mosaic authors went on
    to work on Navigator, but the two intentionally shared no code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Netscape quickly realized that the Web needed to become more dynamic. Even
    if you simply wanted to check that users entered correct values in a form, you
    needed to send the data to the server in order to give feedback. In 1995, Netscape
    hired Brendan Eich with the promise of letting him implement Scheme (a Lisp dialect)
    in the browser.^([[2](#ftn.id368372)]) Before he could get started, Netscape collaborated
    with hardware and software company Sun (since bought by Oracle) to include its
    more static programming language, Java, in Navigator. As a consequence, a hotly
    debated question at Netscape was why the Web needed two programming languages:
    Java and a scripting language. The proponents of a scripting language offered
    the following explanation:^([[3](#ftn.id902418)])'
  prefs: []
  type: TYPE_NORMAL
- en: We aimed to provide a “glue language” for the Web designers and part time programmers
    who were building Web content from components such as images, plugins, and Java
    applets. We saw Java as the “component language” used by higher-priced programmers,
    where the glue programmers—the Web page designers—would assemble components and
    automate their interactions using [a scripting language].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By then, Netscape management had decided that a scripting language had to have
    a syntax similar to Java’s. That ruled out adopting existing languages such as
    Perl, Python, TCL, or Scheme. To defend the idea of JavaScript against competing
    proposals, Netscape needed a prototype. Eich wrote one in 10 days, in May 1995.
    JavaScript’s first code name was Mocha, coined by Marc Andreesen. Netscape marketing
    later changed it to LiveScript, for trademark reasons and because the names of
    several products already had the prefix “Live.” In late November 1995, Navigator
    2.0B3 came out and included the prototype, which continued its early existence
    without major changes. In early December 1995, Java’s momentum had grown, and
    Sun licensed the trademark Java to Netscape. The language was renamed again, to
    its final name, JavaScript.^([[4](#ftn.id902426)])
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ^([[2](#id368372)]) Brendan Eich, “Popularity,” April 3, 2008, [http://bit.ly/1lKl6fG](http://bit.ly/1lKl6fG).
  prefs: []
  type: TYPE_NORMAL
- en: '^([[3](#id902418)]) Naomi Hamilton, “The A–Z of Programming Languages: JavaScript,”
    Computerworld, July 30, 2008, [http://bit.ly/1lKldIe](http://bit.ly/1lKldIe).'
  prefs: []
  type: TYPE_NORMAL
- en: ^([[4](#id902426)]) Paul Krill, “JavaScript Creator Ponders Past, Future,” InfoWorld,
    June 23, 2008, [http://bit.ly/1lKlpXO](http://bit.ly/1lKlpXO); Brendan Eich, “A
    Brief History of JavaScript,” July 21, 2010, [http://bit.ly/1lKkI0M](http://bit.ly/1lKkI0M).
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5. Standardization: ECMAScript'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After JavaScript came out, Microsoft implemented the same language, under the
    different name JScript, in Internet Explorer 3.0 (August 1996). Partially to keep
    Microsoft in check, Netscape decided to standardize JavaScript and asked the standards
    organization [Ecma International](http://en.wikipedia.org/wiki/Ecma) to host the
    standard. Work on a specification called ECMA-262 started in November 1996\. Because
    Sun (now Oracle) had a trademark on the word *Java*, the official name of the
    language to be standardized couldn’t be *JavaScript*. Hence, *ECMAScript* was
    chosen, derived from *JavaScript* and *Ecma*. However, that name is used only
    to refer to versions of the language (where one refers to the specification).
    Everyone still calls the language *JavaScript*.
  prefs: []
  type: TYPE_NORMAL
- en: ECMA-262 is managed and evolved by Ecma’s [Technical Committee 39](http://bit.ly/1oNTQiP)
    (TC39). Its members are companies such as Microsoft, Mozilla, and Google, which
    appoint employees to participate in committee work; examples include Brendan Eich,
    Allen Wirfs-Brock (editor of ECMA-262), and David Herman. To advance the design
    of ECMAScript, TC39 hosts discussions on open channels (such as the mailing list
    [es-discuss](https://mail.mozilla.org/listinfo/es-discuss)) and holds regular
    meetings. The meetings are attended by TC39 members and invited experts. In early
    2013, attendee numbers ranged from 15 to 25.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of ECMAScript versions (or *editions* of ECMA-262)
    and their key features:'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 1 (June 1997)
  prefs: []
  type: TYPE_NORMAL
- en: First edition
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 2 (August 1998)
  prefs: []
  type: TYPE_NORMAL
- en: Editorial changes to align ECMA-262 with the standard ISO/IEC 16262
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 3 (December 1999)
  prefs: []
  type: TYPE_NORMAL
- en: '`do-while`, regular expressions, new string methods (`concat`, `match`, `replace`,
    `slice`, `split` with a regular expression, etc.), exception handling, and more'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 4 (abandoned July 2008)
  prefs: []
  type: TYPE_NORMAL
- en: 'ECMAScript 4 was developed as the next version of JavaScript, with a prototype
    written in ML. However, TC39 could not agree on its feature set. To prevent an
    impasse, the committee met at the end of July 2008 and came to an accord, summarized
    in [four points](http://mzl.la/1oNTUiG):'
  prefs: []
  type: TYPE_NORMAL
- en: Develop an incremental update of ECMAScript 3 (which became ECMAScript 5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Develop a major new version that does less than ECMAScript 4, but much more
    than the incremental update of ECMAScript 3\. The code name for the new version
    is Harmony, due to the nature of the meeting in which it was conceived. Harmony
    will be split into ECMAScript 6 and ECMAScript 7.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Features from ECMAScript 4 that would be dropped included packages, namespaces,
    and early binding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other ideas were to be developed in consensus with all of TC39.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, the ECMAScript 4 developers agreed to make Harmony less radical than ECMAScript 4,
    and the rest of TC39 agreed to keep moving things forward.
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5 (December 2009)
  prefs: []
  type: TYPE_NORMAL
- en: Adds a strict mode, getters and setters, new array methods, support for JSON,
    and more (see [Chapter 25](ch25.html "Chapter 25. New in ECMAScript 5"))
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5.1 (June 2011)
  prefs: []
  type: TYPE_NORMAL
- en: Editorial changes to align ECMA-262 with the third edition of the international
    standard ISO/IEC 16262:2011
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 6
  prefs: []
  type: TYPE_NORMAL
- en: Currently in development, it is estimated to be ratified by the end of 2014.
    Most engines will probably support the most important ECMAScript 6 features at
    ratification. Complete support may take longer.
  prefs: []
  type: TYPE_NORMAL
- en: Reaching consensus and creating a standard is not always easy, but thanks to
    the collaborative efforts of the aforementioned parties, JavaScript is a truly
    open language, with implementations by multiple vendors that are remarkably compatible.
    That compatibility is made possible by a very detailed yet concrete specification.
    For example, the specification often uses pseudocode, and it is complemented by
    a test suite, [test262](http://test262.ecmascript.org/), that checks an ECMAScript
    implementation for compliance. It is interesting to note that ECMAScript is not
    managed by the World Wide Web Consortium (W3C). TC39 and the W3C collaborate wherever
    there is overlap between JavaScript and HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6. Historical JavaScript Milestones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It took JavaScript a long time to make an impact. Many JavaScript-related technologies
    existed for a while until they were discovered by the mainstream. This section
    describes what happened from JavaScript’s creation until today. Throughout, only
    the most popular projects are mentioned and many are ignored, even if they were
    first. For example, the Dojo Toolkit is listed, but there is also the lesser-known
    [qooxdoo](http://qooxdoo.org/), which was created around the same time. And Node.js
    is listed, even though [Jaxer](https://github.com/aptana/Jaxer) existed before
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 1997—[Dynamic HTML](http://bit.ly/1oNVOzH)
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic HTML allows you to dynamically change the content and appearance of
    a web page. You achieve this by manipulating the Document Object Model (DOM) of
    the page, a tree-shaped data structure. Things you can do include changing content,
    changing style, and showing and hiding elements. Dynamic HTML appeared first in
    Internet Explorer 4 and in Netscape Navigator 4.
  prefs: []
  type: TYPE_NORMAL
- en: 1999—[XMLHttpRequest](http://www.w3.org/TR/XMLHttpRequest/)
  prefs: []
  type: TYPE_NORMAL
- en: This API lets a client-side script send an HTTP or HTTPS request to a server
    and get back data, usually in a text format (XML, HTML, JSON). It was introduced
    in Internet Explorer 5.
  prefs: []
  type: TYPE_NORMAL
- en: 2001—[JSON](http://json.org/), a JavaScript-based data exchange format
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2001, Douglas Crockford named and documented JSON (JavaScript Object Notation),
    whose main idea is to use JavaScript syntax to store data in text format. JSON
    uses JavaScript literals for objects, arrays, strings, numbers, and booleans to
    represent structured data. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Over the years, JSON has become a popular lightweight alternative to XML, especially
    when structured data is to be represented and not markup. Naturally, JSON is easy
    to consume via JavaScript (see [Chapter 22](ch22.html "Chapter 22. JSON")).
  prefs: []
  type: TYPE_NORMAL
- en: 2004—[Dojo Toolkit](http://dojotoolkit.org/), a framework for programming JavaScript
    in the large
  prefs: []
  type: TYPE_NORMAL
- en: 'The Dojo Toolkit facilitates programming in the large by providing the necessary
    infrastructure: an inheritance library, a module system, an API for desktop-style
    graphical widgets, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 2005—[Ajax](http://bit.ly/1oNW3Lf), browser-based desktop-class applications
  prefs: []
  type: TYPE_NORMAL
- en: 'Ajax is a collection of technologies that brings a level of interactivity to
    web pages that rivals that of desktop applications. One impressive example of
    what can be achieved via Ajax was introduced in February 2005: Google Maps. This
    application allowed you to pan and zoom over a map of the world, but only the
    content that was currently visible was downloaded to the browser. After Google
    Maps came out, Jesse James Garrett noticed that it shared certain traits with
    other interactive websites. He called these traits *Ajax*, a shorthand for *Asynchronous
    JavaScript and XML*.^([[5](#ftn.id412204)]) The two cornerstones of Ajax are loading
    content asynchronously in the background (via `XMLHttpRequest`) and dynamically
    updating the current page with the results (via dynamic HTML). That was a considerable
    usability improvement from always performing complete page reloads.'
  prefs: []
  type: TYPE_NORMAL
- en: Ajax marked the mainstream breakthrough of JavaScript and dynamic web applications.
    It is interesting to note how long that took—at that point, the Ajax ingredients
    had been available for years. Since the inception of Ajax, other data formats
    have become popular (JSON instead of XML), other protocols are used (e.g., Web
    Sockets in addition to HTTP), and bidirectional communication is possible. But
    the basic techniques are still the same. However, the term *Ajax* is used much
    less these days and has mostly been replaced by the more comprehensive terms *HTML5*
    and *Web Platform* (which both mean JavaScript plus browser APIs).
  prefs: []
  type: TYPE_NORMAL
- en: 2005—[Apache CouchDB](http://couchdb.apache.org/), a JavaScript-centric database
  prefs: []
  type: TYPE_NORMAL
- en: 'Roughly, CouchDB is a JSON database: you feed it JSON objects, without the
    need to specify a schema in advance. Additionally, you can define views and indexes
    via JavaScript functions that perform map/reduce operations. Hence, CouchDB is
    a very good fit for JavaScript because you can work directly with native data.
    Compared to a relational database, there is no mapping-related impedance mismatch.
    Compared to an object database, you avoid many complications because only data
    is stored, not behavior. CouchDB is just one of several similar [NoSQL databases](http://bit.ly/1oNYfCp).
    Most of them have excellent JavaScript support.'
  prefs: []
  type: TYPE_NORMAL
- en: 2006—[jQuery](http://jquery.com/), helping with DOM manipulation
  prefs: []
  type: TYPE_NORMAL
- en: The browser DOM is one of the most painful parts of client-side web development.
    jQuery made DOM manipulation fun by abstracting over browser differences and by
    providing a powerful fluent-style API for querying and modifying the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 2007—[WebKit](https://www.webkit.org/), taking the mobile web mainstream
  prefs: []
  type: TYPE_NORMAL
- en: Based on prior work by KDE, WebKit is an HTML engine that was introduced by
    Apple in 2003\. It was open-sourced in 2005\. With the introduction of the iPhone
    in 2007, the mobile Web suddenly became mainstream and had little to no limitations
    compared to the nonmobile Web.
  prefs: []
  type: TYPE_NORMAL
- en: 2008—[V8](http://code.google.com/p/v8/), proving JavaScript can be fast
  prefs: []
  type: TYPE_NORMAL
- en: When Google introduced its Chrome web browser, one of its highlights was a fast
    JavaScript engine called V8\. It changed the perception of JavaScript as being
    slow and led to a speed race with other browser vendors from which we are still
    profiting. V8 is open source and can be used as a standalone component whenever
    you need a fast embedded language that is widely known.
  prefs: []
  type: TYPE_NORMAL
- en: 2009—[Node.js](http://nodejs.org/), implementing JavaScript on the server
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js lets you implement servers that perform well under load. To do so,
    it uses event-driven, nonblocking I/O and JavaScript (via V8). Node.js creator
    Ryan Dahl mentions the following reasons for choosing JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: “Because it’s bare and does not come with I/O APIs.” [Node.js can thus introduce
    its own nonblocking APIs.]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Web developers use it already.” [JavaScript is a widely known language, especially
    in a web context.]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “DOM API is event-based. Everyone is already used to running without threads
    and on an event loop.” [Developers are used to an asynchronous coding style.]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dahl was able to build on prior work on event-driven servers and server-side
    JavaScript (mainly the [CommonJS](http://www.commonjs.org/) project).
  prefs: []
  type: TYPE_NORMAL
- en: 'The appeal of Node.js for JavaScript programmers goes beyond being able to
    program in a familiar language; you get to use the same language on both client
    and server. That means you can share more code (e.g., for validating data) and
    use techniques such as [*isomorphic JavaScript*](http://bit.ly/1gWhLIs). Isomorphic
    JavaScript is about assembling web pages on either client or server, with numerous
    benefits: pages can be rendered on the server for faster initial display, SEO,
    and running on browsers that either don’t support JavaScript or a version that
    is too old. But they can also be updated on the client, resulting in a more responsive
    user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 2009—[PhoneGap](http://phonegap.com/), writing native apps in HTML5
  prefs: []
  type: TYPE_NORMAL
- en: '*PhoneGap* was created by a company called Nitobi that was later purchased
    by Adobe. The open source foundation of PhoneGap is called *Cordova*. The initial
    mission of PhoneGap was to make it possible to implement native mobile apps via
    HTML5\. Since then, support has expanded to nonmobile operating systems. Currently
    supported platforms include Android, Bada, BlackBerry, Firefox OS, iOS, Mac OS
    X, Tizen, Ubuntu, Windows (desktop), and Windows Phone. Apart from HTML5 APIs,
    there are also PhoneGap-specific APIs for accessing [native features](http://bit.ly/1oO22Q9)
    such as the accelerometer, camera, and contacts.'
  prefs: []
  type: TYPE_NORMAL
- en: 2009—[Chrome OS](http://bit.ly/1oO27U2), making the browser the operating system
  prefs: []
  type: TYPE_NORMAL
- en: 'With Chrome OS, the web platform is the native platform. This approach has
    several advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It is much easier to create an operating system, because all of the user interface
    technology is already there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many developers already (mostly) know how to write apps for the operating system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing apps is simple. That helps public installations such as Internet cafes
    and schools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The introduction of the mobile operating system [webOS](http://bit.ly/1oO2e1N)
    (which originated at Palm and is now owned by LG Electronics) predates the introduction
    of Chrome OS, but the “browser as OS” idea is more apparent with the latter (which
    is why it was chosen as a milestone). webOS is both less and more. Less, because
    it is very focused on cell phones and tablets. More, because it has Node.js built
    in, to let you implement services in JavaScript. A more recent entry in the web
    operating system category is Mozilla’s [Firefox OS](http://mzl.la/1oO2i1J), which
    targets cell phones and tablets. [Mozilla’s wiki](http://mzl.la/1oO2n5m) mentions
    a benefit of web operating systems for the Web:'
  prefs: []
  type: TYPE_NORMAL
- en: We also need a hill to take, in order to scope and focus our efforts. Recently
    we saw the pdf.js project [which renders PDFs via HTML5, without plugins] expose
    small gaps that needed filling in order for “HTML5” to be a superset of PDF. We
    want to take a bigger step now, and find the gaps that keep web developers from
    being able to build apps that are—in every way—the equals of native apps built
    for the iPhone, Android, and WP7.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2011—[Windows 8](http://bit.ly/1oO2qhJ), first-class HTML5 apps
  prefs: []
  type: TYPE_NORMAL
- en: When Microsoft introduced Windows 8, it surprised everyone with the operating
    system’s extensive integration of HTML5\. HTML5 applications are first-class citizens
    in Windows 8, on par with those implemented via incumbent technologies such as
    .NET and C++. To demonstrate that point, Microsoft wrote several important Windows
    8 applications in HTML5 (plus calls to native APIs), including the app store and
    the email app.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ^([[5](#id412204)]) Ajax is a shorthand, but not an acronym, which is why it
    isn’t styled as AJAX.
  prefs: []
  type: TYPE_NORMAL

- en: Part II. Background
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 背景
- en: This part explains the history and nature of JavaScript. It provides a broad
    first look at the language and explains the context in which it exists (without
    going too much into technical details).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分解释了JavaScript的历史和性质。它对语言进行了广泛的初步介绍，并解释了它存在的背景（不过不涉及太多技术细节）。
- en: This part is not required reading; you will be able to understand the rest of
    the book without having read it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分不是必读的；你可以在没有阅读它的情况下理解本书的其余部分。
- en: Chapter 2. Why JavaScript?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二章 为什么选择JavaScript？
- en: 'There are many programming languages out there. Why should you use JavaScript?
    This chapter looks at seven aspects that are important when you are choosing a
    programming language and argues that JavaScript does well overall:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多编程语言。为什么你要使用JavaScript？本章将从七个重要方面来看，这些方面在你选择编程语言时很重要，并且认为JavaScript总体上做得很好：
- en: Is it freely available?
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是免费提供的吗？
- en: Is it an elegant programming language?
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是一种优雅的编程语言吗？
- en: Is it useful in practice?
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实践中有用吗？
- en: Does it have good tools, especially good *integrated development environments*
    (IDEs)?
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它有好的工具，特别是好的*集成开发环境*（IDE）吗？
- en: Is it fast enough for what you want to do?
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它对你想做的事情来说足够快吗？
- en: Is it widely used?
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它被广泛使用吗？
- en: Does it have a future?
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它有未来吗？
- en: Is JavaScript Freely Available?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript是免费提供的吗？
- en: 'JavaScript is arguably the most open programming language there is: ECMA-262,
    its specification, is an ISO standard. That specification is closely followed
    by many implementations from independent parties. Some of those implementations
    are open source. Furthermore, the evolution of the language is handled by TC39,
    a committee comprising several companies, including all major browser vendors.
    Many of those companies are normally competitors, but they work together for the
    benefit of the language.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript可以说是最开放的编程语言：它的规范ECMA-262是ISO标准。许多独立方实现都紧密遵循这一规范。其中一些实现是开源的。此外，语言的演变由TC39委员会负责，该委员会由包括所有主要浏览器供应商在内的几家公司组成。其中许多公司通常是竞争对手，但他们为了语言的利益而共同合作。
- en: Is JavaScript Elegant?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript优雅吗？
- en: Yes and no. I’ve written fair amounts of code in several programming languages
    from different paradigms. Therefore, I’m well aware that JavaScript isn’t the
    pinnacle of elegance. However, it is a very flexible language, has a reasonably
    elegant core, and enables you to use a mixture of object-oriented programming
    and functional programming.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 是和不是。我用不同范式的几种编程语言写了大量代码。因此，我很清楚JavaScript并不是优雅的巅峰。然而，它是一种非常灵活的语言，有一个相当优雅的核心，并且使你能够使用面向对象编程和函数式编程的混合。
- en: Language compatibility between JavaScript engines used to be a problem, but
    isn’t anymore, partly thanks to the [test262 suite](https://github.com/tc39/test262)
    that checks engines for conformance to the ECMAScript specification. In contrast,
    browser and DOM differences are still a challenge. That’s why it is normally best
    to rely on frameworks for hiding those differences.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript引擎之间的语言兼容性曾经是一个问题，但现在不再是了，部分得益于[测试262套件](https://github.com/tc39/test262)，该套件检查引擎是否符合ECMAScript规范。相比之下，浏览器和DOM的差异仍然是一个挑战。这就是为什么通常最好依赖框架来隐藏这些差异。
- en: Is JavaScript Useful?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript有用吗？
- en: The most beautiful programming language in the world is useless unless it allows
    you to write the program that you need.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上最美丽的编程语言是无用的，除非它能让你编写你需要的程序。
- en: Graphical User Interfaces
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形用户界面
- en: 'In the area of graphical user interfaces, JavaScript benefits from being part
    of *HTML5*. In this section, I use the term HTML5 for “the browser platform” (HTML,
    CSS, and browser JavaScript APIs). HTML5 is deployed widely and making constant
    progress. It is slowly becoming a complete layer for writing full-featured, cross-platform
    applications; similar to, say, the Java platform, it’s almost like an embedded
    operating system. One of HTML5’s selling points is that it lets you write cross-platform
    graphical user interfaces. Those are always a compromise: you give up some quality
    in exchange for not being limited to a single operating system. In the past, “cross-platform”
    meant Windows, Mac OS, or Linux. But we now have two additional interactive platforms:
    web and mobile. With HTML5, you can target all of these platforms via technologies
    such as [PhoneGap](http://phonegap.com), [Chrome Apps](http://developer.chrome.com/apps/),
    and [TideSDK](http://www.tidesdk.org/).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形用户界面领域，JavaScript受益于成为*HTML5*的一部分。在本节中，我使用HTML5这个术语来表示“浏览器平台”（HTML、CSS和浏览器JavaScript
    API）。HTML5得到了广泛的部署，并不断取得进展。它正在慢慢地成为一个完整的层，用于编写功能齐全的跨平台应用程序；类似于Java平台，它几乎像一个嵌入式操作系统。HTML5的卖点之一是它让你编写跨平台的图形用户界面。这些总是一种妥协：你放弃了一些质量，以换取不受限于单一操作系统。过去，“跨平台”意味着Windows、Mac
    OS或Linux。但现在我们有了两个额外的交互平台：Web和移动。使用HTML5，你可以通过诸如[PhoneGap](http://phonegap.com)、[Chrome
    Apps](http://developer.chrome.com/apps/)和[TideSDK](http://www.tidesdk.org/)等技术来针对所有这些平台。
- en: Additionally, several platforms have web apps as native apps or let you install
    them natively—for example, Chrome OS, Firefox OS, and Android.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些平台将Web应用程序作为本地应用程序或允许你本地安装它们——例如Chrome OS、Firefox OS和Android。
- en: Other Technologies Complementing JavaScript
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他补充JavaScript的技术
- en: 'There are more technologies than just HTML5 that complement JavaScript and
    make the language more useful:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了HTML5之外，还有更多的技术可以补充JavaScript，使语言更有用：
- en: Libraries
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 库
- en: JavaScript has an abundance of libraries, which enable you to complete tasks
    ranging from parsing JavaScript (via [Esprima](http://esprima.org)) to processing
    and displaying PDF files (via [PDF.js](https://github.com/mozilla/pdf.js)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript有大量的库，可以让你完成各种任务，从解析JavaScript（通过[Esprima](http://esprima.org)）到处理和显示PDF文件（通过[PDF.js](https://github.com/mozilla/pdf.js)）。
- en: '[Node.js](http://nodejs.org)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[Node.js](http://nodejs.org)'
- en: The Node.js platform lets you write server-side code and shell scripts (build
    tools, test runners, etc.).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js平台让你编写服务器端代码和shell脚本（构建工具、测试运行器等）。
- en: JSON (JavaScript Object Notation, covered in [Chapter 22](ch22.html "Chapter 22. JSON"))
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JSON（JavaScript对象表示法，在[第22章](ch22.html "第22章。JSON")中介绍）
- en: JSON is a data format rooted in JavaScript that has become popular for exchanging
    data on the Web (e.g., the results of web services).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JSON是一种根植于JavaScript的数据格式，在Web上交换数据变得流行（例如网络服务的结果）。
- en: NoSQL databases (such as [CouchDB](http://couchdb.apache.org) and [MongoDB](http://www.mongodb.org))
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库（例如[CouchDB](http://couchdb.apache.org)和[MongoDB](http://www.mongodb.org)）
- en: These databases tightly integrate JSON and JavaScript.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据库紧密集成了JSON和JavaScript。
- en: Does JavaScript Have Good Tools?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript有好的工具吗？
- en: JavaScript is getting better build tools (e.g., [Grunt](http://gruntjs.com))
    and test tools (e.g., [mocha](http://visionmedia.github.io/mocha/)). Node.js makes
    it possible to run these kinds of tools via a shell (and not only in the browser).
    One risk in this area is fragmentation, as we are progressively getting too many
    of these tools.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript正在获得更好的构建工具（例如[Grunt](http://gruntjs.com)）和测试工具（例如[mocha](http://visionmedia.github.io/mocha/)）。Node.js使得可以通过shell运行这些类型的工具（不仅仅在浏览器中）。在这个领域的一个风险是分裂，因为我们逐渐得到了太多这样的工具。
- en: The JavaScript IDE space is still nascent, but it’s quickly growing up. The
    complexity and dynamism of web development make this space a fertile ground for
    innovation. Two open source examples are [Brackets](http://brackets.io) and [Light
    Table](http://www.lighttable.com).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的IDE空间仍处于萌芽阶段，但正在迅速成长。网络开发的复杂性和动态性使得这个空间成为创新的肥沃土壤。两个开源的例子是[Brackets](http://brackets.io)和[Light
    Table](http://www.lighttable.com)。
- en: Additionally, browsers are becoming increasingly capable development environments.
    Chrome, in particular, has made impressive progress recently. It will be interesting
    to see how much more IDEs and browsers will be integrated in the future.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，浏览器正变得越来越强大的开发环境。特别是Chrome最近取得了令人印象深刻的进展。有趣的是看到IDE和浏览器在未来将整合到多大程度。
- en: Is JavaScript Fast Enough?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript足够快吗？
- en: 'JavaScript engines have made tremendous progress, evolving from slow interpreters
    to fast just-in-time compilers. They are now fast enough for most applications.
    Furthermore, new ideas are already in development to make JavaScript fast enough
    for the remaining applications:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript引擎取得了巨大的进步，从缓慢的解释器发展为快速的即时编译器。它们现在已经足够快，适用于大多数应用。此外，已经在开发新的想法，使JavaScript足够快以适用于其余的应用：
- en: '[asm.js](http://asmjs.org/) is a (very static) subset of JavaScript that runs
    fast on current engines, approximately 70% as fast as compiled C++. It can, for
    example, be used to implement performance-critical algorithmic parts of web applications.
    It has also been used to port C++-based games to the web platform.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asm.js](http://asmjs.org/)是JavaScript的（非常静态的）子集，在当前引擎上运行速度很快，大约相当于编译后的C++的70%。例如，它可以用于实现网络应用的性能关键算法部分。它还被用于将基于C++的游戏移植到网络平台上。'
- en: '[ParallelJS](http://www.2ality.com/2013/12/paralleljs.html) parallelizes JavaScript
    code that uses the new array methods `mapPar`, `filterPar`, and `reducePar` (parallelizable
    versions of the existing array methods `map`, `filter`, and `reduce`). In order
    for parallelization to work, callbacks must be written in a special style; the
    main restriction is that you can’t mutate data that hasn’t been created inside
    the callbacks.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ParallelJS](http://www.2ality.com/2013/12/paralleljs.html)可以并行化使用新数组方法`mapPar`、`filterPar`和`reducePar`（现有数组方法`map`、`filter`和`reduce`的可并行化版本）的JavaScript代码。为了使并行化工作，回调必须以特殊的方式编写；主要限制是不能改变在回调中未创建的数据。'
- en: Is JavaScript Widely Used?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript被广泛使用吗？
- en: A language that is widely used normally has two benefits. First, such a language
    is better documented and supported. Second, more programmers know it, which is
    important whenever you need to hire someone or are looking for customers for a
    tool based on the language.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常广泛使用的语言有两个好处。首先，这样的语言有更好的文档和支持。其次，更多的程序员知道它，这在你需要雇佣某人或者寻找基于该语言的工具的客户时非常重要。
- en: 'JavaScript is widely used and reaps both of the aforementioned benefits:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript被广泛使用，并获得了前述两个好处：
- en: 'These days, documentation and support for JavaScript comes in all shapes and
    sizes: books, podcasts, blog posts, email newsletters, forums, and more. [Chapter 33](ch33.html
    "Chapter 33. What to Do Next") points you toward important resources.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如今，JavaScript的文档和支持以各种形式呈现：书籍、播客、博客文章、电子邮件通讯、论坛等等。[第33章](ch33.html "第33章。下一步该做什么")指引您前往重要资源。
- en: JavaScript developers are in great demand, but their ranks are also constantly
    increasing.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript开发人员需求量大，但他们的人数也在不断增加。
- en: Does JavaScript Have a Future?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript有未来吗？
- en: 'Several things indicate that JavaScript has a bright future:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事表明JavaScript有一个光明的未来：
- en: The language is evolving steadily; ECMAScript 6 looks good.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言正在稳步发展；ECMAScript 6看起来不错。
- en: There is much JavaScript-related innovation (e.g., the aforementioned asm.js
    and ParallelJS, Microsoft’s TypeScript, etc.).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有许多与JavaScript相关的创新（例如前述的asm.js和ParallelJS，微软的TypeScript等）。
- en: The web platform of which JavaScript is an integral part is maturing rapidly.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript作为一个不可或缺的部分所在的网络平台正在迅速成熟。
- en: JavaScript is supported by a broad coalition of companies—no single person or
    company controls it.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript得到了众多公司的支持，没有单个人或公司控制它。
- en: Conclusion
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Considering the preceding list of what makes a language attractive, JavaScript
    is doing remarkably well. It certainly is not perfect, but at the moment, it is
    hard to beat—and things are only getting better.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到使一种语言具有吸引力的前述因素，JavaScript的表现非常出色。它当然并不完美，但目前很难超越它，而且情况只会变得更好。
- en: Chapter 3. The Nature of JavaScript
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章。JavaScript的本质
- en: 'JavaScript’s nature can be summarized as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的本质可以总结如下：
- en: It’s dynamic
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它是动态的
- en: Many things can be changed. For example, you can freely add and remove *properties*
    (fields) of objects after they have been created. And you can directly create
    objects, without creating an object factory (e.g., a class) first.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 许多东西都可以改变。例如，你可以自由地添加和删除对象的*属性*（字段）。而且你可以直接创建对象，而不需要先创建对象工厂（例如类）。
- en: It’s dynamically typed
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它是动态类型的
- en: Variables and object properties can always hold values of any type.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和对象属性始终可以保存任何类型的值。
- en: It’s functional and object-oriented
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它是功能性的和面向对象的
- en: 'JavaScript supports two programming language paradigms: functional programming
    (first-class functions, closures, partial application via `bind()`, built-in `map()`
    and `reduce()` for arrays, etc.) and object-oriented programming (mutable state,
    objects, inheritance, etc.).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持两种编程语言范式：函数式编程（一流函数、闭包、通过`bind()`进行部分应用、数组的内置`map()`和`reduce()`等）和面向对象编程（可变状态、对象、继承等）。
- en: It fails silently
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它默默失败
- en: 'JavaScript did not have exception handling until ECMAScript 3\. That explains
    why the language so often fails silently and automatically converts the values
    of arguments and operands: it initially couldn’t throw exceptions.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 直到ECMAScript 3，JavaScript才没有异常处理。这就解释了为什么语言经常默默失败并自动转换参数和操作数的值：它最初无法抛出异常。
- en: It’s deployed as source code
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它部署为源代码
- en: 'JavaScript is always deployed as source code and compiled by JavaScript engines.
    Source code has the benefits of being a flexible delivery format and of abstracting
    the differences between the engines. Two techniques are used to keep file sizes
    small: *compression* (mainly gzip) and *minification* (making source code smaller
    by renaming variables, removing comments, etc.; see [Chapter 32](ch32.html "Chapter 32. More
    Tools") for details).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript始终以源代码部署，并由JavaScript引擎编译。源代码具有灵活的交付格式和抽象引擎之间的差异的好处。为了保持文件大小小，使用了两种技术：*压缩*（主要是gzip）和*最小化*（通过重命名变量、删除注释等使源代码更小；有关详细信息，请参见[第32章](ch32.html
    "第32章. 更多工具")）。
- en: It’s part of the web platform
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它是Web平台的一部分
- en: JavaScript is such an essential part of the web platform (HTML5 APIs, DOM, etc.)
    that it is easy to forget that the former can also be used without the latter.
    However, the more JavaScript is used in nonbrowser settings (such as Node.js),
    the more obvious it becomes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是Web平台（HTML5 API、DOM等）的一个重要组成部分，以至于很容易忘记前者也可以在没有后者的情况下使用。然而，JavaScript在非浏览器环境中的使用越多（如Node.js），它就越明显。
- en: Quirks and Unorthodox Features
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怪癖和非正统特性
- en: On one hand, JavaScript has several quirks and missing features (for example,
    it has no block-scoped variables, no built-in modules, and no support for subclassing).
    Therefore, where you learn language features in other languages, you learn patterns
    and workarounds in JavaScript. On the other hand, JavaScript includes unorthodox
    features (such as prototypal inheritance and object properties). These, too, have
    to be learned, but are more a feature than a bug.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，JavaScript有一些怪癖和缺失的功能（例如，它没有块作用域变量，没有内置模块，也不支持子类化）。因此，在其他语言中学习语言特性的地方，你需要在JavaScript中学习模式和解决方法。另一方面，JavaScript包括非正统的特性（如原型继承和对象属性）。这些也需要学习，但更像是一种特性而不是错误。
- en: 'Note that JavaScript engines have become quite smart and fix some of the quirks,
    under the hood. For example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，JavaScript引擎已经变得非常智能，并在幕后修复了一些怪癖。例如：
- en: Specification-wise, JavaScript does not have integers, only floating-point numbers.
    Internally, most engines use integers as much as possible.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就规范而言，JavaScript没有整数，只有浮点数。在内部，大多数引擎尽可能使用整数。
- en: 'Arguably, arrays in JavaScript are too flexible: they are not indexed sequences
    of elements, but maps from numbers to elements. Such maps can have holes: indices
    “inside” the array that have no associated value. Again, engines help by using
    an optimized representation if an array does not have holes.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以说，JavaScript中的数组太灵活了：它们不是元素的索引序列，而是从数字到元素的映射。这样的映射可以有空洞：数组“内部”没有关联值的索引。再次，引擎通过使用优化表示来帮助数组不具有空洞。
- en: Elegant Parts
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优雅的部分
- en: But JavaScript also has many elegant parts. Brendan Eich’s favorites are:^([[1](#ftn.id428034)])
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但JavaScript也有许多优雅的部分。Brendan Eich最喜欢的是：^([[1](#ftn.id428034)])
- en: First-class functions
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一流函数
- en: Closures
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭包
- en: Prototypes
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型
- en: Object literals
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象字面量
- en: Array literals
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组字面量
- en: The last two items, object literals and array literals, let you start with objects
    and introduce abstractions (such as constructors, JavaScript’s analog to classes)
    later. They also enable JSON (see [Chapter 22](ch22.html "Chapter 22. JSON")).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个项目，对象字面量和数组字面量，让你可以从对象开始，并在后来引入抽象（比如构造函数，JavaScript中类的类比）。它们还支持JSON（见[第22章](ch22.html
    "第22章. JSON")）。
- en: Note that the elegant parts help you work around the quirks. For example, they
    allow you to implement block scoping, modules, and inheritance APIs—all within
    the language.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，优雅的部分可以帮助你解决怪癖。例如，它们允许你在语言内部实现块作用域、模块和继承API。
- en: Influences
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影响
- en: 'JavaScript was influenced by several programming languages (as shown in [Figure 3-1](ch03.html#fig3-1
    "Figure 3-1. Programming languages that influenced JavaScript.")):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript受到了几种编程语言的影响（如[图3-1](ch03.html#fig3-1 "图3-1. 影响JavaScript的编程语言。"）所示）：
- en: Java is the role model for JavaScript’s syntax. It also led to JavaScript’s
    partitioning of values into primitives and objects and to the `Date` constructor
    (which is a port of `java.util.Date`).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java是JavaScript语法的榜样。它还导致JavaScript将值分为原始值和对象，并引入了`Date`构造函数（这是`java.util.Date`的一个移植）。
- en: AWK inspired JavaScript’s functions. In fact, the keyword `function` comes from
    AWK.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWK启发了JavaScript的函数。实际上，关键字`function`来自AWK。
- en: 'Scheme is the reason that JavaScript has first-class functions (they are treated
    like values and can be passed as arguments to functions) and closures (see [Chapter 16](ch16.html
    "Chapter 16. Variables: Scopes, Environments, and Closures")).'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scheme是JavaScript拥有一流函数（它们被视为值并且可以作为参数传递给函数）和闭包（见[第16章](ch16.html "第16章. 变量：作用域、环境和闭包")）的原因。
- en: Self is responsible for JavaScript’s unusual style of object orientation; it
    supports prototypal inheritance between objects.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perl and Python influenced JavaScript’s handling of strings, arrays, and regular
    expressions.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beyond the actual language, HyperTalk influenced how JavaScript was integrated
    into web browsers. It led to HTML tags having event-handling attributes such as
    `onclick`.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Programming languages that influenced JavaScript.](images/spjs_0701.png)Figure 3-1. Programming
    languages that influenced JavaScript.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: ^([[1](#id428034)]) Brendan Eich, “A Brief History of JavaScript,” July 21,
    2010, [http://bit.ly/1lKkI0M](http://bit.ly/1lKkI0M).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4. How JavaScript Was Created
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knowing why and how JavaScript was created helps us understand why it is the
    way it is.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: In 1993, NCSA’s Mosaic was the first widely popular web browser. In 1994, a
    company called Netscape was founded to exploit the potential of the nascent World
    Wide Web. Netscape created the proprietary web browser Netscape Navigator, which
    was dominant throughout the 1990s. Many of the original Mosaic authors went on
    to work on Navigator, but the two intentionally shared no code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Netscape quickly realized that the Web needed to become more dynamic. Even
    if you simply wanted to check that users entered correct values in a form, you
    needed to send the data to the server in order to give feedback. In 1995, Netscape
    hired Brendan Eich with the promise of letting him implement Scheme (a Lisp dialect)
    in the browser.^([[2](#ftn.id368372)]) Before he could get started, Netscape collaborated
    with hardware and software company Sun (since bought by Oracle) to include its
    more static programming language, Java, in Navigator. As a consequence, a hotly
    debated question at Netscape was why the Web needed two programming languages:
    Java and a scripting language. The proponents of a scripting language offered
    the following explanation:^([[3](#ftn.id902418)])'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: We aimed to provide a “glue language” for the Web designers and part time programmers
    who were building Web content from components such as images, plugins, and Java
    applets. We saw Java as the “component language” used by higher-priced programmers,
    where the glue programmers—the Web page designers—would assemble components and
    automate their interactions using [a scripting language].
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By then, Netscape management had decided that a scripting language had to have
    a syntax similar to Java’s. That ruled out adopting existing languages such as
    Perl, Python, TCL, or Scheme. To defend the idea of JavaScript against competing
    proposals, Netscape needed a prototype. Eich wrote one in 10 days, in May 1995.
    JavaScript’s first code name was Mocha, coined by Marc Andreesen. Netscape marketing
    later changed it to LiveScript, for trademark reasons and because the names of
    several products already had the prefix “Live.” In late November 1995, Navigator
    2.0B3 came out and included the prototype, which continued its early existence
    without major changes. In early December 1995, Java’s momentum had grown, and
    Sun licensed the trademark Java to Netscape. The language was renamed again, to
    its final name, JavaScript.^([[4](#ftn.id902426)])
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: ^([[2](#id368372)]) Brendan Eich, “Popularity,” April 3, 2008, [http://bit.ly/1lKl6fG](http://bit.ly/1lKl6fG).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '^([[3](#id902418)]) Naomi Hamilton, “The A–Z of Programming Languages: JavaScript,”
    Computerworld, July 30, 2008, [http://bit.ly/1lKldIe](http://bit.ly/1lKldIe).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: ^([[4](#id902426)]) Paul Krill, “JavaScript Creator Ponders Past, Future,” InfoWorld,
    June 23, 2008, [http://bit.ly/1lKlpXO](http://bit.ly/1lKlpXO); Brendan Eich, “A
    Brief History of JavaScript,” July 21, 2010, [http://bit.ly/1lKkI0M](http://bit.ly/1lKkI0M).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5. Standardization: ECMAScript'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After JavaScript came out, Microsoft implemented the same language, under the
    different name JScript, in Internet Explorer 3.0 (August 1996). Partially to keep
    Microsoft in check, Netscape decided to standardize JavaScript and asked the standards
    organization [Ecma International](http://en.wikipedia.org/wiki/Ecma) to host the
    standard. Work on a specification called ECMA-262 started in November 1996\. Because
    Sun (now Oracle) had a trademark on the word *Java*, the official name of the
    language to be standardized couldn’t be *JavaScript*. Hence, *ECMAScript* was
    chosen, derived from *JavaScript* and *Ecma*. However, that name is used only
    to refer to versions of the language (where one refers to the specification).
    Everyone still calls the language *JavaScript*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 推出后，微软在 Internet Explorer 3.0（1996年8月）中实现了相同的语言，但名称不同，称为 JScript。为了限制微软，网景决定标准化
    JavaScript，并要求标准组织 [Ecma International](http://en.wikipedia.org/wiki/Ecma) 托管标准。ECMA-262
    的规范工作始于1996年11月。由于 Sun（现在是 Oracle）对 *Java* 一词拥有商标，因此标准化的官方名称不能是 *JavaScript*。因此，选择了
    *ECMAScript*，源自 *JavaScript* 和 *Ecma*。但是，该名称仅用于指代语言的版本（其中一个指的是规范）。每个人仍然称该语言为 *JavaScript*。
- en: ECMA-262 is managed and evolved by Ecma’s [Technical Committee 39](http://bit.ly/1oNTQiP)
    (TC39). Its members are companies such as Microsoft, Mozilla, and Google, which
    appoint employees to participate in committee work; examples include Brendan Eich,
    Allen Wirfs-Brock (editor of ECMA-262), and David Herman. To advance the design
    of ECMAScript, TC39 hosts discussions on open channels (such as the mailing list
    [es-discuss](https://mail.mozilla.org/listinfo/es-discuss)) and holds regular
    meetings. The meetings are attended by TC39 members and invited experts. In early
    2013, attendee numbers ranged from 15 to 25.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ECMA-262 由 Ecma 的 [技术委员会 39](http://bit.ly/1oNTQiP)（TC39）管理和发展。其成员是微软、Mozilla
    和 Google 等公司，它们指定员工参与委员会工作；例如 Brendan Eich、Allen Wirfs-Brock（ECMA-262 的编辑）和 David
    Herman。为了推进 ECMAScript 的设计，TC39 在开放渠道（如邮件列表 [es-discuss](https://mail.mozilla.org/listinfo/es-discuss)）上举行讨论，并定期举行会议。会议由
    TC39 成员和受邀专家参加。2013年初，与会人数从15到25人不等。
- en: 'The following is a list of ECMAScript versions (or *editions* of ECMA-262)
    and their key features:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 ECMAScript 版本（或 ECMA-262 的 *版本*）及其主要特性的列表：
- en: ECMAScript 1 (June 1997)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 1（1997年6月）
- en: First edition
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一版
- en: ECMAScript 2 (August 1998)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 2（1998年8月）
- en: Editorial changes to align ECMA-262 with the standard ISO/IEC 16262
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑更改以使 ECMA-262 与标准 ISO/IEC 16262 保持一致
- en: ECMAScript 3 (December 1999)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 3（1999年12月）
- en: '`do-while`, regular expressions, new string methods (`concat`, `match`, `replace`,
    `slice`, `split` with a regular expression, etc.), exception handling, and more'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`do-while`，正则表达式，新的字符串方法（`concat`，`match`，`replace`，`slice`，使用正则表达式的`split`等），异常处理等'
- en: ECMAScript 4 (abandoned July 2008)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 4（2008年7月放弃）
- en: 'ECMAScript 4 was developed as the next version of JavaScript, with a prototype
    written in ML. However, TC39 could not agree on its feature set. To prevent an
    impasse, the committee met at the end of July 2008 and came to an accord, summarized
    in [four points](http://mzl.la/1oNTUiG):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 4 被开发为 JavaScript 的下一个版本，原型是用 ML 编写的。然而，TC39 无法就其功能集达成一致。为防止僵局，委员会于2008年7月底举行会议，并达成了一致，总结在
    [四点](http://mzl.la/1oNTUiG) 中：
- en: Develop an incremental update of ECMAScript 3 (which became ECMAScript 5).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发了 ECMAScript 3 的增量更新（成为 ECMAScript 5）。
- en: Develop a major new version that does less than ECMAScript 4, but much more
    than the incremental update of ECMAScript 3\. The code name for the new version
    is Harmony, due to the nature of the meeting in which it was conceived. Harmony
    will be split into ECMAScript 6 and ECMAScript 7.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发了一个比 ECMAScript 4 更少，但比 ECMAScript 3 的增量更新更多的主要新版本。新版本的代号是 Harmony，因为它的构思是在一个和谐的会议中产生的。Harmony
    将分为 ECMAScript 6 和 ECMAScript 7。
- en: Features from ECMAScript 4 that would be dropped included packages, namespaces,
    and early binding.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECMAScript 4 中将被删除的特性包括包，命名空间和早期绑定。
- en: Other ideas were to be developed in consensus with all of TC39.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他想法将与 TC39 共识开发。
- en: Thus, the ECMAScript 4 developers agreed to make Harmony less radical than ECMAScript 4,
    and the rest of TC39 agreed to keep moving things forward.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ECMAScript 4 的开发人员同意使 Harmony 比 ECMAScript 4 更少激进，而 TC39 的其他成员同意继续推动事情向前发展。
- en: ECMAScript 5 (December 2009)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 5（2009年12月）
- en: Adds a strict mode, getters and setters, new array methods, support for JSON,
    and more (see [Chapter 25](ch25.html "Chapter 25. New in ECMAScript 5"))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了严格模式，获取器和设置器，新的数组方法，对 JSON 的支持等（参见 [第25章](ch25.html "第25章。ECMAScript 5 中的新内容")）
- en: ECMAScript 5.1 (June 2011)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 5.1（2011年6月）
- en: Editorial changes to align ECMA-262 with the third edition of the international
    standard ISO/IEC 16262:2011
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑更改以使 ECMA-262 与国际标准 ISO/IEC 16262:2011 的第三版保持一致
- en: ECMAScript 6
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6
- en: Currently in development, it is estimated to be ratified by the end of 2014.
    Most engines will probably support the most important ECMAScript 6 features at
    ratification. Complete support may take longer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正在开发中，预计将在2014年底得到批准。大多数引擎可能会在批准时支持最重要的 ECMAScript 6 特性。完整支持可能需要更长时间。
- en: Reaching consensus and creating a standard is not always easy, but thanks to
    the collaborative efforts of the aforementioned parties, JavaScript is a truly
    open language, with implementations by multiple vendors that are remarkably compatible.
    That compatibility is made possible by a very detailed yet concrete specification.
    For example, the specification often uses pseudocode, and it is complemented by
    a test suite, [test262](http://test262.ecmascript.org/), that checks an ECMAScript
    implementation for compliance. It is interesting to note that ECMAScript is not
    managed by the World Wide Web Consortium (W3C). TC39 and the W3C collaborate wherever
    there is overlap between JavaScript and HTML5.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 达成共识并创建标准并不总是容易的，但由于前述各方的协作努力，JavaScript是一种真正开放的语言，由多个供应商实现，具有非常高的兼容性。这种兼容性是通过非常详细但具体的规范实现的。例如，规范经常使用伪代码，并且它由一个测试套件[test262](http://test262.ecmascript.org/)补充，该测试套件检查ECMAScript实现的兼容性。有趣的是，ECMAScript并不由万维网联盟（W3C）管理。TC39和W3C在JavaScript和HTML5之间存在重叠时进行合作。
- en: Chapter 6. Historical JavaScript Milestones
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6章。历史JavaScript里程碑
- en: 'It took JavaScript a long time to make an impact. Many JavaScript-related technologies
    existed for a while until they were discovered by the mainstream. This section
    describes what happened from JavaScript’s creation until today. Throughout, only
    the most popular projects are mentioned and many are ignored, even if they were
    first. For example, the Dojo Toolkit is listed, but there is also the lesser-known
    [qooxdoo](http://qooxdoo.org/), which was created around the same time. And Node.js
    is listed, even though [Jaxer](https://github.com/aptana/Jaxer) existed before
    it:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript花了很长时间才产生影响。许多与JavaScript相关的技术存在了一段时间，直到它们被主流发现。本节描述了从JavaScript的创建到今天发生的事情。在整个过程中，只提到了最受欢迎的项目，而忽略了许多项目，即使它们是第一个。例如，列出了Dojo
    Toolkit，但也有较少人知道的[qooxdoo](http://qooxdoo.org/)，它是在同一时间创建的。还列出了Node.js，尽管[Jaxer](https://github.com/aptana/Jaxer)在它之前就存在：
- en: 1997—[Dynamic HTML](http://bit.ly/1oNVOzH)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 1997年—[动态HTML](http://bit.ly/1oNVOzH)
- en: Dynamic HTML allows you to dynamically change the content and appearance of
    a web page. You achieve this by manipulating the Document Object Model (DOM) of
    the page, a tree-shaped data structure. Things you can do include changing content,
    changing style, and showing and hiding elements. Dynamic HTML appeared first in
    Internet Explorer 4 and in Netscape Navigator 4.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 动态HTML允许您动态更改网页的内容和外观。您可以通过操作页面的文档对象模型（DOM）来实现这一点，这是一种树状数据结构。您可以做的事情包括更改内容，更改样式，显示和隐藏元素。动态HTML首次出现在Internet
    Explorer 4和Netscape Navigator 4中。
- en: 1999—[XMLHttpRequest](http://www.w3.org/TR/XMLHttpRequest/)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 1999年—[XMLHttpRequest](http://www.w3.org/TR/XMLHttpRequest/)
- en: This API lets a client-side script send an HTTP or HTTPS request to a server
    and get back data, usually in a text format (XML, HTML, JSON). It was introduced
    in Internet Explorer 5.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此API允许客户端脚本向服务器发送HTTP或HTTPS请求并返回数据，通常以文本格式（XML，HTML，JSON）返回。它是在Internet Explorer
    5中引入的。
- en: 2001—[JSON](http://json.org/), a JavaScript-based data exchange format
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年—[JSON](http://json.org/)，基于JavaScript的数据交换格式
- en: 'In 2001, Douglas Crockford named and documented JSON (JavaScript Object Notation),
    whose main idea is to use JavaScript syntax to store data in text format. JSON
    uses JavaScript literals for objects, arrays, strings, numbers, and booleans to
    represent structured data. For example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年，道格拉斯·克罗克福德命名并记录了JSON（JavaScript对象表示法），其主要思想是使用JavaScript语法以文本格式存储数据。 JSON使用JavaScript文字来表示对象，数组，字符串，数字和布尔值以表示结构化数据。例如：
- en: '[PRE0]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Over the years, JSON has become a popular lightweight alternative to XML, especially
    when structured data is to be represented and not markup. Naturally, JSON is easy
    to consume via JavaScript (see [Chapter 22](ch22.html "Chapter 22. JSON")).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，JSON已成为XML的受欢迎的轻量级替代品，特别是在需要表示结构化数据而不是标记时。自然地，JSON易于通过JavaScript消耗（参见[第22章](ch22.html
    "第22章。JSON")）。
- en: 2004—[Dojo Toolkit](http://dojotoolkit.org/), a framework for programming JavaScript
    in the large
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 2004年—[Dojo Toolkit](http://dojotoolkit.org/)，用于大规模编程JavaScript的框架
- en: 'The Dojo Toolkit facilitates programming in the large by providing the necessary
    infrastructure: an inheritance library, a module system, an API for desktop-style
    graphical widgets, and more.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Dojo Toolkit通过提供必要的基础设施来促进大规模编程：继承库，模块系统，用于桌面式图形小部件的API等。
- en: 2005—[Ajax](http://bit.ly/1oNW3Lf), browser-based desktop-class applications
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年—[Ajax](http://bit.ly/1oNW3Lf)，基于浏览器的桌面级应用程序
- en: 'Ajax is a collection of technologies that brings a level of interactivity to
    web pages that rivals that of desktop applications. One impressive example of
    what can be achieved via Ajax was introduced in February 2005: Google Maps. This
    application allowed you to pan and zoom over a map of the world, but only the
    content that was currently visible was downloaded to the browser. After Google
    Maps came out, Jesse James Garrett noticed that it shared certain traits with
    other interactive websites. He called these traits *Ajax*, a shorthand for *Asynchronous
    JavaScript and XML*.^([[5](#ftn.id412204)]) The two cornerstones of Ajax are loading
    content asynchronously in the background (via `XMLHttpRequest`) and dynamically
    updating the current page with the results (via dynamic HTML). That was a considerable
    usability improvement from always performing complete page reloads.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax是一组技术，为网页带来了与桌面应用程序相媲美的交互水平。一个令人印象深刻的例子是2005年2月推出的Google地图。该应用程序允许您在世界地图上平移和缩放，但只有当前可见的内容才会下载到浏览器中。在Google地图推出后，杰西·詹姆斯·加勒特注意到它与其他交互式网站共享某些特征。他将这些特征称为*Ajax*，这是*异步JavaScript和XML*的简称。Ajax的两个基石是在后台异步加载内容（通过`XMLHttpRequest`）并动态更新当前页面的结果（通过动态HTML）。这是一个相当大的可用性改进，可以避免始终执行完整的页面重新加载。
- en: Ajax marked the mainstream breakthrough of JavaScript and dynamic web applications.
    It is interesting to note how long that took—at that point, the Ajax ingredients
    had been available for years. Since the inception of Ajax, other data formats
    have become popular (JSON instead of XML), other protocols are used (e.g., Web
    Sockets in addition to HTTP), and bidirectional communication is possible. But
    the basic techniques are still the same. However, the term *Ajax* is used much
    less these days and has mostly been replaced by the more comprehensive terms *HTML5*
    and *Web Platform* (which both mean JavaScript plus browser APIs).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax标志着JavaScript和动态Web应用程序的主流突破。有趣的是要注意这花了多长时间——在那时，Ajax的成分已经可用多年。自Ajax诞生以来，其他数据格式变得流行（JSON取代XML），使用其他协议（例如，除HTTP外还使用Web
    Sockets），并且双向通信是可能的。但基本技术仍然是相同的。然而，这个术语*Ajax*如今使用得少得多，大多数情况下已经被更全面的术语*HTML5*和*Web平台*（两者都意味着JavaScript加上浏览器API）所取代。
- en: 2005—[Apache CouchDB](http://couchdb.apache.org/), a JavaScript-centric database
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年—[Apache CouchDB](http://couchdb.apache.org/)，一个以JavaScript为中心的数据库
- en: 'Roughly, CouchDB is a JSON database: you feed it JSON objects, without the
    need to specify a schema in advance. Additionally, you can define views and indexes
    via JavaScript functions that perform map/reduce operations. Hence, CouchDB is
    a very good fit for JavaScript because you can work directly with native data.
    Compared to a relational database, there is no mapping-related impedance mismatch.
    Compared to an object database, you avoid many complications because only data
    is stored, not behavior. CouchDB is just one of several similar [NoSQL databases](http://bit.ly/1oNYfCp).
    Most of them have excellent JavaScript support.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 大致上，CouchDB是一个JSON数据库：您可以向其提供JSON对象，无需事先指定模式。此外，您可以通过执行map/reduce操作的JavaScript函数定义视图和索引。因此，CouchDB非常适合JavaScript，因为您可以直接使用本机数据。与关系数据库相比，没有映射相关的阻抗不匹配。与对象数据库相比，您避免了许多复杂性，因为只存储数据，而不是行为。CouchDB只是几个类似的[NoSQL数据库](http://bit.ly/1oNYfCp)中的一个。它们中的大多数都具有出色的JavaScript支持。
- en: 2006—[jQuery](http://jquery.com/), helping with DOM manipulation
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年—[jQuery](http://jquery.com/)，帮助DOM操作
- en: The browser DOM is one of the most painful parts of client-side web development.
    jQuery made DOM manipulation fun by abstracting over browser differences and by
    providing a powerful fluent-style API for querying and modifying the DOM.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器DOM是客户端Web开发中最痛苦的部分之一。jQuery通过在浏览器差异上进行抽象和提供强大的流畅式API来使DOM操作变得有趣，从而使DOM操作变得有趣。
- en: 2007—[WebKit](https://www.webkit.org/), taking the mobile web mainstream
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年—[WebKit](https://www.webkit.org/)，将移动Web推向主流
- en: Based on prior work by KDE, WebKit is an HTML engine that was introduced by
    Apple in 2003\. It was open-sourced in 2005\. With the introduction of the iPhone
    in 2007, the mobile Web suddenly became mainstream and had little to no limitations
    compared to the nonmobile Web.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 基于KDE的先前工作，WebKit是苹果于2003年推出的HTML引擎。它于2005年开源。随着iPhone于2007年的推出，移动Web突然变得主流，并与非移动Web相比几乎没有限制。
- en: 2008—[V8](http://code.google.com/p/v8/), proving JavaScript can be fast
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年—[V8](http://code.google.com/p/v8/)，证明JavaScript可以很快
- en: When Google introduced its Chrome web browser, one of its highlights was a fast
    JavaScript engine called V8\. It changed the perception of JavaScript as being
    slow and led to a speed race with other browser vendors from which we are still
    profiting. V8 is open source and can be used as a standalone component whenever
    you need a fast embedded language that is widely known.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当谷歌推出其Chrome网络浏览器时，其中一个亮点是一个名为V8的快速JavaScript引擎。它改变了JavaScript速度慢的看法，并引发了与其他浏览器供应商的速度竞赛，我们至今仍在受益。V8是开源的，可以在需要快速嵌入式语言时作为独立组件使用。
- en: 2009—[Node.js](http://nodejs.org/), implementing JavaScript on the server
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年—[Node.js](http://nodejs.org/)，在服务器上实现JavaScript
- en: 'Node.js lets you implement servers that perform well under load. To do so,
    it uses event-driven, nonblocking I/O and JavaScript (via V8). Node.js creator
    Ryan Dahl mentions the following reasons for choosing JavaScript:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js允许您实现在负载下表现良好的服务器。为此，它使用事件驱动的非阻塞I/O和JavaScript（通过V8）。Node.js的创始人Ryan
    Dahl提到了选择JavaScript的以下原因：
- en: “Because it’s bare and does not come with I/O APIs.” [Node.js can thus introduce
    its own nonblocking APIs.]
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “因为它是裸露的，没有I/O API。”[因此，Node.js可以引入自己的非阻塞API。]
- en: “Web developers use it already.” [JavaScript is a widely known language, especially
    in a web context.]
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Web开发人员已经在使用它。”[JavaScript是一种广为人知的语言，特别是在Web环境中。]
- en: “DOM API is event-based. Everyone is already used to running without threads
    and on an event loop.” [Developers are used to an asynchronous coding style.]
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “DOM API是基于事件的。每个人都已经习惯了在没有线程和事件循环上运行。”[开发人员习惯于异步编码风格。]
- en: Dahl was able to build on prior work on event-driven servers and server-side
    JavaScript (mainly the [CommonJS](http://www.commonjs.org/) project).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Dahl能够在事件驱动服务器和服务器端JavaScript（主要是[CommonJS](http://www.commonjs.org/)项目）的先前工作基础上构建。
- en: 'The appeal of Node.js for JavaScript programmers goes beyond being able to
    program in a familiar language; you get to use the same language on both client
    and server. That means you can share more code (e.g., for validating data) and
    use techniques such as [*isomorphic JavaScript*](http://bit.ly/1gWhLIs). Isomorphic
    JavaScript is about assembling web pages on either client or server, with numerous
    benefits: pages can be rendered on the server for faster initial display, SEO,
    and running on browsers that either don’t support JavaScript or a version that
    is too old. But they can also be updated on the client, resulting in a more responsive
    user interface.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js对JavaScript程序员的吸引力不仅在于能够使用熟悉的语言进行编程；您可以在客户端和服务器上使用相同的语言。这意味着您可以共享更多的代码（例如，用于验证数据）并使用诸如[*同构JavaScript*](http://bit.ly/1gWhLIs)之类的技术。同构JavaScript是关于在客户端或服务器上组装网页，具有许多好处：可以在服务器上呈现页面以实现更快的初始显示、SEO以及在不支持JavaScript或版本过旧的浏览器上运行。但它们也可以在客户端上更新，从而实现更具响应性的用户界面。
- en: 2009—[PhoneGap](http://phonegap.com/), writing native apps in HTML5
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年—[PhoneGap](http://phonegap.com/)，使用HTML5编写本机应用程序
- en: '*PhoneGap* was created by a company called Nitobi that was later purchased
    by Adobe. The open source foundation of PhoneGap is called *Cordova*. The initial
    mission of PhoneGap was to make it possible to implement native mobile apps via
    HTML5\. Since then, support has expanded to nonmobile operating systems. Currently
    supported platforms include Android, Bada, BlackBerry, Firefox OS, iOS, Mac OS
    X, Tizen, Ubuntu, Windows (desktop), and Windows Phone. Apart from HTML5 APIs,
    there are also PhoneGap-specific APIs for accessing [native features](http://bit.ly/1oO22Q9)
    such as the accelerometer, camera, and contacts.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: PhoneGap是由一家名为Nitobi的公司创建的，后来被Adobe收购。PhoneGap的开源基础称为Cordova。PhoneGap最初的使命是通过HTML5实现原生移动应用程序。自那时起，支持已扩展到非移动操作系统。目前支持的平台包括Android，Bada，BlackBerry，Firefox
    OS，iOS，Mac OS X，Tizen，Ubuntu，Windows（桌面）和Windows Phone。除了HTML5 API之外，还有专门用于访问加速计，相机和联系人等[本机功能](http://bit.ly/1oO22Q9)的PhoneGap特定API。
- en: 2009—[Chrome OS](http://bit.ly/1oO27U2), making the browser the operating system
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年—[Chrome OS](http://bit.ly/1oO27U2)，使浏览器成为操作系统
- en: 'With Chrome OS, the web platform is the native platform. This approach has
    several advantages:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Chrome OS来说，Web平台就是本机平台。这种方法有几个优点：
- en: It is much easier to create an operating system, because all of the user interface
    technology is already there.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建操作系统要容易得多，因为所有用户界面技术都已经存在。
- en: Many developers already (mostly) know how to write apps for the operating system.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多开发人员已经（大部分）知道如何为操作系统编写应用程序。
- en: Managing apps is simple. That helps public installations such as Internet cafes
    and schools.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理应用程序很简单。这有助于公共场所的安装，如网吧和学校。
- en: 'The introduction of the mobile operating system [webOS](http://bit.ly/1oO2e1N)
    (which originated at Palm and is now owned by LG Electronics) predates the introduction
    of Chrome OS, but the “browser as OS” idea is more apparent with the latter (which
    is why it was chosen as a milestone). webOS is both less and more. Less, because
    it is very focused on cell phones and tablets. More, because it has Node.js built
    in, to let you implement services in JavaScript. A more recent entry in the web
    operating system category is Mozilla’s [Firefox OS](http://mzl.la/1oO2i1J), which
    targets cell phones and tablets. [Mozilla’s wiki](http://mzl.la/1oO2n5m) mentions
    a benefit of web operating systems for the Web:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 移动操作系统[webOS](http://bit.ly/1oO2e1N)的推出（起源于Palm，现在由LG Electronics拥有）早于Chrome
    OS的推出，但后者更明显地体现了“浏览器作为操作系统”的理念（这就是为什么它被选为里程碑的原因）。webOS既少，因为它非常专注于手机和平板电脑。又多，因为它内置了Node.js，可以让您用JavaScript实现服务。在Web操作系统类别中，最近的一个新进是Mozilla的[Firefox
    OS](http://mzl.la/1oO2i1J)，它针对手机和平板电脑。 [Mozilla的维基](http://mzl.la/1oO2n5m)提到Web操作系统对Web的好处：
- en: We also need a hill to take, in order to scope and focus our efforts. Recently
    we saw the pdf.js project [which renders PDFs via HTML5, without plugins] expose
    small gaps that needed filling in order for “HTML5” to be a superset of PDF. We
    want to take a bigger step now, and find the gaps that keep web developers from
    being able to build apps that are—in every way—the equals of native apps built
    for the iPhone, Android, and WP7.
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们还需要一个目标，以便确定和专注我们的努力。最近，我们看到了pdf.js项目[通过HTML5渲染PDF，无需插件]暴露出一些需要填补的小差距，以便使“HTML5”成为PDF的超集。现在，我们希望迈出更大的一步，找到阻止Web开发人员能够构建与iPhone，Android和WP7为等同的本机应用程序的差距。
- en: 2011—[Windows 8](http://bit.ly/1oO2qhJ), first-class HTML5 apps
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 2011年—[Windows 8](http://bit.ly/1oO2qhJ)，一流的HTML5应用程序
- en: When Microsoft introduced Windows 8, it surprised everyone with the operating
    system’s extensive integration of HTML5\. HTML5 applications are first-class citizens
    in Windows 8, on par with those implemented via incumbent technologies such as
    .NET and C++. To demonstrate that point, Microsoft wrote several important Windows
    8 applications in HTML5 (plus calls to native APIs), including the app store and
    the email app.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当微软推出Windows 8时，它让所有人都感到惊讶，因为该操作系统广泛集成了HTML5。在Windows 8中，HTML5应用程序与通过现有技术（如.NET和C++）实现的应用程序平等。为了证明这一点，微软用HTML5（加上对本机API的调用）编写了几个重要的Windows
    8应用程序，包括应用商店和电子邮件应用程序。
- en: '* * *'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([[5](#id412204)]) Ajax is a shorthand, but not an acronym, which is why it
    isn’t styled as AJAX.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ^([[5](#id412204)]) Ajax是一个缩写词，但不是一个首字母缩写，这就是为什么它没有被写成AJAX。

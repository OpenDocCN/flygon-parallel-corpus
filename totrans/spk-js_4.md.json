["```js\n    if (x !== undefined && x !== null) ...  // my choice\n    if (x != null) ...  // equivalent\n    ```", "```js\n// Allman brace style\nfunction foo(x, y, z)\n{\n    if (x)\n    {\n        a();\n    }\n    else\n    {\n        b();\n        c();\n    }\n}\n```", "```js\n// One True Brace Style\nfunction foo(x, y, z) {\n    if (x) {\n        a();\n    } else {\n        b();\n        c();\n    }\n}\n```", "```js\n// K&R brace style\nfunction foo(x, y, z)\n{\n    if (x)\n        a();\n    else {\n        b();\n        c();\n    }\n}\n```", "```js\nreturn {\n    name: 'Jane'\n};\n```", "```js\n    if (x) return x;\n    ```", "```js\nvar obj = new Object(); // no\nvar obj = {}; // yes\n\nvar arr = new Array(); // no\nvar arr = []; // yes\n\nvar regex = new RegExp('abc'); // avoid if possible\nvar regex = /abc/; // yes\n```", "```js\nvar arr = new Array('a', 'b', 'c'); // never ever\nvar arr = [ 'a', 'b', 'c' ]; // yes\n```", "```js\n// Don\u2019t:\nreturn x === 0 ? 'red' : x === 1 ? 'green' : 'blue';\n\n// Better:\nif (x === 0) {\n    return 'red';\n} else if (x === 1) {\n    return 'green';\n} else {\n    return 'blue';\n}\n\n// Best:\nswitch (x) {\n    case 0:\n        return 'red';\n    case 1:\n        return 'green';\n    default:\n        return 'blue';\n}\n```", "```js\nfoo && bar(); // no\nif (foo) bar(); // yes\n\nfoo || bar(); // no\nif (!foo) bar(); // yes\n```", "```js\n// Unsure: what is happening?\nreturn ++foo;\n\n// Easy to understand\n++foo;\nreturn foo;\n```", "```js\nif (x === void 0) x = 0; // not necessary in ES5\nif (x === undefined) x = 0; // preferable\n```", "```js\nreturn x >> 0; // no\nreturn Math.round(x); // yes\n```", "```js\nfunction f(x) {\n    x = x || 0;\n    ...\n}\n```", "```js\nObject.prototype.hasOwnProperty.call(obj, propKey)\n{}.hasOwnProperty.call(obj, propKey)\n```", "```js\nArray.prototype.slice.call(arguments)\n[].slice.call(arguments)\n```", "```js\nvar obj = {\n    first: 'Jane',\n    last: 'Doe', // legal: trailing comma\n};\n```", "```js\n> var obj = { new: 'abc' };\n> obj.new\n'abc'\n```", "```js\nvar result = foo('a', 'b');\nvar arr = [ 1, 2, 3 ];\nif (flag) {\n    ...\n}\n```", "```js\nfunction foo(arg) { ... }  // named function expression\nfunction (arg) { ... }     // anonymous function expression\n```", "```js\nreturn result ? result : theDefault;  // no\nreturn (result ? result : theDefault);  // yes\n```", "```js\n// no\nvar foo = 3,\n    bar = 2,\n    baz;\n\n// yes\nvar foo = 3;\nvar bar = 2;\nvar baz;\n```", "```js\n// Don\u2019t do this\nif (v) {\n    var x = v;\n} else {\n    var x = 10;\n}\ndoSomethingWith(x);\n```", "```js\nvar x;\nif (v) {\n    x = v;\n} else {\n    x = 10;\n}\ndoSomethingWith(x);\n```", "```js\nvar foo = new Foo;  // no\nvar foo = new Foo();  // yes\n```", "```js\n> false && true || true\ntrue\n> false && (true || true)\nfalse\n> (false && true) || true\ntrue\n```", "```js\n> ! {} instanceof Array\nfalse\n> (!{}) instanceof Array\nfalse\n> !({} instanceof Array)\ntrue\n```", "```js\nnew Foo().bar().baz();  // ok\n(new Foo()).bar().baz();  // not necessary\n```", "```js\n> +'123'  // no\n123\n> Number('123')  // yes\n123\n\n> ''+true  // no\n'true'\n> String(true)  // yes\n'true'\n```", "```js\n// Avoid:\nfunction handler() {\n    this.logError(...);\n}\n\n// Prefer:\nfunction handler(context) {\n    context.logError(...);\n}\n```", "```js\n// All properties:\nif (obj.foo)  // no\nif (obj.foo !== undefined)  // no\nif ('foo' in obj) ... // yes\n\n// Own properties:\nif (obj.hasOwnProperty('foo')) ... // risky for arbitrary objects\nif (Object.prototype.hasOwnProperty.call(obj, 'foo')) ... // safe\n```", "```js\nfunction Super(x, y) {\n    this.x = x;  // (1)\n    this.y = y;  // (1)\n}\nfunction Sub(x, y, z) {\n    // Add superproperties to subinstance\n    Super.call(this, x, y);  // (2)\n    // Add subproperty\n    this.z = z;\n}\n```", "```js\nfunction MyArray(/*arguments*/) {\n    var arr = [];\n    // Don\u2019t use Array constructor to set up elements (doesn\u2019t always work)\n    Array.prototype.push.apply(arr, arguments);  // (1)\n    copyOwnPropertiesFrom(arr, MyArray.methods);\n    return arr;\n}\nMyArray.methods = {\n    get size() {\n        var size = 0;\n        for (var i=0; i < this.length; i++) {\n            if (i in this) size++;\n        }\n        return size;\n    }\n}\n```", "```js\n> var a = new MyArray('a', 'b')\n> a.length = 4;\n> a.length\n4\n> a.size\n2\n```", "```js\n> a instanceof MyArray\nfalse\n> a instanceof Array\ntrue\n```", "```js\nfunction Super(x, y) {\n    this.x = x;\n    this.y = y;\n}\nfunction Sub(x, y, z) {\n    // Add superproperties to subinstance\n    Super.call(this, x, y);  // (1)\n    // Add subproperty\n    this.z = z;\n}\n```", "```js\n> var e = {};\n> Object.getOwnPropertyNames(Error.call(e)) // new instance\n[ 'stack', 'arguments', 'type' ]\n> Object.getOwnPropertyNames(e) // unchanged\n[]\n```", "```js\nfunction MyError() {\n    // Use Error as a function\n    var superInstance = Error.apply(null, arguments);\n    copyOwnPropertiesFrom(this, superInstance);\n}\nMyError.prototype = Object.create(Error.prototype);\nMyError.prototype.constructor = MyError;\n```", "```js\ntry {\n    throw new MyError('Something happened');\n} catch (e) {\n    console.log('Properties: '+Object.getOwnPropertyNames(e));\n}\n```", "```js\nProperties: stack,arguments,message,type\n```", "```js\n> new MyError() instanceof Error\ntrue\n> new MyError() instanceof MyError\ntrue\n```", "```js\nfunction MyArray(/*arguments*/) {\n    this.array = [];\n    Array.prototype.push.apply(this.array, arguments);\n}\nObject.defineProperties(MyArray.prototype, {\n    size: {\n        get: function () {\n            var size = 0;\n            for (var i=0; i < this.array.length; i++) {\n                if (i in this.array) size++;\n            }\n            return size;\n        }\n    },\n    length: {\n        get: function () {\n            return this.array.length;\n        },\n        set: function (value) {\n            return this.array.length = value;\n        }\n    }\n});\n```", "```js\nMyArray.prototype.get = function (index) {\n    return this.array[index];\n}\nMyArray.prototype.set = function (index, value) {\n    return this.array[index] = value;\n}\n```", "```js\n[ 'toString', 'push', 'pop' ].forEach(function (key) {\n    MyArray.prototype[key] = function () {\n        return Array.prototype[key].apply(this.array, arguments);\n    }\n});\n```", "```js\n> var a = new MyArray('a', 'b');\n> a.length = 4;\n> a.push('c')\n5\n> a.length\n5\n> a.size\n3\n> a.set(0, 'x');\n> a.toString()\n'x,b,,,c'\n```", "```js\n/** @namespace */\nvar util = {\n    /**\n * Repeat <tt>str</tt> several times.\n * @param {string} str The string to repeat.\n * @param {number} [times=1] How many times to repeat the string.\n * @returns {string}\n */\n    repeat: function(str, times) {\n        if (times === undefined || times < 1) {\n            times = 1;\n        }\n        return new Array(times+1).join(str);\n    }\n};\n```", "```js\n/**\n * Repeat <tt>str</tt> several times.\n * @param {string} str The string to repeat.\n * @param {number} [times=1] How many times to repeat the string.\n * @returns {string}\n */\n```", "```js\nmyFunction\nMyClass\nMyClass.staticMember\nMyClass#instanceMember\n```", "```js\n/**\n * @fileOverview Various tool functions.\n * @author <a href=\"mailto:jd@example.com\">John Doe</a>\n * @version 3.1.2\n */\n```", "```js\n/**\n * @example\n * var str = 'abc';\n * console.log(repeat(str, 3)); // abcabcabc\n */\n```", "```js\n/**\n * @see MyConstructor#myMethod\n * @see The <a href=\"http://example.com\">Example Project</a>.\n */\n```", "```js\n@version 10.3.1\n```", "```js\n@since 10.2.0\n```", "```js\n@param str The string to repeat.\n@param {string} str\n@param {string} str The string to repeat.\n```", "```js\n    @param {number} [times] The number of times is optional.\n    ```", "```js\n    @param {number} [times=1] The number of times is optional.\n    ```", "```js\n/**\n * @param {String} name\n * @returns {Object}\n */\nfunction getPerson(name) {\n}\n```", "```js\nfunction getPerson(/**String*/ name) /**Object*/ {\n}\n```", "```js\n/** @type {number} */\nvar carCounter = 0;\n```", "```js\n/** @constant */\nvar FORD = 'Ford';\n```", "```js\n/**\n * @constructor\n * @property {string} name The name of the person.\n */\nfunction Person(name) {\n    this.name = name;\n}\n```", "```js\n/**\n * @class\n */\nfunction Person(name) {\n    /**\n * The name of the person.\n * @type {string}\n */\n    this.name = name;\n}\n```", "```js\n/** @constructor */\nfunction Page(title) {\n    /**\n * @default 'Untitled'\n */\n     this.title = title || 'Untitled';\n}\n```", "```js\n/**\n * A class for managing persons.\n * @constructor\n */\nfunction Person(name) {\n}\n```", "```js\n/**\n * A class for managing persons.\n * @class\n */\nvar Person = makeClass(\n    /** @lends Person# */\n    {\n        say: function(message) {\n            return 'This person says: ' + message;\n        }\n    }\n);\n```", "```js\nvar Person = makeClass(\n    /** @lends Person# */\n    {\n        /**\n * A class for managing persons.\n * @constructs\n */\n        initialize: function(name) {\n            this.name = name;\n        },\n        say: function(message) {\n            return this.name + ' says: ' + message;\n        }\n    }\n);\n```", "```js\nvar Person = makeClass({\n        /**\n * A class for managing persons.\n * @constructs Person\n */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /** @memberof Person# */\n        say: function(message) {\n            return this.name + ' says: ' + message;\n        }\n    }\n);\n```", "```js\n/**\n * @constructor\n * @extends Person\n */\nfunction Programmer(name) {\n    Person.call(this, name);\n    ...\n}\n// Remaining code for subclassing omitted\n```", "```js\nvar moduleName = function () {\n    function privateFunction () { ... }\n    function publicFunction(...) {\n        privateFunction();\n        otherModule.doSomething();  // implicit import\n    }\n    return { // exports\n        publicFunction: publicFunction\n    };\n}();\n```", "```js\n<script src=\"modules/otherModule.js\"></script>\n<script src=\"modules/moduleName.js\"></script>\n<script type=\"text/javascript\">\n    moduleName.publicFunction(...);\n</script>\n```"]